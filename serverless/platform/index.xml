<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Taction's Blog – platform</title><link>https://taction.top/serverless/platform/</link><description>Recent content in platform on Taction's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh</language><lastBuildDate>Wed, 01 Dec 2021 15:50:12 +0800</lastBuildDate><atom:link href="https://taction.top/serverless/platform/index.xml" rel="self" type="application/rss+xml"/><item><title>Serverless: Knative Demo</title><link>https://taction.top/serverless/platform/knative-demo/</link><pubDate>Wed, 01 Dec 2021 15:50:12 +0800</pubDate><guid>https://taction.top/serverless/platform/knative-demo/</guid><description>
&lt;h3 id="概述">概述&lt;/h3>
&lt;p>经过前面的介绍，可以发现revision资源是整个流程的核心。那么在不对当前deployment部署托管的情况下。修改revision引用指定的deployment，那么在接受可以对deployment进行有限修改的情况下。就可以直接创建一个revision，让deployment自动获得对应的自动扩缩容的能力。从事后来看，通过这种方式，只需要对deployment增加一个revision name的label以及注入代理pod的修改就够了。通过这种修改方式，ksvc、configuration、route资源就可以弃用了。&lt;/p>
&lt;p>本文以以上案例修改的形式，促进对knative各个组件的了解。在目前的流程中deployment是由revision创建的。如果deployment是手动创建的，并且已经为deployment注入了queue容器和添加了revision的label。修改revision将其改为引用deployment。接下来看看我们需要为之适配修改哪些内容。&lt;/p>
&lt;p>&lt;img src="https://image-1255620078.cos.ap-nanjing.myqcloud.com/image-20211202192729680.png" alt="image-20211202192729680">&lt;/p>
&lt;h4 id="如何开发">如何开发&lt;/h4>
&lt;p>在&lt;a href="https://github.com/knative/serving/tree/main/hack">hack&lt;/a>文件夹下是一些列辅助开发的脚本。对于接下来的例子，会用到其中&lt;code>update-codegen.sh&lt;/code> 这个脚本来更新自动生成的k8s client代码文件。对于k8s 自定义controller开发来说，这是一个非常常见的行为。&lt;/p>
&lt;h3 id="crd修改增加引用">CRD修改增加引用&lt;/h3>
&lt;p>由于此次的修改目标是revision，所以首先找到revision crd 定义的地方，&lt;code>pkg/apis/serving/v1/revision_types.go&lt;/code>由于引用的ref结构在podautoscaler中有，所以我们直接拷贝过来就可以，&lt;/p>
&lt;p>Revisioin spec 如下所示，增加了&lt;code>ScaleTargetRef&lt;/code>的引用。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#75715e">// RevisionSpec holds the desired state of the Revision (from the client).
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">RevisionSpec&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;span style="color:#a6e22e">corev1&lt;/span>.&lt;span style="color:#a6e22e">PodSpec&lt;/span> &lt;span style="color:#e6db74">`json:&amp;#34;,inline&amp;#34;`&lt;/span>
&lt;span style="color:#75715e">// ContainerConcurrency specifies the maximum allowed in-flight (concurrent)
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// requests per container of the Revision. Defaults to `0` which means
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// concurrency to the application is not limited, and the system decides the
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// target concurrency for the autoscaler.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// +optional
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">ContainerConcurrency&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#66d9ef">int64&lt;/span> &lt;span style="color:#e6db74">`json:&amp;#34;containerConcurrency,omitempty&amp;#34;`&lt;/span>
&lt;span style="color:#75715e">// ScaleTargetRef defines the /scale-able resource that this Revision
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// is responsible for quickly right-sizing. If containers is an empty array
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// and ScaleTargetRef is defined, will not create a container.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">ScaleTargetRef&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">corev1&lt;/span>.&lt;span style="color:#a6e22e">ObjectReference&lt;/span> &lt;span style="color:#e6db74">`json:&amp;#34;scaleTargetRef,omitempty&amp;#34;`&lt;/span>
&lt;span style="color:#75715e">// TimeoutSeconds is the maximum duration in seconds that the request routing
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// layer will wait for a request delivered to a container to begin replying
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// (send network traffic). If unspecified, a system default will be provided.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// +optional
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">TimeoutSeconds&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#66d9ef">int64&lt;/span> &lt;span style="color:#e6db74">`json:&amp;#34;timeoutSeconds,omitempty&amp;#34;`&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>改完之后，在执行完&lt;code>./hack/update-codegen.sh&lt;/code>之后，你会发现在创建带有scaleTargetRef的revision的时候在创建时被拒绝了，这是因为前面说到的webhook校验逻辑造成的。那么针对这个修改还需要在&lt;code>pkg/apis/serving/v1/revision_validation.go&lt;/code>文件中修改校验逻辑,如果定义了&lt;code>scaleTargetRef&lt;/code>那么就校验&lt;code>scaleTargetRef&lt;/code>定义合法性，而不对&lt;code>PodSpec&lt;/code>部分进行校验允许不定义此部分内容。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#75715e">// Validate implements apis.Validatable
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">rs&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">RevisionSpec&lt;/span>) &lt;span style="color:#a6e22e">Validate&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span> &lt;span style="color:#a6e22e">context&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>) &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">apis&lt;/span>.&lt;span style="color:#a6e22e">FieldError&lt;/span> {
&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">errs&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">apis&lt;/span>.&lt;span style="color:#a6e22e">FieldError&lt;/span>
&lt;span style="color:#75715e">// If ScaleTargetRef appears, pod spec will not be used
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">rs&lt;/span>.&lt;span style="color:#a6e22e">ScaleTargetRef&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;span style="color:#a6e22e">errs&lt;/span> = &lt;span style="color:#a6e22e">serving&lt;/span>.&lt;span style="color:#a6e22e">ValidateNamespacedObjectReference&lt;/span>(&lt;span style="color:#a6e22e">rs&lt;/span>.&lt;span style="color:#a6e22e">ScaleTargetRef&lt;/span>).
&lt;span style="color:#a6e22e">ViaField&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;scaleTargetRef&amp;#34;&lt;/span>)
} &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;span style="color:#a6e22e">errs&lt;/span> = &lt;span style="color:#a6e22e">serving&lt;/span>.&lt;span style="color:#a6e22e">ValidatePodSpec&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>, &lt;span style="color:#a6e22e">rs&lt;/span>.&lt;span style="color:#a6e22e">PodSpec&lt;/span>)
}
&lt;span style="color:#75715e">// ......
&lt;/span>&lt;span style="color:#75715e">&lt;/span>}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>在修改完之后就可以创建带有引用的crd了。但是这个crd并不能按预期行为进行，因为我们将pod定义改成了deployment的ref引用。接下来要修改的就是controller的行为，使其在引用dp的模式下不再创建deployment。&lt;/p>
&lt;h3 id="引用模式下不创建deployment">引用模式下不创建deployment&lt;/h3>
&lt;p>前面说到过对于这个crd的修改会在&lt;code>pkg/reconciler/revision&lt;/code>中，首先查找到&lt;code>ReconcileKind&lt;/code>函数在&lt;code>pkg/reconciler/revision/revision.go&lt;/code>文件中，通过对这个函数的查看找到创建deployment的逻辑函数是在&lt;code>pkg/reconciler/revision/reconcile_resources.go&lt;/code>文件中的&lt;code>reconcileDeployment&lt;/code>函数，只需要修改在存在ref的时候不再创建dp就可以。&lt;/p>
&lt;p>另外还需要找到创建&lt;code>PodAutoscaler&lt;/code>部分，修改引用注入的方式，去掉其他无关代码，就是如果revision设置了引用那么就将&lt;code>PodAutoscaler&lt;/code>的引用设置为引用。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">MakePA&lt;/span>(&lt;span style="color:#a6e22e">rev&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">v1&lt;/span>.&lt;span style="color:#a6e22e">Revision&lt;/span>) &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">autoscalingv1alpha1&lt;/span>.&lt;span style="color:#a6e22e">PodAutoscaler&lt;/span> {
&lt;span style="color:#a6e22e">deploymentName&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">names&lt;/span>.&lt;span style="color:#a6e22e">Deployment&lt;/span>(&lt;span style="color:#a6e22e">rev&lt;/span>)
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">rev&lt;/span>.&lt;span style="color:#a6e22e">Spec&lt;/span>.&lt;span style="color:#a6e22e">ScaleTargetRef&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;span style="color:#a6e22e">deploymentName&lt;/span> = &lt;span style="color:#a6e22e">rev&lt;/span>.&lt;span style="color:#a6e22e">Spec&lt;/span>.&lt;span style="color:#a6e22e">ScaleTargetRef&lt;/span>.&lt;span style="color:#a6e22e">Name&lt;/span>
}
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">autoscalingv1alpha1&lt;/span>.&lt;span style="color:#a6e22e">PodAutoscaler&lt;/span>{
&lt;span style="color:#a6e22e">Spec&lt;/span>: &lt;span style="color:#a6e22e">autoscalingv1alpha1&lt;/span>.&lt;span style="color:#a6e22e">PodAutoscalerSpec&lt;/span>{
&lt;span style="color:#a6e22e">ScaleTargetRef&lt;/span>: &lt;span style="color:#a6e22e">corev1&lt;/span>.&lt;span style="color:#a6e22e">ObjectReference&lt;/span>{
&lt;span style="color:#a6e22e">APIVersion&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;apps/v1&amp;#34;&lt;/span>,
&lt;span style="color:#a6e22e">Kind&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Deployment&amp;#34;&lt;/span>,
&lt;span style="color:#a6e22e">Name&lt;/span>: &lt;span style="color:#a6e22e">deploymentName&lt;/span>,
},
},
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="小脑洞">小脑洞&lt;/h4>
&lt;p>固定的配置通常难以估计出一个服务正常的流量限制，而自适应限流通常都是计算服务的一个理想时延带宽比。假设以BBR为例，计算服务在满负载下的请求带宽时延，反向估算出服务的最大通行TPS，然后以这个TPS为阈值进行扩容计算。感觉可能有机会自适应扩容。&lt;/p>
&lt;p>knative跟service mesh的结合目前还是各成体系，只是能工作在一起，但是不能相互成就。最起码自适应限流的信号是可以流入knative控制信号的。&lt;/p>
&lt;p>这部分代码修改可以在&lt;a href="https://github.com/Taction/serving/tree/feat_route_ref">feat_route_ref&lt;/a>分支上看到。此分支基于knative 0.26版本修改。&lt;/p>
&lt;h5 id="后记">后记&lt;/h5></description></item><item><title>Serverless: Knative Queue</title><link>https://taction.top/serverless/platform/knative-queue/</link><pubDate>Wed, 01 Dec 2021 15:46:27 +0800</pubDate><guid>https://taction.top/serverless/platform/knative-queue/</guid><description>
&lt;h3 id="简介">简介&lt;/h3>
&lt;p>queue是knative在每个deployment都会为业务容器注入的&amp;quot;sidecar&amp;quot;，负责其入口流量代理行为。并且会对请求进行计数，对外暴露metrice接口，autoscaler会定期拉取这些指标数据。&lt;/p>
&lt;p>queue的几个端口表示如下：&lt;/p>
&lt;p>• 8012： queue-proxy 代理的http端口，流量的入口都会到 8012
• 8013： http2 端口，用于grpc流量的转发
• 8022： queue-proxy 管理端口，如健康检查
• 9090： queue-proxy的监控端口，暴露指标供 autoscaler 采集，用于扩缩容
• 9091： prometheus 应用监控指标（请求数，响应时长等）&lt;/p>
&lt;p>此外还有一个通过环境变量USER_PORT配置的用户容器端口，即业务实际暴露的服务端口，最初是在ksvc container port中配置的，然后一步一步带下来的。&lt;/p>
&lt;h3 id="指标上报">指标上报&lt;/h3>
&lt;h4 id="指标上报server">指标上报server&lt;/h4>
&lt;blockquote>
&lt;p>queue的指标上报是比较简单的一个逻辑，首先是在有请求的时候进行计数，然后暴露拉取接口。&lt;/p>
&lt;/blockquote>
&lt;p>queue会启动一个metrics server。同时支持protobuf和json格式的数据上报，原理都是一致的， 接下来以http reporter为例介绍。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">buildMetricsServer&lt;/span>(&lt;span style="color:#a6e22e">promStatReporter&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">queue&lt;/span>.&lt;span style="color:#a6e22e">PrometheusStatsReporter&lt;/span>, &lt;span style="color:#a6e22e">protobufStatReporter&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">queue&lt;/span>.&lt;span style="color:#a6e22e">ProtobufStatsReporter&lt;/span>) &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">Server&lt;/span> {
&lt;span style="color:#a6e22e">metricsMux&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">NewServeMux&lt;/span>()
&lt;span style="color:#a6e22e">metricsMux&lt;/span>.&lt;span style="color:#a6e22e">Handle&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/metrics&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">queue&lt;/span>.&lt;span style="color:#a6e22e">NewStatsHandler&lt;/span>(&lt;span style="color:#a6e22e">promStatReporter&lt;/span>, &lt;span style="color:#a6e22e">protobufStatReporter&lt;/span>))
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">Server&lt;/span>{
&lt;span style="color:#a6e22e">Addr&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;:&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">strconv&lt;/span>.&lt;span style="color:#a6e22e">Itoa&lt;/span>(&lt;span style="color:#a6e22e">networking&lt;/span>.&lt;span style="color:#a6e22e">AutoscalingQueueMetricsPort&lt;/span>),
&lt;span style="color:#a6e22e">Handler&lt;/span>: &lt;span style="color:#a6e22e">metricsMux&lt;/span>,
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>reporter创建，首先检查指标上报labelnamespace、configuration、revision、pod是否配置，然后都是prometheus一些模式化的代码，将各个指标数据设置为自己的成员变量。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#75715e">// NewPrometheusStatsReporter creates a reporter that collects and reports queue metrics.
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">NewPrometheusStatsReporter&lt;/span>(&lt;span style="color:#a6e22e">namespace&lt;/span>, &lt;span style="color:#a6e22e">config&lt;/span>, &lt;span style="color:#a6e22e">revision&lt;/span>, &lt;span style="color:#a6e22e">pod&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">reportingPeriod&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Duration&lt;/span>) (&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">PrometheusStatsReporter&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>) {
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">namespace&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#a6e22e">errors&lt;/span>.&lt;span style="color:#a6e22e">New&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;namespace must not be empty&amp;#34;&lt;/span>)
}
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">config&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#a6e22e">errors&lt;/span>.&lt;span style="color:#a6e22e">New&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;config must not be empty&amp;#34;&lt;/span>)
}
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">revision&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#a6e22e">errors&lt;/span>.&lt;span style="color:#a6e22e">New&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;revision must not be empty&amp;#34;&lt;/span>)
}
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">pod&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#a6e22e">errors&lt;/span>.&lt;span style="color:#a6e22e">New&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;pod must not be empty&amp;#34;&lt;/span>)
}
&lt;span style="color:#a6e22e">registry&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">prometheus&lt;/span>.&lt;span style="color:#a6e22e">NewRegistry&lt;/span>()
&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">gv&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> []&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">prometheus&lt;/span>.&lt;span style="color:#a6e22e">GaugeVec&lt;/span>{
&lt;span style="color:#a6e22e">requestsPerSecondGV&lt;/span>, &lt;span style="color:#a6e22e">proxiedRequestsPerSecondGV&lt;/span>,
&lt;span style="color:#a6e22e">averageConcurrentRequestsGV&lt;/span>, &lt;span style="color:#a6e22e">averageProxiedConcurrentRequestsGV&lt;/span>,
&lt;span style="color:#a6e22e">processUptimeGV&lt;/span>} {
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">registry&lt;/span>.&lt;span style="color:#a6e22e">Register&lt;/span>(&lt;span style="color:#a6e22e">gv&lt;/span>); &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Errorf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;register metric failed: %w&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>)
}
}
&lt;span style="color:#a6e22e">labels&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">prometheus&lt;/span>.&lt;span style="color:#a6e22e">Labels&lt;/span>{
&lt;span style="color:#a6e22e">destinationNsLabel&lt;/span>: &lt;span style="color:#a6e22e">namespace&lt;/span>,
&lt;span style="color:#a6e22e">destinationConfigLabel&lt;/span>: &lt;span style="color:#a6e22e">config&lt;/span>,
&lt;span style="color:#a6e22e">destinationRevLabel&lt;/span>: &lt;span style="color:#a6e22e">revision&lt;/span>,
&lt;span style="color:#a6e22e">destinationPodLabel&lt;/span>: &lt;span style="color:#a6e22e">pod&lt;/span>,
}
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">PrometheusStatsReporter&lt;/span>{
&lt;span style="color:#a6e22e">handler&lt;/span>: &lt;span style="color:#a6e22e">promhttp&lt;/span>.&lt;span style="color:#a6e22e">HandlerFor&lt;/span>(&lt;span style="color:#a6e22e">registry&lt;/span>, &lt;span style="color:#a6e22e">promhttp&lt;/span>.&lt;span style="color:#a6e22e">HandlerOpts&lt;/span>{}),
&lt;span style="color:#a6e22e">startTime&lt;/span>: &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Now&lt;/span>(),
&lt;span style="color:#a6e22e">reportingPeriodSeconds&lt;/span>: &lt;span style="color:#a6e22e">reportingPeriod&lt;/span>.&lt;span style="color:#a6e22e">Seconds&lt;/span>(),
&lt;span style="color:#a6e22e">requestsPerSecond&lt;/span>: &lt;span style="color:#a6e22e">requestsPerSecondGV&lt;/span>.&lt;span style="color:#a6e22e">With&lt;/span>(&lt;span style="color:#a6e22e">labels&lt;/span>),
&lt;span style="color:#a6e22e">proxiedRequestsPerSecond&lt;/span>: &lt;span style="color:#a6e22e">proxiedRequestsPerSecondGV&lt;/span>.&lt;span style="color:#a6e22e">With&lt;/span>(&lt;span style="color:#a6e22e">labels&lt;/span>),
&lt;span style="color:#a6e22e">averageConcurrentRequests&lt;/span>: &lt;span style="color:#a6e22e">averageConcurrentRequestsGV&lt;/span>.&lt;span style="color:#a6e22e">With&lt;/span>(&lt;span style="color:#a6e22e">labels&lt;/span>),
&lt;span style="color:#a6e22e">averageProxiedConcurrentRequests&lt;/span>: &lt;span style="color:#a6e22e">averageProxiedConcurrentRequestsGV&lt;/span>.&lt;span style="color:#a6e22e">With&lt;/span>(&lt;span style="color:#a6e22e">labels&lt;/span>),
&lt;span style="color:#a6e22e">processUptime&lt;/span>: &lt;span style="color:#a6e22e">processUptimeGV&lt;/span>.&lt;span style="color:#a6e22e">With&lt;/span>(&lt;span style="color:#a6e22e">labels&lt;/span>),
}, &lt;span style="color:#66d9ef">nil&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>请求数量的记录借助了一个中间的结构体&lt;code>RequestStats&lt;/code>，在构建代理pod请求的server的时候会传入此结构体的一个实例，在请求到达时进行计数。然后会周期取出各项指标，设置到&lt;code>PrometheusStatsReporter&lt;/code>中供拉取指标时使用。&lt;/p>
&lt;h4 id="指标记录">指标记录&lt;/h4>
&lt;p>将proxyHandler路由中间件逻辑简化后如下所示，就是在流量到达和转发完成后分别触发stats HandleEvent来进行记录。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#75715e">// ProxyHandler sends requests to the `next` handler at a rate controlled by
&lt;/span>&lt;span style="color:#75715e">// the passed `breaker`, while recording stats to `stats`.
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">ProxyHandler&lt;/span>(&lt;span style="color:#a6e22e">breaker&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Breaker&lt;/span>, &lt;span style="color:#a6e22e">stats&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">network&lt;/span>.&lt;span style="color:#a6e22e">RequestStats&lt;/span>, &lt;span style="color:#a6e22e">tracingEnabled&lt;/span> &lt;span style="color:#66d9ef">bool&lt;/span>, &lt;span style="color:#a6e22e">next&lt;/span> &lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">Handler&lt;/span>) &lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">HandlerFunc&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">w&lt;/span> &lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">ResponseWriter&lt;/span>, &lt;span style="color:#a6e22e">r&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">Request&lt;/span>) {
&lt;span style="color:#a6e22e">stats&lt;/span>.&lt;span style="color:#a6e22e">HandleEvent&lt;/span>(&lt;span style="color:#a6e22e">network&lt;/span>.&lt;span style="color:#a6e22e">ReqEvent&lt;/span>{&lt;span style="color:#a6e22e">Time&lt;/span>: &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Now&lt;/span>(), &lt;span style="color:#a6e22e">Type&lt;/span>: &lt;span style="color:#a6e22e">in&lt;/span>})
&lt;span style="color:#66d9ef">defer&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>() {
&lt;span style="color:#a6e22e">stats&lt;/span>.&lt;span style="color:#a6e22e">HandleEvent&lt;/span>(&lt;span style="color:#a6e22e">network&lt;/span>.&lt;span style="color:#a6e22e">ReqEvent&lt;/span>{&lt;span style="color:#a6e22e">Time&lt;/span>: &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Now&lt;/span>(), &lt;span style="color:#a6e22e">Type&lt;/span>: &lt;span style="color:#a6e22e">out&lt;/span>})
}()
&lt;span style="color:#75715e">// ......
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">next&lt;/span>.&lt;span style="color:#a6e22e">ServeHTTP&lt;/span>(&lt;span style="color:#a6e22e">w&lt;/span>, &lt;span style="color:#a6e22e">r&lt;/span>)
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>HandleEvent就是针对不同情况下的出入流量行为进行对应的计数。如果入请求就将并发数和请求数增加。如果是请求结束就将并发数减一。如果是activator代理过来的入请求就在以上基础上对将代理并发数和请求数加一，如果是代理请求结束就在以上基础上将代理并发减一。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#75715e">// HandleEvent handles an incoming or outgoing request event and updates
&lt;/span>&lt;span style="color:#75715e">// the state accordingly.
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">s&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">RequestStats&lt;/span>) &lt;span style="color:#a6e22e">HandleEvent&lt;/span>(&lt;span style="color:#a6e22e">event&lt;/span> &lt;span style="color:#a6e22e">ReqEvent&lt;/span>) {
&lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">mux&lt;/span>.&lt;span style="color:#a6e22e">Lock&lt;/span>()
&lt;span style="color:#66d9ef">defer&lt;/span> &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">mux&lt;/span>.&lt;span style="color:#a6e22e">Unlock&lt;/span>()
&lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">compute&lt;/span>(&lt;span style="color:#a6e22e">event&lt;/span>.&lt;span style="color:#a6e22e">Time&lt;/span>)
&lt;span style="color:#66d9ef">switch&lt;/span> &lt;span style="color:#a6e22e">event&lt;/span>.&lt;span style="color:#a6e22e">Type&lt;/span> {
&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#a6e22e">ProxiedIn&lt;/span>:
&lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">proxiedConcurrency&lt;/span>&lt;span style="color:#f92672">++&lt;/span>
&lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">proxiedCount&lt;/span>&lt;span style="color:#f92672">++&lt;/span>
&lt;span style="color:#66d9ef">fallthrough&lt;/span>
&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#a6e22e">ReqIn&lt;/span>:
&lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">requestCount&lt;/span>&lt;span style="color:#f92672">++&lt;/span>
&lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">concurrency&lt;/span>&lt;span style="color:#f92672">++&lt;/span>
&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#a6e22e">ProxiedOut&lt;/span>:
&lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">proxiedConcurrency&lt;/span>&lt;span style="color:#f92672">--&lt;/span>
&lt;span style="color:#66d9ef">fallthrough&lt;/span>
&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#a6e22e">ReqOut&lt;/span>:
&lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">concurrency&lt;/span>&lt;span style="color:#f92672">--&lt;/span>
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="指标更新">指标更新&lt;/h4>
&lt;p>指标更新是在main函数中定义的，定时从stats中取出指标，将其更新到http和protobuf的metrics server中。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;span style="color:#a6e22e">protoStatReporter&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">queue&lt;/span>.&lt;span style="color:#a6e22e">NewProtobufStatsReporter&lt;/span>(&lt;span style="color:#a6e22e">env&lt;/span>.&lt;span style="color:#a6e22e">ServingPod&lt;/span>, &lt;span style="color:#a6e22e">reportingPeriod&lt;/span>)
&lt;span style="color:#a6e22e">reportTicker&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">NewTicker&lt;/span>(&lt;span style="color:#a6e22e">reportingPeriod&lt;/span>)
&lt;span style="color:#66d9ef">defer&lt;/span> &lt;span style="color:#a6e22e">reportTicker&lt;/span>.&lt;span style="color:#a6e22e">Stop&lt;/span>()
&lt;span style="color:#a6e22e">stats&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">network&lt;/span>.&lt;span style="color:#a6e22e">NewRequestStats&lt;/span>(&lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Now&lt;/span>())
&lt;span style="color:#66d9ef">go&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>() {
&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">now&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">reportTicker&lt;/span>.&lt;span style="color:#a6e22e">C&lt;/span> {
&lt;span style="color:#a6e22e">stat&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">stats&lt;/span>.&lt;span style="color:#a6e22e">Report&lt;/span>(&lt;span style="color:#a6e22e">now&lt;/span>)
&lt;span style="color:#a6e22e">promStatReporter&lt;/span>.&lt;span style="color:#a6e22e">Report&lt;/span>(&lt;span style="color:#a6e22e">stat&lt;/span>)
&lt;span style="color:#a6e22e">protoStatReporter&lt;/span>.&lt;span style="color:#a6e22e">Report&lt;/span>(&lt;span style="color:#a6e22e">stat&lt;/span>)
}
}()
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>对于http metrics server指标更新非常简单，由于这些指标项已经按prometheus要求初始化，只要对这些值进行设置就可以。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#75715e">// Report captures request metrics.
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">r&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">PrometheusStatsReporter&lt;/span>) &lt;span style="color:#a6e22e">Report&lt;/span>(&lt;span style="color:#a6e22e">stats&lt;/span> &lt;span style="color:#a6e22e">network&lt;/span>.&lt;span style="color:#a6e22e">RequestStatsReport&lt;/span>) {
&lt;span style="color:#75715e">// Requests per second is a rate over time while concurrency is not.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">r&lt;/span>.&lt;span style="color:#a6e22e">requestsPerSecond&lt;/span>.&lt;span style="color:#a6e22e">Set&lt;/span>(&lt;span style="color:#a6e22e">stats&lt;/span>.&lt;span style="color:#a6e22e">RequestCount&lt;/span> &lt;span style="color:#f92672">/&lt;/span> &lt;span style="color:#a6e22e">r&lt;/span>.&lt;span style="color:#a6e22e">reportingPeriodSeconds&lt;/span>)
&lt;span style="color:#a6e22e">r&lt;/span>.&lt;span style="color:#a6e22e">proxiedRequestsPerSecond&lt;/span>.&lt;span style="color:#a6e22e">Set&lt;/span>(&lt;span style="color:#a6e22e">stats&lt;/span>.&lt;span style="color:#a6e22e">ProxiedRequestCount&lt;/span> &lt;span style="color:#f92672">/&lt;/span> &lt;span style="color:#a6e22e">r&lt;/span>.&lt;span style="color:#a6e22e">reportingPeriodSeconds&lt;/span>)
&lt;span style="color:#a6e22e">r&lt;/span>.&lt;span style="color:#a6e22e">averageConcurrentRequests&lt;/span>.&lt;span style="color:#a6e22e">Set&lt;/span>(&lt;span style="color:#a6e22e">stats&lt;/span>.&lt;span style="color:#a6e22e">AverageConcurrency&lt;/span>)
&lt;span style="color:#a6e22e">r&lt;/span>.&lt;span style="color:#a6e22e">averageProxiedConcurrentRequests&lt;/span>.&lt;span style="color:#a6e22e">Set&lt;/span>(&lt;span style="color:#a6e22e">stats&lt;/span>.&lt;span style="color:#a6e22e">AverageProxiedConcurrency&lt;/span>)
&lt;span style="color:#a6e22e">r&lt;/span>.&lt;span style="color:#a6e22e">processUptime&lt;/span>.&lt;span style="color:#a6e22e">Set&lt;/span>(&lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Since&lt;/span>(&lt;span style="color:#a6e22e">r&lt;/span>.&lt;span style="color:#a6e22e">startTime&lt;/span>).&lt;span style="color:#a6e22e">Seconds&lt;/span>())
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果你对这部分代码想要详细了解，但是对Prometheus收集指标不太了解的话，你可以在它的&lt;a href="github.com/prometheus/client_golang">client项目&lt;/a>获得更多了解。&lt;/p></description></item><item><title>Serverless: Knative Scalefrom0</title><link>https://taction.top/serverless/platform/knative-scalefrom0/</link><pubDate>Wed, 01 Dec 2021 15:44:10 +0800</pubDate><guid>https://taction.top/serverless/platform/knative-scalefrom0/</guid><description>
&lt;p>本文主要从源码分析角度来看从0开始扩容和缩容到0的过程。主要核心点在于从0开始扩容，主要涉及activator和autoscaler组件。在了解了从0开始扩容之后，自然就会明白缩容到0的时候发生了什么。&lt;/p>
&lt;h3 id="概览">概览&lt;/h3>
&lt;p>当 Pod 缩容到零的时候流量会指到 Activator 上面，Activator 接收到流量以后会主动“通知”Autoscaler 做一个扩容的操作。扩容完成以后 Activator 需要等待第一个 Pod ready 之后才能把流量转发过来。这里在queue上定义了&lt;code>readinessProbe&lt;/code>，通过&lt;code>SERVING_READINESS_PROBE&lt;/code>环境变量可以设置queue以指定的方式（exec、tcp、http）探活服务容器是否准备好接收流量。&lt;/p>
&lt;p>activator监听endpoints（还记得private的service是设置了label selector的吗，k8s会自动创建对应的endpoint）等待服务pod启动完成后，将流量转发给对应的pod。&lt;/p>
&lt;p>&lt;img src="https://image-1255620078.cos.ap-nanjing.myqcloud.com/image-20211201172212727.png" alt="image-20211201172212727">&lt;/p>
&lt;h3 id="从0扩容activator源码分析">从0扩容Activator源码分析&lt;/h3>
&lt;p>本部分主要为了梳理当服务为0副本，请求到达activator的代码运行过程，探究其hold住流量，等待pod启动后转发的机制。所以对于其他未涉及在此流程中的代码暂不进行分析。&lt;/p>
&lt;p>这个流程中的一些关键节点大概可以整理成下图：&lt;/p>
&lt;p>&lt;img src="https://image-1255620078.cos.ap-nanjing.myqcloud.com/image-20211202132258697.png" alt="image-20211202132258697">&lt;/p>
&lt;h4 id="指标上报到autoscaler">指标上报到autoscaler&lt;/h4>
&lt;h5 id="目标服务解析">目标服务解析&lt;/h5>
&lt;p>activator从请求 header &lt;code>Knative-Serving-Namespace&lt;/code>、&lt;code>Knative-Serving-Revision&lt;/code>分别解析出来服务所在的namespace和revision，这两个header值是在定义kingress的时候设置的&lt;code>appendHeaders&lt;/code>选项定义的，由网关自动附加。&lt;/p>
&lt;p>如果这两个header值任意一个为空，那么就获取访问host，按照${name}.${namespace}.svc.${clusterdomain}的形式尝试解析host获取上述两个值。&lt;/p>
&lt;p>然后尝试获取revision的详细定义，并将信息附着到context中。&lt;/p>
&lt;p>后续是一系列中间件的处理，其中pkg/activator/handler/tracing_handler.go是trace的处理。&lt;/p>
&lt;h5 id="流量指标统计与上报">流量指标统计与上报&lt;/h5>
&lt;p>在&lt;code>pkg/activator/handler/concurrency_reporter.go&lt;/code>文件中定义了Handler路由中间件方法，此方法主要是为了统计流量和并发数量，同时也在对应服务没有副本的时候触发向autoscaler上报的行为。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#75715e">// Handler returns a handler that records requests coming in/being finished in the stats
&lt;/span>&lt;span style="color:#75715e">// machinery.
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">cr&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">ConcurrencyReporter&lt;/span>) &lt;span style="color:#a6e22e">Handler&lt;/span>(&lt;span style="color:#a6e22e">next&lt;/span> &lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">Handler&lt;/span>) &lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">HandlerFunc&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">w&lt;/span> &lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">ResponseWriter&lt;/span>, &lt;span style="color:#a6e22e">r&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">Request&lt;/span>) {
&lt;span style="color:#a6e22e">revisionKey&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">RevIDFrom&lt;/span>(&lt;span style="color:#a6e22e">r&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>())
&lt;span style="color:#a6e22e">stat&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">cr&lt;/span>.&lt;span style="color:#a6e22e">handleRequestIn&lt;/span>(&lt;span style="color:#a6e22e">network&lt;/span>.&lt;span style="color:#a6e22e">ReqEvent&lt;/span>{&lt;span style="color:#a6e22e">Key&lt;/span>: &lt;span style="color:#a6e22e">revisionKey&lt;/span>, &lt;span style="color:#a6e22e">Type&lt;/span>: &lt;span style="color:#a6e22e">network&lt;/span>.&lt;span style="color:#a6e22e">ReqIn&lt;/span>, &lt;span style="color:#a6e22e">Time&lt;/span>: &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Now&lt;/span>()})
&lt;span style="color:#66d9ef">defer&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>() {
&lt;span style="color:#75715e">// 主要是将并发数量-1
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">cr&lt;/span>.&lt;span style="color:#a6e22e">handleRequestOut&lt;/span>(&lt;span style="color:#a6e22e">stat&lt;/span>, &lt;span style="color:#a6e22e">network&lt;/span>.&lt;span style="color:#a6e22e">ReqEvent&lt;/span>{&lt;span style="color:#a6e22e">Key&lt;/span>: &lt;span style="color:#a6e22e">revisionKey&lt;/span>, &lt;span style="color:#a6e22e">Type&lt;/span>: &lt;span style="color:#a6e22e">network&lt;/span>.&lt;span style="color:#a6e22e">ReqOut&lt;/span>, &lt;span style="color:#a6e22e">Time&lt;/span>: &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Now&lt;/span>()})
}()
&lt;span style="color:#a6e22e">next&lt;/span>.&lt;span style="color:#a6e22e">ServeHTTP&lt;/span>(&lt;span style="color:#a6e22e">w&lt;/span>, &lt;span style="color:#a6e22e">r&lt;/span>)
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>handleRequestIn&lt;/code>定义在&lt;code>pkg/activator/handler/context_handler.go&lt;/code>文件中这个函数中其主要行为就是调用&lt;code>getOrCreateStat&lt;/code>函数，如果这个服务没有pod，那么msg就不为nil，而将msg发送到&lt;code>cr.statCh&lt;/code>后，最终会通过websocket发送给autoscaler，autoscaler会根据其中的revision信息（namespace + name）来最终触发扩容操作。&lt;/p>
&lt;p>接下来是&lt;code>pkg/activator/handler/concurrency_reporter.go&lt;/code>的处理，如果是某个服务第一次被请求，那么会将这个信息发到&lt;code>statCh&lt;/code>，它的处理在&lt;code>pkg/activator/stat_reporter.go&lt;/code>中就是将指标数据结构转换一下，通过vendor中&lt;code>knative.dev/pkg/websocket/connection.go&lt;/code>封装的websocket发送到autoscaler中。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#75715e">// handleRequestIn handles an event of a request coming into the system. Returns the stats
&lt;/span>&lt;span style="color:#75715e">// the outgoing event should be recorded to.
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">cr&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">ConcurrencyReporter&lt;/span>) &lt;span style="color:#a6e22e">handleRequestIn&lt;/span>(&lt;span style="color:#a6e22e">event&lt;/span> &lt;span style="color:#a6e22e">network&lt;/span>.&lt;span style="color:#a6e22e">ReqEvent&lt;/span>) &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">revisionStats&lt;/span> {
&lt;span style="color:#75715e">// 只有是第一次请求的时候才会有msg这个信息。后续会发往activator触发扩容。
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">stat&lt;/span>, &lt;span style="color:#a6e22e">msg&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">cr&lt;/span>.&lt;span style="color:#a6e22e">getOrCreateStat&lt;/span>(&lt;span style="color:#a6e22e">event&lt;/span>)
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">msg&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;span style="color:#a6e22e">cr&lt;/span>.&lt;span style="color:#a6e22e">statCh&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span> []&lt;span style="color:#a6e22e">asmetrics&lt;/span>.&lt;span style="color:#a6e22e">StatMessage&lt;/span>{&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">msg&lt;/span>}
}
&lt;span style="color:#75715e">// 记录并发数量+1，记录请求数量+1.请求结束时也会调用下面逻辑，并发数量会在请求结束时被减掉。
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">stat&lt;/span>.&lt;span style="color:#a6e22e">stats&lt;/span>.&lt;span style="color:#a6e22e">HandleEvent&lt;/span>(&lt;span style="color:#a6e22e">event&lt;/span>)
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">stat&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果当前map中无revision对应的state，就返回一个StatMessage来将状态上报给autoscaler从而触发从0扩容，这一部分在后面会详细介绍，接下来让我们先继续往下看。如果有对应的state就将refs++。注意这里的一个常见的并发场景使用锁的方式，在第一次取的时候用的读锁，且手动释放。第二次使用写锁，且第一步同样是检查是否存在。&lt;/p>
&lt;p>state对应的指标也会通过prometheus指标方式暴露出去，供autoscaler获取。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#75715e">// getOrCreateStat gets a stat from the state if present.
&lt;/span>&lt;span style="color:#75715e">// If absent it creates a new one and returns it, potentially returning a StatMessage too
&lt;/span>&lt;span style="color:#75715e">// to trigger an immediate scale-from-0.
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">cr&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">ConcurrencyReporter&lt;/span>) &lt;span style="color:#a6e22e">getOrCreateStat&lt;/span>(&lt;span style="color:#a6e22e">event&lt;/span> &lt;span style="color:#a6e22e">network&lt;/span>.&lt;span style="color:#a6e22e">ReqEvent&lt;/span>) (&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">revisionStats&lt;/span>, &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">asmetrics&lt;/span>.&lt;span style="color:#a6e22e">StatMessage&lt;/span>) {
&lt;span style="color:#a6e22e">cr&lt;/span>.&lt;span style="color:#a6e22e">mux&lt;/span>.&lt;span style="color:#a6e22e">RLock&lt;/span>()
&lt;span style="color:#a6e22e">stat&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">cr&lt;/span>.&lt;span style="color:#a6e22e">stats&lt;/span>[&lt;span style="color:#a6e22e">event&lt;/span>.&lt;span style="color:#a6e22e">Key&lt;/span>]
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">stat&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;span style="color:#75715e">// Since this is incremented under the lock, it&amp;#39;s guaranteed to be observed by
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// the deletion routine.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">stat&lt;/span>.&lt;span style="color:#a6e22e">refs&lt;/span>.&lt;span style="color:#a6e22e">Inc&lt;/span>()
&lt;span style="color:#a6e22e">cr&lt;/span>.&lt;span style="color:#a6e22e">mux&lt;/span>.&lt;span style="color:#a6e22e">RUnlock&lt;/span>()
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">stat&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>
}
&lt;span style="color:#a6e22e">cr&lt;/span>.&lt;span style="color:#a6e22e">mux&lt;/span>.&lt;span style="color:#a6e22e">RUnlock&lt;/span>()
&lt;span style="color:#75715e">// Doubly checked locking.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">cr&lt;/span>.&lt;span style="color:#a6e22e">mux&lt;/span>.&lt;span style="color:#a6e22e">Lock&lt;/span>()
&lt;span style="color:#66d9ef">defer&lt;/span> &lt;span style="color:#a6e22e">cr&lt;/span>.&lt;span style="color:#a6e22e">mux&lt;/span>.&lt;span style="color:#a6e22e">Unlock&lt;/span>()
&lt;span style="color:#a6e22e">stat&lt;/span> = &lt;span style="color:#a6e22e">cr&lt;/span>.&lt;span style="color:#a6e22e">stats&lt;/span>[&lt;span style="color:#a6e22e">event&lt;/span>.&lt;span style="color:#a6e22e">Key&lt;/span>]
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">stat&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;span style="color:#75715e">// Since this is incremented under the lock, it&amp;#39;s guaranteed to be observed by
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// the deletion routine.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">stat&lt;/span>.&lt;span style="color:#a6e22e">refs&lt;/span>.&lt;span style="color:#a6e22e">Inc&lt;/span>()
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">stat&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>
}
&lt;span style="color:#a6e22e">stat&lt;/span> = &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">revisionStats&lt;/span>{
&lt;span style="color:#a6e22e">stats&lt;/span>: &lt;span style="color:#a6e22e">network&lt;/span>.&lt;span style="color:#a6e22e">NewRequestStats&lt;/span>(&lt;span style="color:#a6e22e">event&lt;/span>.&lt;span style="color:#a6e22e">Time&lt;/span>),
&lt;span style="color:#a6e22e">firstRequest&lt;/span>: &lt;span style="color:#ae81ff">1&lt;/span>,
}
&lt;span style="color:#a6e22e">stat&lt;/span>.&lt;span style="color:#a6e22e">refs&lt;/span>.&lt;span style="color:#a6e22e">Inc&lt;/span>()
&lt;span style="color:#a6e22e">cr&lt;/span>.&lt;span style="color:#a6e22e">stats&lt;/span>[&lt;span style="color:#a6e22e">event&lt;/span>.&lt;span style="color:#a6e22e">Key&lt;/span>] = &lt;span style="color:#a6e22e">stat&lt;/span>
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">stat&lt;/span>, &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">asmetrics&lt;/span>.&lt;span style="color:#a6e22e">StatMessage&lt;/span>{
&lt;span style="color:#75715e">// 这里是被请求服务的Namespace和版本Name
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">Key&lt;/span>: &lt;span style="color:#a6e22e">event&lt;/span>.&lt;span style="color:#a6e22e">Key&lt;/span>,
&lt;span style="color:#a6e22e">Stat&lt;/span>: &lt;span style="color:#a6e22e">asmetrics&lt;/span>.&lt;span style="color:#a6e22e">Stat&lt;/span>{
&lt;span style="color:#75715e">// 这个是activator自己的实际pod名称。
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">PodName&lt;/span>: &lt;span style="color:#a6e22e">cr&lt;/span>.&lt;span style="color:#a6e22e">podName&lt;/span>,
&lt;span style="color:#a6e22e">AverageConcurrentRequests&lt;/span>: &lt;span style="color:#ae81ff">1&lt;/span>,
&lt;span style="color:#75715e">// The way the checks are written, this cannot ever be
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// anything else but 1. The stats map key is only deleted
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// after a reporting period, so we see this code path at most
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// once per period.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">RequestCount&lt;/span>: &lt;span style="color:#ae81ff">1&lt;/span>,
},
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="阻塞等待扩容完成">阻塞等待扩容完成&lt;/h4>
&lt;h5 id="实际流量的处理">实际流量的处理&lt;/h5>
&lt;p>经过各个中间件流程后，最后走到&lt;code>pkg/activator/handler/handler.go&lt;/code>中等待pod启动并转发。主要的等待pod启动的逻辑是在&lt;code>a.throttler.Try&lt;/code>中进行处理的。等待pod启动后会调用传入的func&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">a&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">activationHandler&lt;/span>) &lt;span style="color:#a6e22e">ServeHTTP&lt;/span>(&lt;span style="color:#a6e22e">w&lt;/span> &lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">ResponseWriter&lt;/span>, &lt;span style="color:#a6e22e">r&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">Request&lt;/span>) {
&lt;span style="color:#a6e22e">config&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">activatorconfig&lt;/span>.&lt;span style="color:#a6e22e">FromContext&lt;/span>(&lt;span style="color:#a6e22e">r&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>())
&lt;span style="color:#a6e22e">tracingEnabled&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">config&lt;/span>.&lt;span style="color:#a6e22e">Tracing&lt;/span>.&lt;span style="color:#a6e22e">Backend&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#a6e22e">tracingconfig&lt;/span>.&lt;span style="color:#a6e22e">None&lt;/span>
&lt;span style="color:#a6e22e">tryContext&lt;/span>, &lt;span style="color:#a6e22e">trySpan&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">r&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>(), (&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">trace&lt;/span>.&lt;span style="color:#a6e22e">Span&lt;/span>)(&lt;span style="color:#66d9ef">nil&lt;/span>)
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">tracingEnabled&lt;/span> {
&lt;span style="color:#a6e22e">tryContext&lt;/span>, &lt;span style="color:#a6e22e">trySpan&lt;/span> = &lt;span style="color:#a6e22e">trace&lt;/span>.&lt;span style="color:#a6e22e">StartSpan&lt;/span>(&lt;span style="color:#a6e22e">r&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>(), &lt;span style="color:#e6db74">&amp;#34;throttler_try&amp;#34;&lt;/span>)
}
&lt;span style="color:#a6e22e">revID&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">RevIDFrom&lt;/span>(&lt;span style="color:#a6e22e">r&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>())
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">a&lt;/span>.&lt;span style="color:#a6e22e">throttler&lt;/span>.&lt;span style="color:#a6e22e">Try&lt;/span>(&lt;span style="color:#a6e22e">tryContext&lt;/span>, &lt;span style="color:#a6e22e">revID&lt;/span>, &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">dest&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) &lt;span style="color:#66d9ef">error&lt;/span> {
&lt;span style="color:#75715e">// 当pod被启动后，即会执行此函数的内部逻辑，对请求进行转发
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">trySpan&lt;/span>.&lt;span style="color:#a6e22e">End&lt;/span>()
&lt;span style="color:#a6e22e">proxyCtx&lt;/span>, &lt;span style="color:#a6e22e">proxySpan&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">r&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>(), (&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">trace&lt;/span>.&lt;span style="color:#a6e22e">Span&lt;/span>)(&lt;span style="color:#66d9ef">nil&lt;/span>)
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">tracingEnabled&lt;/span> {
&lt;span style="color:#a6e22e">proxyCtx&lt;/span>, &lt;span style="color:#a6e22e">proxySpan&lt;/span> = &lt;span style="color:#a6e22e">trace&lt;/span>.&lt;span style="color:#a6e22e">StartSpan&lt;/span>(&lt;span style="color:#a6e22e">r&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>(), &lt;span style="color:#e6db74">&amp;#34;activator_proxy&amp;#34;&lt;/span>)
}
&lt;span style="color:#a6e22e">a&lt;/span>.&lt;span style="color:#a6e22e">proxyRequest&lt;/span>(&lt;span style="color:#a6e22e">revID&lt;/span>, &lt;span style="color:#a6e22e">w&lt;/span>, &lt;span style="color:#a6e22e">r&lt;/span>.&lt;span style="color:#a6e22e">WithContext&lt;/span>(&lt;span style="color:#a6e22e">proxyCtx&lt;/span>), &lt;span style="color:#a6e22e">dest&lt;/span>, &lt;span style="color:#a6e22e">tracingEnabled&lt;/span>, &lt;span style="color:#a6e22e">a&lt;/span>.&lt;span style="color:#a6e22e">usePassthroughLb&lt;/span>)
&lt;span style="color:#a6e22e">proxySpan&lt;/span>.&lt;span style="color:#a6e22e">End&lt;/span>()
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>
}); &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;span style="color:#75715e">// Set error on our capacity waiting span and end it.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">trySpan&lt;/span>.&lt;span style="color:#a6e22e">Annotate&lt;/span>([]&lt;span style="color:#a6e22e">trace&lt;/span>.&lt;span style="color:#a6e22e">Attribute&lt;/span>{&lt;span style="color:#a6e22e">trace&lt;/span>.&lt;span style="color:#a6e22e">StringAttribute&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;activator.throttler.error&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>.&lt;span style="color:#a6e22e">Error&lt;/span>())}, &lt;span style="color:#e6db74">&amp;#34;ThrottlerTry&amp;#34;&lt;/span>)
&lt;span style="color:#a6e22e">trySpan&lt;/span>.&lt;span style="color:#a6e22e">End&lt;/span>()
&lt;span style="color:#a6e22e">a&lt;/span>.&lt;span style="color:#a6e22e">logger&lt;/span>.&lt;span style="color:#a6e22e">Errorw&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Throttler try error&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">zap&lt;/span>.&lt;span style="color:#a6e22e">String&lt;/span>(&lt;span style="color:#a6e22e">logkey&lt;/span>.&lt;span style="color:#a6e22e">Key&lt;/span>, &lt;span style="color:#a6e22e">revID&lt;/span>.&lt;span style="color:#a6e22e">String&lt;/span>()), &lt;span style="color:#a6e22e">zap&lt;/span>.&lt;span style="color:#a6e22e">Error&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span>))
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">errors&lt;/span>.&lt;span style="color:#a6e22e">Is&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span>, &lt;span style="color:#a6e22e">context&lt;/span>.&lt;span style="color:#a6e22e">DeadlineExceeded&lt;/span>) &lt;span style="color:#f92672">||&lt;/span> &lt;span style="color:#a6e22e">errors&lt;/span>.&lt;span style="color:#a6e22e">Is&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span>, &lt;span style="color:#a6e22e">queue&lt;/span>.&lt;span style="color:#a6e22e">ErrRequestQueueFull&lt;/span>) {
&lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">Error&lt;/span>(&lt;span style="color:#a6e22e">w&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>.&lt;span style="color:#a6e22e">Error&lt;/span>(), &lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">StatusServiceUnavailable&lt;/span>)
} &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;span style="color:#a6e22e">w&lt;/span>.&lt;span style="color:#a6e22e">WriteHeader&lt;/span>(&lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">StatusInternalServerError&lt;/span>)
}
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>try函数循环处理一直会等待到pod启动后执行func逻辑。&lt;code>rt.breaker.Maybe&lt;/code>是等待pod启动的关键。pod启动后会尝试获取目标地址，并且循环尝试，获取到地址之后，调用传入func，在上面函数中完成对请求的转发。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">rt&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">revisionThrottler&lt;/span>) &lt;span style="color:#a6e22e">try&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span> &lt;span style="color:#a6e22e">context&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>, &lt;span style="color:#a6e22e">function&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#66d9ef">string&lt;/span>) &lt;span style="color:#66d9ef">error&lt;/span>) &lt;span style="color:#66d9ef">error&lt;/span> {
&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">ret&lt;/span> &lt;span style="color:#66d9ef">error&lt;/span>
&lt;span style="color:#75715e">// Retrying infinitely as long as we receive no dest. Outer semaphore and inner
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// pod capacity are not changed atomically, hence they can race each other. We
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// &amp;#34;reenqueue&amp;#34; requests should that happen.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">reenqueue&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>
&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">reenqueue&lt;/span> {
&lt;span style="color:#a6e22e">reenqueue&lt;/span> = &lt;span style="color:#66d9ef">false&lt;/span>
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">rt&lt;/span>.&lt;span style="color:#a6e22e">breaker&lt;/span>.&lt;span style="color:#a6e22e">Maybe&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>, &lt;span style="color:#66d9ef">func&lt;/span>() {
&lt;span style="color:#a6e22e">cb&lt;/span>, &lt;span style="color:#a6e22e">tracker&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">rt&lt;/span>.&lt;span style="color:#a6e22e">acquireDest&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>)
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">tracker&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;span style="color:#75715e">// This can happen if individual requests raced each other or if pod
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// capacity was decreased after passing the outer semaphore.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">reenqueue&lt;/span> = &lt;span style="color:#66d9ef">true&lt;/span>
&lt;span style="color:#66d9ef">return&lt;/span>
}
&lt;span style="color:#66d9ef">defer&lt;/span> &lt;span style="color:#a6e22e">cb&lt;/span>()
&lt;span style="color:#75715e">// We already reserved a guaranteed spot. So just execute the passed functor.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">ret&lt;/span> = &lt;span style="color:#a6e22e">function&lt;/span>(&lt;span style="color:#a6e22e">tracker&lt;/span>.&lt;span style="color:#a6e22e">dest&lt;/span>)
}); &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span>
}
}
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">ret&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>maybe函数主要是检查是否activator hold住的请求数量达到配置上限，如果达到了就直接丢弃。否则调用&lt;code> b.sem.acquire(ctx)&lt;/code>阻塞等待信号量。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#75715e">// Maybe conditionally executes thunk based on the Breaker concurrency
&lt;/span>&lt;span style="color:#75715e">// and queue parameters. If the concurrency limit and queue capacity are
&lt;/span>&lt;span style="color:#75715e">// already consumed, Maybe returns immediately without calling thunk. If
&lt;/span>&lt;span style="color:#75715e">// the thunk was executed, Maybe returns nil, else error.
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">b&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Breaker&lt;/span>) &lt;span style="color:#a6e22e">Maybe&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span> &lt;span style="color:#a6e22e">context&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>, &lt;span style="color:#a6e22e">thunk&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>()) &lt;span style="color:#66d9ef">error&lt;/span> {
&lt;span style="color:#66d9ef">if&lt;/span> !&lt;span style="color:#a6e22e">b&lt;/span>.&lt;span style="color:#a6e22e">tryAcquirePending&lt;/span>() {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">ErrRequestQueueFull&lt;/span>
}
&lt;span style="color:#66d9ef">defer&lt;/span> &lt;span style="color:#a6e22e">b&lt;/span>.&lt;span style="color:#a6e22e">releasePending&lt;/span>()
&lt;span style="color:#75715e">// Wait for capacity in the active queue.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">b&lt;/span>.&lt;span style="color:#a6e22e">sem&lt;/span>.&lt;span style="color:#a6e22e">acquire&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>); &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span>
}
&lt;span style="color:#75715e">// Defer releasing capacity in the active.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// It&amp;#39;s safe to ignore the error returned by release since we
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// make sure the semaphore is only manipulated here and acquire
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// + release calls are equally paired.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">defer&lt;/span> &lt;span style="color:#a6e22e">b&lt;/span>.&lt;span style="color:#a6e22e">sem&lt;/span>.&lt;span style="color:#a6e22e">release&lt;/span>()
&lt;span style="color:#75715e">// Do the thing.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">thunk&lt;/span>()
&lt;span style="color:#75715e">// Report success
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>在acquire中可以看到其在等待&lt;code>s.queue&lt;/code>这个通道。那么是谁向这个通道发送的数据呢？在什么情况下发送的数据？实际上这个通道的数据处理是另外一个协程进行的，在服务副本数为0的时候会初始化这个通道，在服务副本数大于0的时候会直接关闭这个通道。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#75715e">// acquire acquires capacity from the semaphore.
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">s&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">semaphore&lt;/span>) &lt;span style="color:#a6e22e">acquire&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span> &lt;span style="color:#a6e22e">context&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>) &lt;span style="color:#66d9ef">error&lt;/span> {
&lt;span style="color:#66d9ef">for&lt;/span> {
&lt;span style="color:#a6e22e">old&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">state&lt;/span>.&lt;span style="color:#a6e22e">Load&lt;/span>()
&lt;span style="color:#a6e22e">capacity&lt;/span>, &lt;span style="color:#a6e22e">in&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">unpack&lt;/span>(&lt;span style="color:#a6e22e">old&lt;/span>)
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">in&lt;/span> &lt;span style="color:#f92672">&amp;gt;=&lt;/span> &lt;span style="color:#a6e22e">capacity&lt;/span> {
&lt;span style="color:#66d9ef">select&lt;/span> {
&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span>&lt;span style="color:#a6e22e">ctx&lt;/span>.&lt;span style="color:#a6e22e">Done&lt;/span>():
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">ctx&lt;/span>.&lt;span style="color:#a6e22e">Err&lt;/span>()
&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span>&lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">queue&lt;/span>:
}
&lt;span style="color:#75715e">// Force reload state.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">continue&lt;/span>
}
&lt;span style="color:#a6e22e">in&lt;/span>&lt;span style="color:#f92672">++&lt;/span>
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">state&lt;/span>.&lt;span style="color:#a6e22e">CAS&lt;/span>(&lt;span style="color:#a6e22e">old&lt;/span>, &lt;span style="color:#a6e22e">pack&lt;/span>(&lt;span style="color:#a6e22e">capacity&lt;/span>, &lt;span style="color:#a6e22e">in&lt;/span>)) {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>
}
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="感知副本数量变化">感知副本数量变化&lt;/h4>
&lt;h5 id="副本数量变化处理">副本数量变化处理&lt;/h5>
&lt;blockquote>
&lt;p>由于服务副本数量变化是通过k8s client监听的，通过通道传递。这里先解析在副本数量变动后如何处理，如何向上文中的通道发送数据。&lt;/p>
&lt;/blockquote>
&lt;p>在监听到revision对应的endpoint资源信息有变动的时候，会将信息进行一定处理以后发送到updateCh。在启动activator的时候会调用此&lt;code>Throttler&lt;/code>的run方法来处理状态变化。这里在监听的变化的时候直接交给了&lt;code>handleUpdate&lt;/code>函数来处理。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">t&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Throttler&lt;/span>) &lt;span style="color:#a6e22e">run&lt;/span>(&lt;span style="color:#a6e22e">updateCh&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span>&lt;span style="color:#66d9ef">chan&lt;/span> &lt;span style="color:#a6e22e">revisionDestsUpdate&lt;/span>) {
&lt;span style="color:#66d9ef">for&lt;/span> {
&lt;span style="color:#66d9ef">select&lt;/span> {
&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#a6e22e">update&lt;/span>, &lt;span style="color:#a6e22e">ok&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span>&lt;span style="color:#a6e22e">updateCh&lt;/span>:
&lt;span style="color:#66d9ef">if&lt;/span> !&lt;span style="color:#a6e22e">ok&lt;/span> {
&lt;span style="color:#a6e22e">t&lt;/span>.&lt;span style="color:#a6e22e">logger&lt;/span>.&lt;span style="color:#a6e22e">Info&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;The Throttler has stopped.&amp;#34;&lt;/span>)
&lt;span style="color:#66d9ef">return&lt;/span>
}
&lt;span style="color:#a6e22e">t&lt;/span>.&lt;span style="color:#a6e22e">handleUpdate&lt;/span>(&lt;span style="color:#a6e22e">update&lt;/span>)
&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#a6e22e">eps&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span>&lt;span style="color:#a6e22e">t&lt;/span>.&lt;span style="color:#a6e22e">epsUpdateCh&lt;/span>:
&lt;span style="color:#a6e22e">t&lt;/span>.&lt;span style="color:#a6e22e">handlePubEpsUpdate&lt;/span>(&lt;span style="color:#a6e22e">eps&lt;/span>)
}
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Throttler的handleUpdate主要就是创建或者获取revisioin对应的&lt;code>revisionThrottler&lt;/code>然后转到&lt;code>pkg/activator/net/throttler.go&lt;/code>中的&lt;code>revisionThrottler&lt;/code>来处理副本数和&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">rt&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">revisionThrottler&lt;/span>) &lt;span style="color:#a6e22e">handleUpdate&lt;/span>(&lt;span style="color:#a6e22e">update&lt;/span> &lt;span style="color:#a6e22e">revisionDestsUpdate&lt;/span>) {
&lt;span style="color:#a6e22e">rt&lt;/span>.&lt;span style="color:#a6e22e">logger&lt;/span>.&lt;span style="color:#a6e22e">Debugw&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Handling update&amp;#34;&lt;/span>,
&lt;span style="color:#a6e22e">zap&lt;/span>.&lt;span style="color:#a6e22e">String&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;ClusterIP&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">update&lt;/span>.&lt;span style="color:#a6e22e">ClusterIPDest&lt;/span>), &lt;span style="color:#a6e22e">zap&lt;/span>.&lt;span style="color:#a6e22e">Object&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;dests&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">logging&lt;/span>.&lt;span style="color:#a6e22e">StringSet&lt;/span>(&lt;span style="color:#a6e22e">update&lt;/span>.&lt;span style="color:#a6e22e">Dests&lt;/span>)))
&lt;span style="color:#75715e">// ClusterIP is not yet ready, so we want to send requests directly to the pods.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// NB: this will not be called in parallel, thus we can build a new podTrackers
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// array before taking out a lock.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">update&lt;/span>.&lt;span style="color:#a6e22e">ClusterIPDest&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span> {
&lt;span style="color:#75715e">// Create a map for fast lookup of existing trackers.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">trackersMap&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> make(&lt;span style="color:#66d9ef">map&lt;/span>[&lt;span style="color:#66d9ef">string&lt;/span>]&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">podTracker&lt;/span>, len(&lt;span style="color:#a6e22e">rt&lt;/span>.&lt;span style="color:#a6e22e">podTrackers&lt;/span>))
&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">tracker&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">rt&lt;/span>.&lt;span style="color:#a6e22e">podTrackers&lt;/span> {
&lt;span style="color:#a6e22e">trackersMap&lt;/span>[&lt;span style="color:#a6e22e">tracker&lt;/span>.&lt;span style="color:#a6e22e">dest&lt;/span>] = &lt;span style="color:#a6e22e">tracker&lt;/span>
}
&lt;span style="color:#a6e22e">trackers&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> make([]&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">podTracker&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>, len(&lt;span style="color:#a6e22e">update&lt;/span>.&lt;span style="color:#a6e22e">Dests&lt;/span>))
&lt;span style="color:#75715e">// Loop over dests, reuse existing tracker if we have one, otherwise create
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// a new one.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">newDest&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">update&lt;/span>.&lt;span style="color:#a6e22e">Dests&lt;/span> {
&lt;span style="color:#a6e22e">tracker&lt;/span>, &lt;span style="color:#a6e22e">ok&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">trackersMap&lt;/span>[&lt;span style="color:#a6e22e">newDest&lt;/span>]
&lt;span style="color:#66d9ef">if&lt;/span> !&lt;span style="color:#a6e22e">ok&lt;/span> {
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">rt&lt;/span>.&lt;span style="color:#a6e22e">containerConcurrency&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> {
&lt;span style="color:#a6e22e">tracker&lt;/span> = &lt;span style="color:#a6e22e">newPodTracker&lt;/span>(&lt;span style="color:#a6e22e">newDest&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>)
} &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;span style="color:#a6e22e">tracker&lt;/span> = &lt;span style="color:#a6e22e">newPodTracker&lt;/span>(&lt;span style="color:#a6e22e">newDest&lt;/span>, &lt;span style="color:#a6e22e">queue&lt;/span>.&lt;span style="color:#a6e22e">NewBreaker&lt;/span>(&lt;span style="color:#a6e22e">queue&lt;/span>.&lt;span style="color:#a6e22e">BreakerParams&lt;/span>{
&lt;span style="color:#a6e22e">QueueDepth&lt;/span>: &lt;span style="color:#a6e22e">breakerQueueDepth&lt;/span>,
&lt;span style="color:#a6e22e">MaxConcurrency&lt;/span>: &lt;span style="color:#a6e22e">rt&lt;/span>.&lt;span style="color:#a6e22e">containerConcurrency&lt;/span>,
&lt;span style="color:#a6e22e">InitialCapacity&lt;/span>: &lt;span style="color:#a6e22e">rt&lt;/span>.&lt;span style="color:#a6e22e">containerConcurrency&lt;/span>, &lt;span style="color:#75715e">// Presume full unused capacity.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> }))
}
}
&lt;span style="color:#a6e22e">trackers&lt;/span> = append(&lt;span style="color:#a6e22e">trackers&lt;/span>, &lt;span style="color:#a6e22e">tracker&lt;/span>)
}
&lt;span style="color:#a6e22e">rt&lt;/span>.&lt;span style="color:#a6e22e">updateThrottlerState&lt;/span>(len(&lt;span style="color:#a6e22e">update&lt;/span>.&lt;span style="color:#a6e22e">Dests&lt;/span>), &lt;span style="color:#a6e22e">trackers&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span> &lt;span style="color:#75715e">/*clusterIP*/&lt;/span>)
&lt;span style="color:#66d9ef">return&lt;/span>
}
&lt;span style="color:#a6e22e">rt&lt;/span>.&lt;span style="color:#a6e22e">updateThrottlerState&lt;/span>(len(&lt;span style="color:#a6e22e">update&lt;/span>.&lt;span style="color:#a6e22e">Dests&lt;/span>), &lt;span style="color:#66d9ef">nil&lt;/span> &lt;span style="color:#75715e">/*trackers*/&lt;/span>, &lt;span style="color:#a6e22e">newPodTracker&lt;/span>(&lt;span style="color:#a6e22e">update&lt;/span>.&lt;span style="color:#a6e22e">ClusterIPDest&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>))
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>updateThrottlerState函数就是计算实际pod数量，然后调用&lt;code>rt.updateCapacity&lt;/code>来更新pod数量。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">rt&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">revisionThrottler&lt;/span>) &lt;span style="color:#a6e22e">updateThrottlerState&lt;/span>(&lt;span style="color:#a6e22e">backendCount&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>, &lt;span style="color:#a6e22e">trackers&lt;/span> []&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">podTracker&lt;/span>, &lt;span style="color:#a6e22e">clusterIPDest&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">podTracker&lt;/span>) {
&lt;span style="color:#a6e22e">rt&lt;/span>.&lt;span style="color:#a6e22e">logger&lt;/span>.&lt;span style="color:#a6e22e">Infof&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Updating Revision Throttler with: clusterIP = %v, trackers = %d, backends = %d&amp;#34;&lt;/span>,
&lt;span style="color:#a6e22e">clusterIPDest&lt;/span>, len(&lt;span style="color:#a6e22e">trackers&lt;/span>), &lt;span style="color:#a6e22e">backendCount&lt;/span>)
&lt;span style="color:#75715e">// Update trackers / clusterIP before capacity. Otherwise we can race updating our breaker when
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// we increase capacity, causing a request to fall through before a tracker is added, causing an
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// incorrect LB decision.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>() &lt;span style="color:#66d9ef">bool&lt;/span> {
&lt;span style="color:#a6e22e">rt&lt;/span>.&lt;span style="color:#a6e22e">mux&lt;/span>.&lt;span style="color:#a6e22e">Lock&lt;/span>()
&lt;span style="color:#66d9ef">defer&lt;/span> &lt;span style="color:#a6e22e">rt&lt;/span>.&lt;span style="color:#a6e22e">mux&lt;/span>.&lt;span style="color:#a6e22e">Unlock&lt;/span>()
&lt;span style="color:#a6e22e">rt&lt;/span>.&lt;span style="color:#a6e22e">podTrackers&lt;/span> = &lt;span style="color:#a6e22e">trackers&lt;/span>
&lt;span style="color:#a6e22e">rt&lt;/span>.&lt;span style="color:#a6e22e">clusterIPTracker&lt;/span> = &lt;span style="color:#a6e22e">clusterIPDest&lt;/span>
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">clusterIPDest&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> &lt;span style="color:#f92672">||&lt;/span> len(&lt;span style="color:#a6e22e">trackers&lt;/span>) &amp;gt; &lt;span style="color:#ae81ff">0&lt;/span>
}() {
&lt;span style="color:#75715e">// If we have an address to target, then pass through an accurate
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// accounting of the number of backends.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">rt&lt;/span>.&lt;span style="color:#a6e22e">updateCapacity&lt;/span>(&lt;span style="color:#a6e22e">backendCount&lt;/span>)
} &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;span style="color:#75715e">// If we do not have an address to target, then we should treat it
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// as though we have zero backends.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">rt&lt;/span>.&lt;span style="color:#a6e22e">updateCapacity&lt;/span>(&lt;span style="color:#ae81ff">0&lt;/span>)
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>updateCapacity最终根据pod数量计算出可以放行的最大请求数（即pod数量 * 每个pod允许并发数 / activator数量），然后调用&lt;code>Breaker&lt;/code>的&lt;code>UpdateConcurrency&lt;/code>函数（还记得这个breaker吗，这就是上文中hold住流量等待信号量的breaker），它调用了自己的信号量的&lt;code>UpdateConcurrency&lt;/code>来最终通知到那些在阻塞等待的请求。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#75715e">// updateCapacity updates the capacity of the throttler and recomputes
&lt;/span>&lt;span style="color:#75715e">// the assigned trackers to the Activator instance.
&lt;/span>&lt;span style="color:#75715e">// Currently updateCapacity is ensured to be invoked from a single go routine
&lt;/span>&lt;span style="color:#75715e">// and this does not synchronize
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">rt&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">revisionThrottler&lt;/span>) &lt;span style="color:#a6e22e">updateCapacity&lt;/span>(&lt;span style="color:#a6e22e">backendCount&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>) {
&lt;span style="color:#75715e">// We have to make assignments on each updateCapacity, since if number
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// of activators changes, then we need to rebalance the assignedTrackers.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">ac&lt;/span>, &lt;span style="color:#a6e22e">ai&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> int(&lt;span style="color:#a6e22e">rt&lt;/span>.&lt;span style="color:#a6e22e">numActivators&lt;/span>.&lt;span style="color:#a6e22e">Load&lt;/span>()), int(&lt;span style="color:#a6e22e">rt&lt;/span>.&lt;span style="color:#a6e22e">activatorIndex&lt;/span>.&lt;span style="color:#a6e22e">Load&lt;/span>())
&lt;span style="color:#a6e22e">numTrackers&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>() &lt;span style="color:#66d9ef">int&lt;/span> {
&lt;span style="color:#75715e">// We do not have to process the `podTrackers` under lock, since
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// updateCapacity is guaranteed to be executed by a single goroutine.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// But `assignedTrackers` is being read by the serving thread, so the
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// actual assignment has to be done under lock.
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#75715e">// We&amp;#39;re using cluster IP.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">rt&lt;/span>.&lt;span style="color:#a6e22e">clusterIPTracker&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
}
&lt;span style="color:#75715e">// Sort, so we get more or less stable results.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">sort&lt;/span>.&lt;span style="color:#a6e22e">Slice&lt;/span>(&lt;span style="color:#a6e22e">rt&lt;/span>.&lt;span style="color:#a6e22e">podTrackers&lt;/span>, &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">i&lt;/span>, &lt;span style="color:#a6e22e">j&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>) &lt;span style="color:#66d9ef">bool&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">rt&lt;/span>.&lt;span style="color:#a6e22e">podTrackers&lt;/span>[&lt;span style="color:#a6e22e">i&lt;/span>].&lt;span style="color:#a6e22e">dest&lt;/span> &amp;lt; &lt;span style="color:#a6e22e">rt&lt;/span>.&lt;span style="color:#a6e22e">podTrackers&lt;/span>[&lt;span style="color:#a6e22e">j&lt;/span>].&lt;span style="color:#a6e22e">dest&lt;/span>
})
&lt;span style="color:#a6e22e">assigned&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">rt&lt;/span>.&lt;span style="color:#a6e22e">podTrackers&lt;/span>
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">rt&lt;/span>.&lt;span style="color:#a6e22e">containerConcurrency&lt;/span> &amp;gt; &lt;span style="color:#ae81ff">0&lt;/span> {
&lt;span style="color:#a6e22e">rt&lt;/span>.&lt;span style="color:#a6e22e">resetTrackers&lt;/span>()
&lt;span style="color:#a6e22e">assigned&lt;/span> = &lt;span style="color:#a6e22e">assignSlice&lt;/span>(&lt;span style="color:#a6e22e">rt&lt;/span>.&lt;span style="color:#a6e22e">podTrackers&lt;/span>, &lt;span style="color:#a6e22e">ai&lt;/span>, &lt;span style="color:#a6e22e">ac&lt;/span>, &lt;span style="color:#a6e22e">rt&lt;/span>.&lt;span style="color:#a6e22e">containerConcurrency&lt;/span>)
}
&lt;span style="color:#a6e22e">rt&lt;/span>.&lt;span style="color:#a6e22e">logger&lt;/span>.&lt;span style="color:#a6e22e">Debugf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Trackers %d/%d: assignment: %v&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">ai&lt;/span>, &lt;span style="color:#a6e22e">ac&lt;/span>, &lt;span style="color:#a6e22e">assigned&lt;/span>)
&lt;span style="color:#75715e">// The actual write out of the assigned trackers has to be under lock.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">rt&lt;/span>.&lt;span style="color:#a6e22e">mux&lt;/span>.&lt;span style="color:#a6e22e">Lock&lt;/span>()
&lt;span style="color:#66d9ef">defer&lt;/span> &lt;span style="color:#a6e22e">rt&lt;/span>.&lt;span style="color:#a6e22e">mux&lt;/span>.&lt;span style="color:#a6e22e">Unlock&lt;/span>()
&lt;span style="color:#a6e22e">rt&lt;/span>.&lt;span style="color:#a6e22e">assignedTrackers&lt;/span> = &lt;span style="color:#a6e22e">assigned&lt;/span>
&lt;span style="color:#66d9ef">return&lt;/span> len(&lt;span style="color:#a6e22e">assigned&lt;/span>)
}()
&lt;span style="color:#a6e22e">capacity&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">numTrackers&lt;/span> &amp;gt; &lt;span style="color:#ae81ff">0&lt;/span> {
&lt;span style="color:#75715e">// Capacity is computed based off of number of trackers,
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// when using pod direct routing.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">capacity&lt;/span> = &lt;span style="color:#a6e22e">rt&lt;/span>.&lt;span style="color:#a6e22e">calculateCapacity&lt;/span>(len(&lt;span style="color:#a6e22e">rt&lt;/span>.&lt;span style="color:#a6e22e">podTrackers&lt;/span>), &lt;span style="color:#a6e22e">ac&lt;/span>)
} &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;span style="color:#75715e">// Capacity is computed off of number of ready backends,
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// when we are using clusterIP routing.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">capacity&lt;/span> = &lt;span style="color:#a6e22e">rt&lt;/span>.&lt;span style="color:#a6e22e">calculateCapacity&lt;/span>(&lt;span style="color:#a6e22e">backendCount&lt;/span>, &lt;span style="color:#a6e22e">ac&lt;/span>)
}
&lt;span style="color:#a6e22e">rt&lt;/span>.&lt;span style="color:#a6e22e">logger&lt;/span>.&lt;span style="color:#a6e22e">Infof&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Set capacity to %d (backends: %d, index: %d/%d)&amp;#34;&lt;/span>,
&lt;span style="color:#a6e22e">capacity&lt;/span>, &lt;span style="color:#a6e22e">backendCount&lt;/span>, &lt;span style="color:#a6e22e">ai&lt;/span>, &lt;span style="color:#a6e22e">ac&lt;/span>)
&lt;span style="color:#a6e22e">rt&lt;/span>.&lt;span style="color:#a6e22e">backendCount&lt;/span> = &lt;span style="color:#a6e22e">backendCount&lt;/span>
&lt;span style="color:#a6e22e">rt&lt;/span>.&lt;span style="color:#a6e22e">breaker&lt;/span>.&lt;span style="color:#a6e22e">UpdateConcurrency&lt;/span>(&lt;span style="color:#a6e22e">capacity&lt;/span>)
}
&lt;span style="color:#75715e">// UpdateConcurrency updates the maximum number of in-flight requests.
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">b&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Breaker&lt;/span>) &lt;span style="color:#a6e22e">UpdateConcurrency&lt;/span>(&lt;span style="color:#a6e22e">size&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>) {
&lt;span style="color:#a6e22e">b&lt;/span>.&lt;span style="color:#a6e22e">sem&lt;/span>.&lt;span style="color:#a6e22e">updateCapacity&lt;/span>(&lt;span style="color:#a6e22e">size&lt;/span>)
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以看到这里就是向&lt;code>s.queue&lt;/code>发送了指定数量的数据，以放行这些流量。（// todo 这个时候pod扩缩容了会是什么情况）&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#75715e">// updateCapacity updates the capacity of the semaphore to the desired size.
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">s&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">semaphore&lt;/span>) &lt;span style="color:#a6e22e">updateCapacity&lt;/span>(&lt;span style="color:#a6e22e">size&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>) {
&lt;span style="color:#a6e22e">s64&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> uint64(&lt;span style="color:#a6e22e">size&lt;/span>)
&lt;span style="color:#66d9ef">for&lt;/span> {
&lt;span style="color:#a6e22e">old&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">state&lt;/span>.&lt;span style="color:#a6e22e">Load&lt;/span>()
&lt;span style="color:#a6e22e">capacity&lt;/span>, &lt;span style="color:#a6e22e">in&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">unpack&lt;/span>(&lt;span style="color:#a6e22e">old&lt;/span>)
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">capacity&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#a6e22e">s64&lt;/span> {
&lt;span style="color:#75715e">// Nothing to do, exit early.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">return&lt;/span>
}
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">state&lt;/span>.&lt;span style="color:#a6e22e">CAS&lt;/span>(&lt;span style="color:#a6e22e">old&lt;/span>, &lt;span style="color:#a6e22e">pack&lt;/span>(&lt;span style="color:#a6e22e">s64&lt;/span>, &lt;span style="color:#a6e22e">in&lt;/span>)) {
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">s64&lt;/span> &amp;gt; &lt;span style="color:#a6e22e">capacity&lt;/span> {
&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> uint64(&lt;span style="color:#ae81ff">0&lt;/span>); &lt;span style="color:#a6e22e">i&lt;/span> &amp;lt; &lt;span style="color:#a6e22e">s64&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#a6e22e">capacity&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span>&lt;span style="color:#f92672">++&lt;/span> {
&lt;span style="color:#66d9ef">select&lt;/span> {
&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">queue&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span>{}{}:
&lt;span style="color:#66d9ef">default&lt;/span>:
&lt;span style="color:#75715e">// See comment in `release` for explanation of this case.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> }
}
}
&lt;span style="color:#66d9ef">return&lt;/span>
}
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="监听副本数量变化">监听副本数量变化&lt;/h5>
&lt;p>˙重点监听revision状态变化逻辑在&lt;code>pkg/activator/net/revision_backends.go&lt;/code>定义。在去掉一些其他逻辑后，从下面可以看出在&lt;code>newRevisionBackendsManagerWithProbeFrequency&lt;/code>函数中定义了对private service对应的endpoint的监听。&lt;code>Throttler&lt;/code>的Run函数将监听到的变化和上文中副本数量变化的处理部分衔接起来。update channle中发送的是revision信息（name和namespace）。&lt;/p>
&lt;p>前面说过对于revision和其endpoint的监听是在&lt;code>pkg/activator/net/revision_backends.go&lt;/code>文件中定义的。会监听revision和endpoint资源。在revision有变动的时候，todo。主要是要监听endpoint资源的变动，在增加和删除的时候会调用update函数，传入当前的endpoint信息：&lt;/p>
&lt;p>监听变动，筛选条件为带有revisionUID标签，并且必须是private的&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#75715e">// Run starts the throttler and blocks until the context is done.
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">t&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Throttler&lt;/span>) &lt;span style="color:#a6e22e">Run&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span> &lt;span style="color:#a6e22e">context&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>, &lt;span style="color:#a6e22e">probeTransport&lt;/span> &lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">RoundTripper&lt;/span>, &lt;span style="color:#a6e22e">usePassthroughLb&lt;/span> &lt;span style="color:#66d9ef">bool&lt;/span>, &lt;span style="color:#a6e22e">meshMode&lt;/span> &lt;span style="color:#a6e22e">network&lt;/span>.&lt;span style="color:#a6e22e">MeshCompatibilityMode&lt;/span>) {
&lt;span style="color:#a6e22e">rbm&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">newRevisionBackendsManager&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>, &lt;span style="color:#a6e22e">probeTransport&lt;/span>, &lt;span style="color:#a6e22e">usePassthroughLb&lt;/span>, &lt;span style="color:#a6e22e">meshMode&lt;/span>)
&lt;span style="color:#75715e">// Update channel is closed when ctx is done.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">t&lt;/span>.&lt;span style="color:#a6e22e">run&lt;/span>(&lt;span style="color:#a6e22e">rbm&lt;/span>.&lt;span style="color:#a6e22e">updates&lt;/span>())
}
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">newRevisionBackendsManager&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span> &lt;span style="color:#a6e22e">context&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>, &lt;span style="color:#a6e22e">tr&lt;/span> &lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">RoundTripper&lt;/span>, &lt;span style="color:#a6e22e">usePassthroughLb&lt;/span> &lt;span style="color:#66d9ef">bool&lt;/span>, &lt;span style="color:#a6e22e">meshMode&lt;/span> &lt;span style="color:#a6e22e">network&lt;/span>.&lt;span style="color:#a6e22e">MeshCompatibilityMode&lt;/span>) &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">revisionBackendsManager&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">newRevisionBackendsManagerWithProbeFrequency&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>, &lt;span style="color:#a6e22e">tr&lt;/span>, &lt;span style="color:#a6e22e">usePassthroughLb&lt;/span>, &lt;span style="color:#a6e22e">meshMode&lt;/span>, &lt;span style="color:#a6e22e">defaultProbeFrequency&lt;/span>)
}
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">newRevisionBackendsManagerWithProbeFrequency&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span> &lt;span style="color:#a6e22e">context&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>, &lt;span style="color:#a6e22e">tr&lt;/span> &lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">RoundTripper&lt;/span>,
&lt;span style="color:#a6e22e">usePassthroughLb&lt;/span> &lt;span style="color:#66d9ef">bool&lt;/span>, &lt;span style="color:#a6e22e">meshMode&lt;/span> &lt;span style="color:#a6e22e">network&lt;/span>.&lt;span style="color:#a6e22e">MeshCompatibilityMode&lt;/span>, &lt;span style="color:#a6e22e">probeFreq&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Duration&lt;/span>) &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">revisionBackendsManager&lt;/span> {
&lt;span style="color:#a6e22e">rbm&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">revisionBackendsManager&lt;/span>{
&lt;span style="color:#75715e">// ...
&lt;/span>&lt;span style="color:#75715e">&lt;/span> }
&lt;span style="color:#a6e22e">endpointsInformer&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">endpointsinformer&lt;/span>.&lt;span style="color:#a6e22e">Get&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>)
&lt;span style="color:#a6e22e">endpointsInformer&lt;/span>.&lt;span style="color:#a6e22e">Informer&lt;/span>().&lt;span style="color:#a6e22e">AddEventHandler&lt;/span>(&lt;span style="color:#a6e22e">cache&lt;/span>.&lt;span style="color:#a6e22e">FilteringResourceEventHandler&lt;/span>{
&lt;span style="color:#a6e22e">FilterFunc&lt;/span>: &lt;span style="color:#a6e22e">reconciler&lt;/span>.&lt;span style="color:#a6e22e">ChainFilterFuncs&lt;/span>(
&lt;span style="color:#a6e22e">reconciler&lt;/span>.&lt;span style="color:#a6e22e">LabelExistsFilterFunc&lt;/span>(&lt;span style="color:#a6e22e">serving&lt;/span>.&lt;span style="color:#a6e22e">RevisionUID&lt;/span>),
&lt;span style="color:#75715e">// We are only interested in the private services, since that is
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// what is populated by the actual revision backends.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">reconciler&lt;/span>.&lt;span style="color:#a6e22e">LabelFilterFunc&lt;/span>(&lt;span style="color:#a6e22e">networking&lt;/span>.&lt;span style="color:#a6e22e">ServiceTypeKey&lt;/span>, string(&lt;span style="color:#a6e22e">networking&lt;/span>.&lt;span style="color:#a6e22e">ServiceTypePrivate&lt;/span>), &lt;span style="color:#66d9ef">false&lt;/span>),
),
&lt;span style="color:#a6e22e">Handler&lt;/span>: &lt;span style="color:#a6e22e">cache&lt;/span>.&lt;span style="color:#a6e22e">ResourceEventHandlerFuncs&lt;/span>{
&lt;span style="color:#a6e22e">AddFunc&lt;/span>: &lt;span style="color:#a6e22e">rbm&lt;/span>.&lt;span style="color:#a6e22e">endpointsUpdated&lt;/span>,
&lt;span style="color:#a6e22e">UpdateFunc&lt;/span>: &lt;span style="color:#a6e22e">controller&lt;/span>.&lt;span style="color:#a6e22e">PassNew&lt;/span>(&lt;span style="color:#a6e22e">rbm&lt;/span>.&lt;span style="color:#a6e22e">endpointsUpdated&lt;/span>),
&lt;span style="color:#a6e22e">DeleteFunc&lt;/span>: &lt;span style="color:#a6e22e">rbm&lt;/span>.&lt;span style="color:#a6e22e">endpointsDeleted&lt;/span>,
},
})
&lt;span style="color:#75715e">// ...
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">rbm&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>在监听到endpoint被添加和修改后的实际处理函数逻辑为：获取&lt;code>RevisionWatcher&lt;/code>将ready的和notReady的pod信息发送到其&lt;code>destsCh&lt;/code>中：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#75715e">// endpointsUpdated is a handler function to be used by the Endpoints informer.
&lt;/span>&lt;span style="color:#75715e">// It updates the endpoints in the RevisionBackendsManager if the hosts changed
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">rbm&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">revisionBackendsManager&lt;/span>) &lt;span style="color:#a6e22e">endpointsUpdated&lt;/span>(&lt;span style="color:#a6e22e">newObj&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span>{}) {
&lt;span style="color:#75715e">// Ignore the updates when we&amp;#39;ve terminated.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">select&lt;/span> {
&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span>&lt;span style="color:#a6e22e">rbm&lt;/span>.&lt;span style="color:#a6e22e">ctx&lt;/span>.&lt;span style="color:#a6e22e">Done&lt;/span>():
&lt;span style="color:#66d9ef">return&lt;/span>
&lt;span style="color:#66d9ef">default&lt;/span>:
}
&lt;span style="color:#a6e22e">endpoints&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">newObj&lt;/span>.(&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">corev1&lt;/span>.&lt;span style="color:#a6e22e">Endpoints&lt;/span>)
&lt;span style="color:#a6e22e">revID&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">types&lt;/span>.&lt;span style="color:#a6e22e">NamespacedName&lt;/span>{&lt;span style="color:#a6e22e">Namespace&lt;/span>: &lt;span style="color:#a6e22e">endpoints&lt;/span>.&lt;span style="color:#a6e22e">Namespace&lt;/span>, &lt;span style="color:#a6e22e">Name&lt;/span>: &lt;span style="color:#a6e22e">endpoints&lt;/span>.&lt;span style="color:#a6e22e">Labels&lt;/span>[&lt;span style="color:#a6e22e">serving&lt;/span>.&lt;span style="color:#a6e22e">RevisionLabelKey&lt;/span>]}
&lt;span style="color:#a6e22e">rw&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">rbm&lt;/span>.&lt;span style="color:#a6e22e">getOrCreateRevisionWatcher&lt;/span>(&lt;span style="color:#a6e22e">revID&lt;/span>)
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;span style="color:#a6e22e">rbm&lt;/span>.&lt;span style="color:#a6e22e">logger&lt;/span>.&lt;span style="color:#a6e22e">Errorw&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Failed to get revision watcher&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">zap&lt;/span>.&lt;span style="color:#a6e22e">Error&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span>), &lt;span style="color:#a6e22e">zap&lt;/span>.&lt;span style="color:#a6e22e">String&lt;/span>(&lt;span style="color:#a6e22e">logkey&lt;/span>.&lt;span style="color:#a6e22e">Key&lt;/span>, &lt;span style="color:#a6e22e">revID&lt;/span>.&lt;span style="color:#a6e22e">String&lt;/span>()))
&lt;span style="color:#66d9ef">return&lt;/span>
}
&lt;span style="color:#a6e22e">ready&lt;/span>, &lt;span style="color:#a6e22e">notReady&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">endpointsToDests&lt;/span>(&lt;span style="color:#a6e22e">endpoints&lt;/span>, &lt;span style="color:#a6e22e">pkgnet&lt;/span>.&lt;span style="color:#a6e22e">ServicePortName&lt;/span>(&lt;span style="color:#a6e22e">rw&lt;/span>.&lt;span style="color:#a6e22e">protocol&lt;/span>))
&lt;span style="color:#66d9ef">select&lt;/span> {
&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span>&lt;span style="color:#a6e22e">rbm&lt;/span>.&lt;span style="color:#a6e22e">ctx&lt;/span>.&lt;span style="color:#a6e22e">Done&lt;/span>():
&lt;span style="color:#66d9ef">return&lt;/span>
&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#a6e22e">rw&lt;/span>.&lt;span style="color:#a6e22e">destsCh&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span> &lt;span style="color:#a6e22e">dests&lt;/span>{&lt;span style="color:#a6e22e">ready&lt;/span>: &lt;span style="color:#a6e22e">ready&lt;/span>, &lt;span style="color:#a6e22e">notReady&lt;/span>: &lt;span style="color:#a6e22e">notReady&lt;/span>}:
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>revision watcher在被创建的时候会起协程运行run函数，每当通道内有消息的时候会将信息进行处理并交由&lt;code>checkDests&lt;/code>进一步处理，最终在这个函数中交由&lt;code>sendUpdate&lt;/code>将更新信息发到update channel中，这个channel就是一开始提到的。&lt;/p>
&lt;p>删除部分辅助逻辑后，可以清晰看到此函数功能就是当&lt;code>destsCh&lt;/code>新的dest到来的时候，就将之前的和现在的一起交由&lt;code>sendUpdate&lt;/code>处理。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">rw&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">revisionWatcher&lt;/span>) &lt;span style="color:#a6e22e">run&lt;/span>(&lt;span style="color:#a6e22e">probeFrequency&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Duration&lt;/span>) {
&lt;span style="color:#66d9ef">defer&lt;/span> close(&lt;span style="color:#a6e22e">rw&lt;/span>.&lt;span style="color:#a6e22e">done&lt;/span>)
&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">curDests&lt;/span>, &lt;span style="color:#a6e22e">prevDests&lt;/span> &lt;span style="color:#a6e22e">dests&lt;/span>
&lt;span style="color:#66d9ef">for&lt;/span> {
&lt;span style="color:#66d9ef">select&lt;/span> {
&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span>&lt;span style="color:#a6e22e">rw&lt;/span>.&lt;span style="color:#a6e22e">stopCh&lt;/span>:
&lt;span style="color:#66d9ef">return&lt;/span>
&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#a6e22e">x&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span>&lt;span style="color:#a6e22e">rw&lt;/span>.&lt;span style="color:#a6e22e">destsCh&lt;/span>:
&lt;span style="color:#a6e22e">rw&lt;/span>.&lt;span style="color:#a6e22e">logger&lt;/span>.&lt;span style="color:#a6e22e">Debugf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Updating Endpoints: ready backends: %d, not-ready backends: %d&amp;#34;&lt;/span>, len(&lt;span style="color:#a6e22e">x&lt;/span>.&lt;span style="color:#a6e22e">ready&lt;/span>), len(&lt;span style="color:#a6e22e">x&lt;/span>.&lt;span style="color:#a6e22e">notReady&lt;/span>))
&lt;span style="color:#a6e22e">prevDests&lt;/span>, &lt;span style="color:#a6e22e">curDests&lt;/span> = &lt;span style="color:#a6e22e">curDests&lt;/span>, &lt;span style="color:#a6e22e">x&lt;/span>
}
&lt;span style="color:#a6e22e">rw&lt;/span>.&lt;span style="color:#a6e22e">checkDests&lt;/span>(&lt;span style="color:#a6e22e">curDests&lt;/span>, &lt;span style="color:#a6e22e">prevDests&lt;/span>)
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>checkDests函数首先查看是否是缩容到0，如果是就直接发送pod已经缩容到0的通知逻辑。这一块逻辑稍微有点复杂，但是目标很简单，就是将现在这个服务的clusterIP和pod访问地址交由&lt;code>sendUpdate&lt;/code>进一步处理。而&lt;code>sendUpdate&lt;/code>就是将数据封装一下加上revision信息发送到update 通道。从而触发了上面副本变化的处理逻辑。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#75715e">// checkDests performs probing and potentially sends a dests update. It is
&lt;/span>&lt;span style="color:#75715e">// assumed this method is not called concurrently.
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">rw&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">revisionWatcher&lt;/span>) &lt;span style="color:#a6e22e">checkDests&lt;/span>(&lt;span style="color:#a6e22e">curDests&lt;/span>, &lt;span style="color:#a6e22e">prevDests&lt;/span> &lt;span style="color:#a6e22e">dests&lt;/span>) {
&lt;span style="color:#75715e">// 缩容到0后的处理
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> len(&lt;span style="color:#a6e22e">curDests&lt;/span>.&lt;span style="color:#a6e22e">ready&lt;/span>) &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> len(&lt;span style="color:#a6e22e">curDests&lt;/span>.&lt;span style="color:#a6e22e">notReady&lt;/span>) &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> {
&lt;span style="color:#75715e">// We must have scaled down.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">rw&lt;/span>.&lt;span style="color:#a6e22e">clusterIPHealthy&lt;/span> = &lt;span style="color:#66d9ef">false&lt;/span>
&lt;span style="color:#a6e22e">rw&lt;/span>.&lt;span style="color:#a6e22e">healthyPods&lt;/span> = &lt;span style="color:#66d9ef">nil&lt;/span>
&lt;span style="color:#a6e22e">rw&lt;/span>.&lt;span style="color:#a6e22e">logger&lt;/span>.&lt;span style="color:#a6e22e">Debug&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;ClusterIP is no longer healthy.&amp;#34;&lt;/span>)
&lt;span style="color:#75715e">// Send update that we are now inactive (both params invalid).
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">rw&lt;/span>.&lt;span style="color:#a6e22e">sendUpdate&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>)
&lt;span style="color:#66d9ef">return&lt;/span>
}
&lt;span style="color:#75715e">// If we have discovered (or have been told via meshMode) that this revision
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// cannot be probed directly do not spend time trying.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">rw&lt;/span>.&lt;span style="color:#a6e22e">podsAddressable&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#a6e22e">rw&lt;/span>.&lt;span style="color:#a6e22e">meshMode&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#a6e22e">network&lt;/span>.&lt;span style="color:#a6e22e">MeshCompatibilityModeEnabled&lt;/span> {
&lt;span style="color:#75715e">// reprobe set contains the targets that moved from ready to non-ready set.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// so they have to be re-probed.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">reprobe&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">curDests&lt;/span>.&lt;span style="color:#a6e22e">becameNonReady&lt;/span>(&lt;span style="color:#a6e22e">prevDests&lt;/span>)
&lt;span style="color:#66d9ef">if&lt;/span> len(&lt;span style="color:#a6e22e">reprobe&lt;/span>) &amp;gt; &lt;span style="color:#ae81ff">0&lt;/span> {
&lt;span style="color:#a6e22e">rw&lt;/span>.&lt;span style="color:#a6e22e">logger&lt;/span>.&lt;span style="color:#a6e22e">Infow&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Need to reprobe pods who became non-ready&amp;#34;&lt;/span>,
&lt;span style="color:#a6e22e">zap&lt;/span>.&lt;span style="color:#a6e22e">Object&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;IPs&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">logging&lt;/span>.&lt;span style="color:#a6e22e">StringSet&lt;/span>(&lt;span style="color:#a6e22e">reprobe&lt;/span>)))
&lt;span style="color:#75715e">// Trim the pods that migrated to the non-ready set from the
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// ready set from the healthy pods. They will automatically
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// probed below.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">p&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">reprobe&lt;/span> {
&lt;span style="color:#a6e22e">rw&lt;/span>.&lt;span style="color:#a6e22e">healthyPods&lt;/span>.&lt;span style="color:#a6e22e">Delete&lt;/span>(&lt;span style="color:#a6e22e">p&lt;/span>)
}
}
&lt;span style="color:#75715e">// First check the pod IPs. If we can individually address
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// the Pods we should go that route, since it permits us to do
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// precise load balancing in the throttler.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">hs&lt;/span>, &lt;span style="color:#a6e22e">noop&lt;/span>, &lt;span style="color:#a6e22e">notMesh&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">rw&lt;/span>.&lt;span style="color:#a6e22e">probePodIPs&lt;/span>(&lt;span style="color:#a6e22e">curDests&lt;/span>.&lt;span style="color:#a6e22e">ready&lt;/span>, &lt;span style="color:#a6e22e">curDests&lt;/span>.&lt;span style="color:#a6e22e">notReady&lt;/span>)
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;span style="color:#a6e22e">rw&lt;/span>.&lt;span style="color:#a6e22e">logger&lt;/span>.&lt;span style="color:#a6e22e">Warnw&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Failed probing pods&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">zap&lt;/span>.&lt;span style="color:#a6e22e">Object&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;curDests&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">curDests&lt;/span>), &lt;span style="color:#a6e22e">zap&lt;/span>.&lt;span style="color:#a6e22e">Error&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span>))
&lt;span style="color:#75715e">// We dont want to return here as an error still affects health states.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> }
&lt;span style="color:#75715e">// We need to send update if reprobe is non-empty, since the state
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// of the world has been changed.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">rw&lt;/span>.&lt;span style="color:#a6e22e">logger&lt;/span>.&lt;span style="color:#a6e22e">Debugf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Done probing, got %d healthy pods&amp;#34;&lt;/span>, len(&lt;span style="color:#a6e22e">hs&lt;/span>))
&lt;span style="color:#66d9ef">if&lt;/span> !&lt;span style="color:#a6e22e">noop&lt;/span> &lt;span style="color:#f92672">||&lt;/span> len(&lt;span style="color:#a6e22e">reprobe&lt;/span>) &amp;gt; &lt;span style="color:#ae81ff">0&lt;/span> {
&lt;span style="color:#a6e22e">rw&lt;/span>.&lt;span style="color:#a6e22e">healthyPods&lt;/span> = &lt;span style="color:#a6e22e">hs&lt;/span>
&lt;span style="color:#75715e">// Note: it&amp;#39;s important that this copies (via hs.Union) the healthy pods
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// set before sending the update to avoid concurrent modifications
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// affecting the throttler, which iterates over the set.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">rw&lt;/span>.&lt;span style="color:#a6e22e">sendUpdate&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span> &lt;span style="color:#75715e">/*clusterIP*/&lt;/span>, &lt;span style="color:#a6e22e">hs&lt;/span>.&lt;span style="color:#a6e22e">Union&lt;/span>(&lt;span style="color:#66d9ef">nil&lt;/span>))
&lt;span style="color:#66d9ef">return&lt;/span>
}
&lt;span style="color:#75715e">// no-op, and we have successfully probed at least one pod.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> len(&lt;span style="color:#a6e22e">hs&lt;/span>) &amp;gt; &lt;span style="color:#ae81ff">0&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span>
}
&lt;span style="color:#75715e">// We didn&amp;#39;t get any pods, but we know the mesh is not enabled since we got
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// a non-mesh status code while probing, so we don&amp;#39;t want to fall back.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">notMesh&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span>
}
}
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">rw&lt;/span>.&lt;span style="color:#a6e22e">usePassthroughLb&lt;/span> {
&lt;span style="color:#75715e">// If passthrough lb is enabled we do not want to fall back to going via the
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// clusterIP and instead want to exit early.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">return&lt;/span>
}
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">rw&lt;/span>.&lt;span style="color:#a6e22e">meshMode&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#a6e22e">network&lt;/span>.&lt;span style="color:#a6e22e">MeshCompatibilityModeDisabled&lt;/span> {
&lt;span style="color:#75715e">// If mesh is disabled we always want to use direct pod addressing, and
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// will not fall back to clusterIP.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">return&lt;/span>
}
&lt;span style="color:#75715e">// If we failed to probe even a single pod, check the clusterIP.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// NB: We can&amp;#39;t cache the IP address, since user might go rogue
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// and delete the K8s service. We&amp;#39;ll fix it, but the cluster IP will be different.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">dest&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">rw&lt;/span>.&lt;span style="color:#a6e22e">getDest&lt;/span>()
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;span style="color:#a6e22e">rw&lt;/span>.&lt;span style="color:#a6e22e">logger&lt;/span>.&lt;span style="color:#a6e22e">Errorw&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Failed to determine service destination&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">zap&lt;/span>.&lt;span style="color:#a6e22e">Error&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span>))
&lt;span style="color:#66d9ef">return&lt;/span>
}
&lt;span style="color:#75715e">// If cluster IP is healthy and we haven&amp;#39;t scaled down, short circuit.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">rw&lt;/span>.&lt;span style="color:#a6e22e">clusterIPHealthy&lt;/span> {
&lt;span style="color:#a6e22e">rw&lt;/span>.&lt;span style="color:#a6e22e">logger&lt;/span>.&lt;span style="color:#a6e22e">Debugf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;ClusterIP %s already probed (ready backends: %d)&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">dest&lt;/span>, len(&lt;span style="color:#a6e22e">curDests&lt;/span>.&lt;span style="color:#a6e22e">ready&lt;/span>))
&lt;span style="color:#a6e22e">rw&lt;/span>.&lt;span style="color:#a6e22e">sendUpdate&lt;/span>(&lt;span style="color:#a6e22e">dest&lt;/span>, &lt;span style="color:#a6e22e">curDests&lt;/span>.&lt;span style="color:#a6e22e">ready&lt;/span>)
&lt;span style="color:#66d9ef">return&lt;/span>
}
&lt;span style="color:#75715e">// If clusterIP is healthy send this update and we are done.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">ok&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">rw&lt;/span>.&lt;span style="color:#a6e22e">probeClusterIP&lt;/span>(&lt;span style="color:#a6e22e">dest&lt;/span>); &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;span style="color:#a6e22e">rw&lt;/span>.&lt;span style="color:#a6e22e">logger&lt;/span>.&lt;span style="color:#a6e22e">Errorw&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Failed to probe clusterIP &amp;#34;&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#a6e22e">dest&lt;/span>, &lt;span style="color:#a6e22e">zap&lt;/span>.&lt;span style="color:#a6e22e">Error&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span>))
} &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">ok&lt;/span> {
&lt;span style="color:#75715e">// We can reach here only iff pods are not successfully individually probed
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// but ClusterIP conversely has been successfully probed.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">rw&lt;/span>.&lt;span style="color:#a6e22e">podsAddressable&lt;/span> = &lt;span style="color:#66d9ef">false&lt;/span>
&lt;span style="color:#a6e22e">rw&lt;/span>.&lt;span style="color:#a6e22e">logger&lt;/span>.&lt;span style="color:#a6e22e">Debugf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;ClusterIP is successfully probed: %s (ready backends: %d)&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">dest&lt;/span>, len(&lt;span style="color:#a6e22e">curDests&lt;/span>.&lt;span style="color:#a6e22e">ready&lt;/span>))
&lt;span style="color:#a6e22e">rw&lt;/span>.&lt;span style="color:#a6e22e">clusterIPHealthy&lt;/span> = &lt;span style="color:#66d9ef">true&lt;/span>
&lt;span style="color:#a6e22e">rw&lt;/span>.&lt;span style="color:#a6e22e">healthyPods&lt;/span> = &lt;span style="color:#66d9ef">nil&lt;/span>
&lt;span style="color:#a6e22e">rw&lt;/span>.&lt;span style="color:#a6e22e">sendUpdate&lt;/span>(&lt;span style="color:#a6e22e">dest&lt;/span>, &lt;span style="color:#a6e22e">curDests&lt;/span>.&lt;span style="color:#a6e22e">ready&lt;/span>)
}
}
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">rw&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">revisionWatcher&lt;/span>) &lt;span style="color:#a6e22e">sendUpdate&lt;/span>(&lt;span style="color:#a6e22e">clusterIP&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">dests&lt;/span> &lt;span style="color:#a6e22e">sets&lt;/span>.&lt;span style="color:#a6e22e">String&lt;/span>) {
&lt;span style="color:#66d9ef">select&lt;/span> {
&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span>&lt;span style="color:#a6e22e">rw&lt;/span>.&lt;span style="color:#a6e22e">stopCh&lt;/span>:
&lt;span style="color:#66d9ef">return&lt;/span>
&lt;span style="color:#66d9ef">default&lt;/span>:
&lt;span style="color:#a6e22e">rw&lt;/span>.&lt;span style="color:#a6e22e">updateCh&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span> &lt;span style="color:#a6e22e">revisionDestsUpdate&lt;/span>{&lt;span style="color:#a6e22e">Rev&lt;/span>: &lt;span style="color:#a6e22e">rw&lt;/span>.&lt;span style="color:#a6e22e">rev&lt;/span>, &lt;span style="color:#a6e22e">ClusterIPDest&lt;/span>: &lt;span style="color:#a6e22e">clusterIP&lt;/span>, &lt;span style="color:#a6e22e">Dests&lt;/span>: &lt;span style="color:#a6e22e">dests&lt;/span>}
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>endpoint的修改是由k8s自动触发的。&lt;/p>
&lt;h3 id="从0扩容autoscaler源码分析">从0扩容autoscaler源码分析&lt;/h3>
&lt;h4 id="接收activator从0扩容指标">接收activator从0扩容指标&lt;/h4>
&lt;p>首先让我们把目光聚焦到接收activator 发送的metrics并进行处理的逻辑。&lt;code>statserver&lt;/code>启动一个websocket服务器，接收activator在服务没有副本的时候发送的流量参数，标志着这个服务需要立即从0扩容。这里通过&lt;code>statsCh&lt;/code>将指标的接收与处理解耦开来。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;span style="color:#75715e">// ......
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#75715e">// autoscaler在接收到从websocket上报的指标后，会把消息内容发送到这个通道中进行异步处理。
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// statsCh is the main communication channel between the stats server and multiscaler.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">statsCh&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> make(&lt;span style="color:#66d9ef">chan&lt;/span> &lt;span style="color:#a6e22e">asmetrics&lt;/span>.&lt;span style="color:#a6e22e">StatMessage&lt;/span>, &lt;span style="color:#a6e22e">statsBufferLen&lt;/span>)
&lt;span style="color:#66d9ef">defer&lt;/span> close(&lt;span style="color:#a6e22e">statsCh&lt;/span>)
&lt;span style="color:#75715e">// ......
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#75715e">// accept is the func to call when this pod owns the Revision for this StatMessage.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// 实际有了请求之后，冷启动时发送过来的信息
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">accept&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">sm&lt;/span> &lt;span style="color:#a6e22e">asmetrics&lt;/span>.&lt;span style="color:#a6e22e">StatMessage&lt;/span>) {
&lt;span style="color:#75715e">// 这个就是将指标发给统计的，在计算扩缩容状态的时候就会用到这些指标
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">collector&lt;/span>.&lt;span style="color:#a6e22e">Record&lt;/span>(&lt;span style="color:#a6e22e">sm&lt;/span>.&lt;span style="color:#a6e22e">Key&lt;/span>, &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Unix&lt;/span>(&lt;span style="color:#a6e22e">sm&lt;/span>.&lt;span style="color:#a6e22e">Stat&lt;/span>.&lt;span style="color:#a6e22e">Timestamp&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>), &lt;span style="color:#a6e22e">sm&lt;/span>.&lt;span style="color:#a6e22e">Stat&lt;/span>)
&lt;span style="color:#a6e22e">multiScaler&lt;/span>.&lt;span style="color:#a6e22e">Poke&lt;/span>(&lt;span style="color:#a6e22e">sm&lt;/span>.&lt;span style="color:#a6e22e">Key&lt;/span>, &lt;span style="color:#a6e22e">sm&lt;/span>.&lt;span style="color:#a6e22e">Stat&lt;/span>)
}
&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">f&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">statforwarder&lt;/span>.&lt;span style="color:#a6e22e">Forwarder&lt;/span>
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">b&lt;/span>, &lt;span style="color:#a6e22e">bs&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">leaderelection&lt;/span>.&lt;span style="color:#a6e22e">NewStatefulSetBucketAndSet&lt;/span>(int(&lt;span style="color:#a6e22e">cc&lt;/span>.&lt;span style="color:#a6e22e">Buckets&lt;/span>)); &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;span style="color:#a6e22e">logger&lt;/span>.&lt;span style="color:#a6e22e">Info&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Running with StatefulSet leader election&amp;#34;&lt;/span>)
&lt;span style="color:#a6e22e">ctx&lt;/span> = &lt;span style="color:#a6e22e">leaderelection&lt;/span>.&lt;span style="color:#a6e22e">WithStatefulSetElectorBuilder&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>, &lt;span style="color:#a6e22e">cc&lt;/span>, &lt;span style="color:#a6e22e">b&lt;/span>)
&lt;span style="color:#a6e22e">f&lt;/span> = &lt;span style="color:#a6e22e">statforwarder&lt;/span>.&lt;span style="color:#a6e22e">New&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>, &lt;span style="color:#a6e22e">bs&lt;/span>)
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">statforwarder&lt;/span>.&lt;span style="color:#a6e22e">StatefulSetBasedProcessor&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>, &lt;span style="color:#a6e22e">f&lt;/span>, &lt;span style="color:#a6e22e">accept&lt;/span>); &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;span style="color:#a6e22e">logger&lt;/span>.&lt;span style="color:#a6e22e">Fatalw&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Failed to set up statefulset processors&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">zap&lt;/span>.&lt;span style="color:#a6e22e">Error&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span>))
}
} &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;span style="color:#a6e22e">logger&lt;/span>.&lt;span style="color:#a6e22e">Info&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Running with Standard leader election&amp;#34;&lt;/span>)
&lt;span style="color:#a6e22e">ctx&lt;/span> = &lt;span style="color:#a6e22e">leaderelection&lt;/span>.&lt;span style="color:#a6e22e">WithStandardLeaderElectorBuilder&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>, &lt;span style="color:#a6e22e">kubeClient&lt;/span>, &lt;span style="color:#a6e22e">cc&lt;/span>)
&lt;span style="color:#a6e22e">f&lt;/span> = &lt;span style="color:#a6e22e">statforwarder&lt;/span>.&lt;span style="color:#a6e22e">New&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>, &lt;span style="color:#a6e22e">bucket&lt;/span>.&lt;span style="color:#a6e22e">AutoscalerBucketSet&lt;/span>(&lt;span style="color:#a6e22e">cc&lt;/span>.&lt;span style="color:#a6e22e">Buckets&lt;/span>))
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">statforwarder&lt;/span>.&lt;span style="color:#a6e22e">LeaseBasedProcessor&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>, &lt;span style="color:#a6e22e">f&lt;/span>, &lt;span style="color:#a6e22e">accept&lt;/span>); &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;span style="color:#a6e22e">logger&lt;/span>.&lt;span style="color:#a6e22e">Fatalw&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Failed to set up lease tracking&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">zap&lt;/span>.&lt;span style="color:#a6e22e">Error&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span>))
}
}
&lt;span style="color:#75715e">// Set up a statserver.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">statsServer&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">statserver&lt;/span>.&lt;span style="color:#a6e22e">New&lt;/span>(&lt;span style="color:#a6e22e">statsServerAddr&lt;/span>, &lt;span style="color:#a6e22e">statsCh&lt;/span>, &lt;span style="color:#a6e22e">logger&lt;/span>, &lt;span style="color:#a6e22e">f&lt;/span>.&lt;span style="color:#a6e22e">IsBucketOwner&lt;/span>)
&lt;span style="color:#66d9ef">defer&lt;/span> &lt;span style="color:#a6e22e">f&lt;/span>.&lt;span style="color:#a6e22e">Cancel&lt;/span>()
&lt;span style="color:#66d9ef">go&lt;/span> &lt;span style="color:#a6e22e">controller&lt;/span>.&lt;span style="color:#a6e22e">StartAll&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>, &lt;span style="color:#a6e22e">controllers&lt;/span>&lt;span style="color:#f92672">...&lt;/span>)
&lt;span style="color:#66d9ef">go&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>() {
&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">sm&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">statsCh&lt;/span> {
&lt;span style="color:#75715e">// Set the timestamp when first receiving the stat.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">sm&lt;/span>.&lt;span style="color:#a6e22e">Stat&lt;/span>.&lt;span style="color:#a6e22e">Timestamp&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> {
&lt;span style="color:#a6e22e">sm&lt;/span>.&lt;span style="color:#a6e22e">Stat&lt;/span>.&lt;span style="color:#a6e22e">Timestamp&lt;/span> = &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Now&lt;/span>().&lt;span style="color:#a6e22e">Unix&lt;/span>()
}
&lt;span style="color:#a6e22e">f&lt;/span>.&lt;span style="color:#a6e22e">Process&lt;/span>(&lt;span style="color:#a6e22e">sm&lt;/span>)
}
}()
&lt;span style="color:#a6e22e">profilingServer&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">profiling&lt;/span>.&lt;span style="color:#a6e22e">NewServer&lt;/span>(&lt;span style="color:#a6e22e">profilingHandler&lt;/span>)
&lt;span style="color:#a6e22e">eg&lt;/span>, &lt;span style="color:#a6e22e">egCtx&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">errgroup&lt;/span>.&lt;span style="color:#a6e22e">WithContext&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>)
&lt;span style="color:#a6e22e">eg&lt;/span>.&lt;span style="color:#a6e22e">Go&lt;/span>(&lt;span style="color:#a6e22e">statsServer&lt;/span>.&lt;span style="color:#a6e22e">ListenAndServe&lt;/span>)
&lt;span style="color:#a6e22e">eg&lt;/span>.&lt;span style="color:#a6e22e">Go&lt;/span>(&lt;span style="color:#a6e22e">profilingServer&lt;/span>.&lt;span style="color:#a6e22e">ListenAndServe&lt;/span>)
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>上面可以看到指标都是由Process函数进行处理的。这个函数是将消息发往一个内部通道，获取processor并在其&lt;code>process&lt;/code>函数中进行处理并执行重试逻辑，最大重试次数是硬编码的30次，每次重试间隔500ms。注意一点是autoscaler处于主节点和从节点模式下processor的处理逻辑是不同的。如果是从节点的话，就把这个消息再发到主节点的websocket端口上去，然后主节点的逻辑又会走到这里，所以后面主要以当前autoscaler是主节点情况下分析。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#75715e">// Process enqueues the given Stat for processing asynchronously.
&lt;/span>&lt;span style="color:#75715e">// It calls Forwarder.accept if the pod where this Forwarder is running is the owner
&lt;/span>&lt;span style="color:#75715e">// of the given StatMessage. Otherwise it forwards the given StatMessage to the right
&lt;/span>&lt;span style="color:#75715e">// owner pod. It will retry if any error happens during the processing.
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">f&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Forwarder&lt;/span>) &lt;span style="color:#a6e22e">Process&lt;/span>(&lt;span style="color:#a6e22e">sm&lt;/span> &lt;span style="color:#a6e22e">asmetrics&lt;/span>.&lt;span style="color:#a6e22e">StatMessage&lt;/span>) {
&lt;span style="color:#a6e22e">f&lt;/span>.&lt;span style="color:#a6e22e">statCh&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span> &lt;span style="color:#a6e22e">stat&lt;/span>{&lt;span style="color:#a6e22e">sm&lt;/span>: &lt;span style="color:#a6e22e">sm&lt;/span>, &lt;span style="color:#a6e22e">retry&lt;/span>: &lt;span style="color:#ae81ff">0&lt;/span>}
}
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">f&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Forwarder&lt;/span>) &lt;span style="color:#a6e22e">process&lt;/span>() {
&lt;span style="color:#66d9ef">defer&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>() {
&lt;span style="color:#a6e22e">f&lt;/span>.&lt;span style="color:#a6e22e">retryWg&lt;/span>.&lt;span style="color:#a6e22e">Wait&lt;/span>()
&lt;span style="color:#a6e22e">f&lt;/span>.&lt;span style="color:#a6e22e">processingWg&lt;/span>.&lt;span style="color:#a6e22e">Done&lt;/span>()
}()
&lt;span style="color:#66d9ef">for&lt;/span> {
&lt;span style="color:#66d9ef">select&lt;/span> {
&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span>&lt;span style="color:#a6e22e">f&lt;/span>.&lt;span style="color:#a6e22e">stopCh&lt;/span>:
&lt;span style="color:#66d9ef">return&lt;/span>
&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#a6e22e">s&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span>&lt;span style="color:#a6e22e">f&lt;/span>.&lt;span style="color:#a6e22e">statCh&lt;/span>:
&lt;span style="color:#a6e22e">rev&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">sm&lt;/span>.&lt;span style="color:#a6e22e">Key&lt;/span>.&lt;span style="color:#a6e22e">String&lt;/span>()
&lt;span style="color:#a6e22e">l&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">f&lt;/span>.&lt;span style="color:#a6e22e">logger&lt;/span>.&lt;span style="color:#a6e22e">With&lt;/span>(&lt;span style="color:#a6e22e">zap&lt;/span>.&lt;span style="color:#a6e22e">String&lt;/span>(&lt;span style="color:#a6e22e">logkey&lt;/span>.&lt;span style="color:#a6e22e">Key&lt;/span>, &lt;span style="color:#a6e22e">rev&lt;/span>))
&lt;span style="color:#a6e22e">bkt&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">f&lt;/span>.&lt;span style="color:#a6e22e">bs&lt;/span>.&lt;span style="color:#a6e22e">Owner&lt;/span>(&lt;span style="color:#a6e22e">rev&lt;/span>)
&lt;span style="color:#75715e">// 获取processor,由于高可用情况下存在多个autoscaler副本，但是只有一个能处理。所以processor也有两种类型
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">p&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">f&lt;/span>.&lt;span style="color:#a6e22e">getProcessor&lt;/span>(&lt;span style="color:#a6e22e">bkt&lt;/span>)
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">p&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;span style="color:#a6e22e">l&lt;/span>.&lt;span style="color:#a6e22e">Warn&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Can&amp;#39;t find the owner for Revision bucket: &amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">bkt&lt;/span>)
&lt;span style="color:#a6e22e">f&lt;/span>.&lt;span style="color:#a6e22e">maybeRetry&lt;/span>(&lt;span style="color:#a6e22e">l&lt;/span>, &lt;span style="color:#a6e22e">s&lt;/span>)
&lt;span style="color:#66d9ef">continue&lt;/span>
}
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">p&lt;/span>.&lt;span style="color:#a6e22e">process&lt;/span>(&lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">sm&lt;/span>); &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;span style="color:#a6e22e">l&lt;/span>.&lt;span style="color:#a6e22e">Errorw&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Error while processing stat&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">zap&lt;/span>.&lt;span style="color:#a6e22e">Error&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span>))
&lt;span style="color:#a6e22e">f&lt;/span>.&lt;span style="color:#a6e22e">maybeRetry&lt;/span>(&lt;span style="color:#a6e22e">l&lt;/span>, &lt;span style="color:#a6e22e">s&lt;/span>)
}
}
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这里看下process的处理，就是调用了之前main函数中定义的accept，做了两件事情一个是记录指标，指标记录是一个单独的逻辑会在后面介绍。一个是调用&lt;code>multiScaler.Poke&lt;/code>这个方法，接下来看下这个方法做了什么。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">p&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">localProcessor&lt;/span>) &lt;span style="color:#a6e22e">process&lt;/span>(&lt;span style="color:#a6e22e">sm&lt;/span> &lt;span style="color:#a6e22e">asmetrics&lt;/span>.&lt;span style="color:#a6e22e">StatMessage&lt;/span>) &lt;span style="color:#66d9ef">error&lt;/span> {
&lt;span style="color:#a6e22e">l&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">p&lt;/span>.&lt;span style="color:#a6e22e">logger&lt;/span>.&lt;span style="color:#a6e22e">With&lt;/span>(&lt;span style="color:#a6e22e">zap&lt;/span>.&lt;span style="color:#a6e22e">String&lt;/span>(&lt;span style="color:#a6e22e">logkey&lt;/span>.&lt;span style="color:#a6e22e">Key&lt;/span>, &lt;span style="color:#a6e22e">sm&lt;/span>.&lt;span style="color:#a6e22e">Key&lt;/span>.&lt;span style="color:#a6e22e">String&lt;/span>()))
&lt;span style="color:#a6e22e">l&lt;/span>.&lt;span style="color:#a6e22e">Debug&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Accept stat as owner of bucket &amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">p&lt;/span>.&lt;span style="color:#a6e22e">bkt&lt;/span>)
&lt;span style="color:#a6e22e">p&lt;/span>.&lt;span style="color:#a6e22e">accept&lt;/span>(&lt;span style="color:#a6e22e">sm&lt;/span>)
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>
}
&lt;span style="color:#75715e">// accept 对应在main函数中定义的函数，传递进来的
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">accept&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">sm&lt;/span> &lt;span style="color:#a6e22e">asmetrics&lt;/span>.&lt;span style="color:#a6e22e">StatMessage&lt;/span>) {
&lt;span style="color:#75715e">// 这个就是将指标发给统计的，在计算扩缩容状态的时候就会用到这些指标
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">collector&lt;/span>.&lt;span style="color:#a6e22e">Record&lt;/span>(&lt;span style="color:#a6e22e">sm&lt;/span>.&lt;span style="color:#a6e22e">Key&lt;/span>, &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Unix&lt;/span>(&lt;span style="color:#a6e22e">sm&lt;/span>.&lt;span style="color:#a6e22e">Stat&lt;/span>.&lt;span style="color:#a6e22e">Timestamp&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>), &lt;span style="color:#a6e22e">sm&lt;/span>.&lt;span style="color:#a6e22e">Stat&lt;/span>)
&lt;span style="color:#a6e22e">multiScaler&lt;/span>.&lt;span style="color:#a6e22e">Poke&lt;/span>(&lt;span style="color:#a6e22e">sm&lt;/span>.&lt;span style="color:#a6e22e">Key&lt;/span>, &lt;span style="color:#a6e22e">sm&lt;/span>.&lt;span style="color:#a6e22e">Stat&lt;/span>)
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这个函数的作用就是检查是否立即触发扩容。如果目前副本数是0，但是并发数不为0，就要立即从0扩容，就将信号发送到revision对应的scaler的&lt;code>pokeCh&lt;/code>通道中。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#75715e">// 这个函数的作用就是检查是否立即触发扩容
&lt;/span>&lt;span style="color:#75715e">// Poke checks if the autoscaler needs to be run immediately.
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">m&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">MultiScaler&lt;/span>) &lt;span style="color:#a6e22e">Poke&lt;/span>(&lt;span style="color:#a6e22e">key&lt;/span> &lt;span style="color:#a6e22e">types&lt;/span>.&lt;span style="color:#a6e22e">NamespacedName&lt;/span>, &lt;span style="color:#a6e22e">stat&lt;/span> &lt;span style="color:#a6e22e">metrics&lt;/span>.&lt;span style="color:#a6e22e">Stat&lt;/span>) {
&lt;span style="color:#a6e22e">m&lt;/span>.&lt;span style="color:#a6e22e">scalersMutex&lt;/span>.&lt;span style="color:#a6e22e">RLock&lt;/span>()
&lt;span style="color:#66d9ef">defer&lt;/span> &lt;span style="color:#a6e22e">m&lt;/span>.&lt;span style="color:#a6e22e">scalersMutex&lt;/span>.&lt;span style="color:#a6e22e">RUnlock&lt;/span>()
&lt;span style="color:#a6e22e">scaler&lt;/span>, &lt;span style="color:#a6e22e">exists&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">m&lt;/span>.&lt;span style="color:#a6e22e">scalers&lt;/span>[&lt;span style="color:#a6e22e">key&lt;/span>]
&lt;span style="color:#66d9ef">if&lt;/span> !&lt;span style="color:#a6e22e">exists&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span>
}
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">scaler&lt;/span>.&lt;span style="color:#a6e22e">latestScale&lt;/span>() &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#a6e22e">stat&lt;/span>.&lt;span style="color:#a6e22e">AverageConcurrentRequests&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> {
&lt;span style="color:#a6e22e">scaler&lt;/span>.&lt;span style="color:#a6e22e">pokeCh&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span>{}{}
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="触发扩缩容">触发扩缩容&lt;/h4>
&lt;p>对&lt;code>pokeCh&lt;/code>处理的核心逻辑定义在&lt;code>pkg/autoscaler/scaling/multiscaler.go&lt;/code>文件中，可以看到计算扩缩容的操作会被周期触发，或者在&lt;code>pokeCh&lt;/code>有数据时立即触发。扩缩容处理函数&lt;code>tickScaler&lt;/code>就是获取&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">m&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">MultiScaler&lt;/span>) &lt;span style="color:#a6e22e">runScalerTicker&lt;/span>(&lt;span style="color:#a6e22e">runner&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">scalerRunner&lt;/span>, &lt;span style="color:#a6e22e">metricKey&lt;/span> &lt;span style="color:#a6e22e">types&lt;/span>.&lt;span style="color:#a6e22e">NamespacedName&lt;/span>) {
&lt;span style="color:#a6e22e">ticker&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">m&lt;/span>.&lt;span style="color:#a6e22e">tickProvider&lt;/span>(&lt;span style="color:#a6e22e">tickInterval&lt;/span>)
&lt;span style="color:#66d9ef">go&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>() {
&lt;span style="color:#66d9ef">defer&lt;/span> &lt;span style="color:#a6e22e">ticker&lt;/span>.&lt;span style="color:#a6e22e">Stop&lt;/span>()
&lt;span style="color:#66d9ef">for&lt;/span> {
&lt;span style="color:#66d9ef">select&lt;/span> {
&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span>&lt;span style="color:#a6e22e">m&lt;/span>.&lt;span style="color:#a6e22e">scalersStopCh&lt;/span>:
&lt;span style="color:#66d9ef">return&lt;/span>
&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span>&lt;span style="color:#a6e22e">runner&lt;/span>.&lt;span style="color:#a6e22e">stopCh&lt;/span>:
&lt;span style="color:#66d9ef">return&lt;/span>
&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span>&lt;span style="color:#a6e22e">ticker&lt;/span>.&lt;span style="color:#a6e22e">C&lt;/span>:
&lt;span style="color:#a6e22e">m&lt;/span>.&lt;span style="color:#a6e22e">tickScaler&lt;/span>(&lt;span style="color:#a6e22e">runner&lt;/span>.&lt;span style="color:#a6e22e">scaler&lt;/span>, &lt;span style="color:#a6e22e">runner&lt;/span>, &lt;span style="color:#a6e22e">metricKey&lt;/span>)
&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span>&lt;span style="color:#a6e22e">runner&lt;/span>.&lt;span style="color:#a6e22e">pokeCh&lt;/span>:
&lt;span style="color:#a6e22e">m&lt;/span>.&lt;span style="color:#a6e22e">tickScaler&lt;/span>(&lt;span style="color:#a6e22e">runner&lt;/span>.&lt;span style="color:#a6e22e">scaler&lt;/span>, &lt;span style="color:#a6e22e">runner&lt;/span>, &lt;span style="color:#a6e22e">metricKey&lt;/span>)
}
}
}()
}
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">m&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">MultiScaler&lt;/span>) &lt;span style="color:#a6e22e">tickScaler&lt;/span>(&lt;span style="color:#a6e22e">scaler&lt;/span> &lt;span style="color:#a6e22e">UniScaler&lt;/span>, &lt;span style="color:#a6e22e">runner&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">scalerRunner&lt;/span>, &lt;span style="color:#a6e22e">metricKey&lt;/span> &lt;span style="color:#a6e22e">types&lt;/span>.&lt;span style="color:#a6e22e">NamespacedName&lt;/span>) {
&lt;span style="color:#75715e">// scaler.Scale是一个比较复杂的函数，其主要作用就是计算期望副本数。其返回值结构体如下：
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">//type ScaleResult struct {
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// 期望副本数.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// DesiredPodCount int32
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// 是考虑到目标突发容量的修正后的满负荷容量.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// ExcessBurstCapacity int32
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// 这个结果是否有用
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// ScaleValid bool
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">//}
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">sr&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">scaler&lt;/span>.&lt;span style="color:#a6e22e">Scale&lt;/span>(&lt;span style="color:#a6e22e">runner&lt;/span>.&lt;span style="color:#a6e22e">logger&lt;/span>, &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Now&lt;/span>())
&lt;span style="color:#66d9ef">if&lt;/span> !&lt;span style="color:#a6e22e">sr&lt;/span>.&lt;span style="color:#a6e22e">ScaleValid&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span>
}
&lt;span style="color:#75715e">// scalerRunner也是一个非常核心的struct，这里主要就是将计算结构更新到自己的结构体内部字段。特别是期望副本数，在其他地方想要取期望副本数的时候，就通过此结构体取。
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">runner&lt;/span>.&lt;span style="color:#a6e22e">updateLatestScale&lt;/span>(&lt;span style="color:#a6e22e">sr&lt;/span>) {
&lt;span style="color:#a6e22e">m&lt;/span>.&lt;span style="color:#a6e22e">Inform&lt;/span>(&lt;span style="color:#a6e22e">metricKey&lt;/span>)
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Scale的定义在&lt;code>pkg/autoscaler/scaling/autoscaler.go&lt;/code>文件中。如果你觉得太长你就大概理解为这个函数根据activator和queue上报上来的指标计算期望副本数就行了。具体在下面函数中关键点都有注释&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#75715e">// Scale calculates the desired scale based on current statistics given the current time.
&lt;/span>&lt;span style="color:#75715e">// desiredPodCount is the calculated pod count the autoscaler would like to set.
&lt;/span>&lt;span style="color:#75715e">// validScale signifies whether the desiredPodCount should be applied or not.
&lt;/span>&lt;span style="color:#75715e">// Scale is not thread safe in regards to panic state, but it&amp;#39;s thread safe in
&lt;/span>&lt;span style="color:#75715e">// regards to acquiring the decider spec.
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">a&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">autoscaler&lt;/span>) &lt;span style="color:#a6e22e">Scale&lt;/span>(&lt;span style="color:#a6e22e">logger&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">zap&lt;/span>.&lt;span style="color:#a6e22e">SugaredLogger&lt;/span>, &lt;span style="color:#a6e22e">now&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Time&lt;/span>) &lt;span style="color:#a6e22e">ScaleResult&lt;/span> {
&lt;span style="color:#a6e22e">desugared&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">logger&lt;/span>.&lt;span style="color:#a6e22e">Desugar&lt;/span>()
&lt;span style="color:#a6e22e">debugEnabled&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">desugared&lt;/span>.&lt;span style="color:#a6e22e">Core&lt;/span>().&lt;span style="color:#a6e22e">Enabled&lt;/span>(&lt;span style="color:#a6e22e">zapcore&lt;/span>.&lt;span style="color:#a6e22e">DebugLevel&lt;/span>)
&lt;span style="color:#75715e">// 获取缩放配置
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">spec&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">a&lt;/span>.&lt;span style="color:#a6e22e">currentSpec&lt;/span>()
&lt;span style="color:#75715e">// 获取ready的pod的数量
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">originalReadyPodsCount&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">a&lt;/span>.&lt;span style="color:#a6e22e">podCounter&lt;/span>.&lt;span style="color:#a6e22e">ReadyCount&lt;/span>()
&lt;span style="color:#75715e">// If the error is NotFound, then presume 0.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> !&lt;span style="color:#a6e22e">apierrors&lt;/span>.&lt;span style="color:#a6e22e">IsNotFound&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span>) {
&lt;span style="color:#a6e22e">logger&lt;/span>.&lt;span style="color:#a6e22e">Errorw&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Failed to get ready pod count via K8S Lister&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">zap&lt;/span>.&lt;span style="color:#a6e22e">Error&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span>))
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">invalidSR&lt;/span>
}
&lt;span style="color:#75715e">// Use 1 if there are zero current pods.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">readyPodsCount&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">math&lt;/span>.&lt;span style="color:#a6e22e">Max&lt;/span>(&lt;span style="color:#ae81ff">1&lt;/span>, float64(&lt;span style="color:#a6e22e">originalReadyPodsCount&lt;/span>))
&lt;span style="color:#a6e22e">metricKey&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">types&lt;/span>.&lt;span style="color:#a6e22e">NamespacedName&lt;/span>{&lt;span style="color:#a6e22e">Namespace&lt;/span>: &lt;span style="color:#a6e22e">a&lt;/span>.&lt;span style="color:#a6e22e">namespace&lt;/span>, &lt;span style="color:#a6e22e">Name&lt;/span>: &lt;span style="color:#a6e22e">a&lt;/span>.&lt;span style="color:#a6e22e">revision&lt;/span>}
&lt;span style="color:#a6e22e">metricName&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">spec&lt;/span>.&lt;span style="color:#a6e22e">ScalingMetric&lt;/span>
&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">observedStableValue&lt;/span>, &lt;span style="color:#a6e22e">observedPanicValue&lt;/span> &lt;span style="color:#66d9ef">float64&lt;/span>
&lt;span style="color:#75715e">// 对应两种扩容模式：并发数RPS、每秒请求数concurrency
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">switch&lt;/span> &lt;span style="color:#a6e22e">spec&lt;/span>.&lt;span style="color:#a6e22e">ScalingMetric&lt;/span> {
&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#a6e22e">autoscaling&lt;/span>.&lt;span style="color:#a6e22e">RPS&lt;/span>:
&lt;span style="color:#a6e22e">observedStableValue&lt;/span>, &lt;span style="color:#a6e22e">observedPanicValue&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> = &lt;span style="color:#a6e22e">a&lt;/span>.&lt;span style="color:#a6e22e">metricClient&lt;/span>.&lt;span style="color:#a6e22e">StableAndPanicRPS&lt;/span>(&lt;span style="color:#a6e22e">metricKey&lt;/span>, &lt;span style="color:#a6e22e">now&lt;/span>)
&lt;span style="color:#66d9ef">default&lt;/span>:
&lt;span style="color:#a6e22e">metricName&lt;/span> = &lt;span style="color:#a6e22e">autoscaling&lt;/span>.&lt;span style="color:#a6e22e">Concurrency&lt;/span> &lt;span style="color:#75715e">// concurrency is used by default
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">observedStableValue&lt;/span>, &lt;span style="color:#a6e22e">observedPanicValue&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> = &lt;span style="color:#a6e22e">a&lt;/span>.&lt;span style="color:#a6e22e">metricClient&lt;/span>.&lt;span style="color:#a6e22e">StableAndPanicConcurrency&lt;/span>(&lt;span style="color:#a6e22e">metricKey&lt;/span>, &lt;span style="color:#a6e22e">now&lt;/span>)
}
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">errors&lt;/span>.&lt;span style="color:#a6e22e">Is&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span>, &lt;span style="color:#a6e22e">metrics&lt;/span>.&lt;span style="color:#a6e22e">ErrNoData&lt;/span>) {
&lt;span style="color:#a6e22e">logger&lt;/span>.&lt;span style="color:#a6e22e">Debug&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;No data to scale on yet&amp;#34;&lt;/span>)
} &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;span style="color:#a6e22e">logger&lt;/span>.&lt;span style="color:#a6e22e">Errorw&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Failed to obtain metrics&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">zap&lt;/span>.&lt;span style="color:#a6e22e">Error&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span>))
}
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">invalidSR&lt;/span>
}
&lt;span style="color:#75715e">// 根据获取的指标数据计算需要的pod数量
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// Make sure we don&amp;#39;t get stuck with the same number of pods, if the scale up rate
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// is too conservative and MaxScaleUp*RPC==RPC, so this permits us to grow at least by a single
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// pod if we need to scale up.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// E.g. MSUR=1.1, OCC=3, RPC=2, TV=1 =&amp;gt; OCC/TV=3, MSU=2.2 =&amp;gt; DSPC=2, while we definitely, need
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// 3 pods. See the unit test for this scenario in action.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">maxScaleUp&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">math&lt;/span>.&lt;span style="color:#a6e22e">Ceil&lt;/span>(&lt;span style="color:#a6e22e">spec&lt;/span>.&lt;span style="color:#a6e22e">MaxScaleUpRate&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#a6e22e">readyPodsCount&lt;/span>)
&lt;span style="color:#75715e">// Same logic, opposite math applies here.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">maxScaleDown&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#ae81ff">0.&lt;/span>
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">spec&lt;/span>.&lt;span style="color:#a6e22e">Reachable&lt;/span> {
&lt;span style="color:#a6e22e">maxScaleDown&lt;/span> = &lt;span style="color:#a6e22e">math&lt;/span>.&lt;span style="color:#a6e22e">Floor&lt;/span>(&lt;span style="color:#a6e22e">readyPodsCount&lt;/span> &lt;span style="color:#f92672">/&lt;/span> &lt;span style="color:#a6e22e">spec&lt;/span>.&lt;span style="color:#a6e22e">MaxScaleDownRate&lt;/span>)
}
&lt;span style="color:#a6e22e">dspc&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">math&lt;/span>.&lt;span style="color:#a6e22e">Ceil&lt;/span>(&lt;span style="color:#a6e22e">observedStableValue&lt;/span> &lt;span style="color:#f92672">/&lt;/span> &lt;span style="color:#a6e22e">spec&lt;/span>.&lt;span style="color:#a6e22e">TargetValue&lt;/span>)
&lt;span style="color:#a6e22e">dppc&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">math&lt;/span>.&lt;span style="color:#a6e22e">Ceil&lt;/span>(&lt;span style="color:#a6e22e">observedPanicValue&lt;/span> &lt;span style="color:#f92672">/&lt;/span> &lt;span style="color:#a6e22e">spec&lt;/span>.&lt;span style="color:#a6e22e">TargetValue&lt;/span>)
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">debugEnabled&lt;/span> {
&lt;span style="color:#a6e22e">desugared&lt;/span>.&lt;span style="color:#a6e22e">Debug&lt;/span>(
&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Sprintf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;For metric %s observed values: stable = %0.3f; panic = %0.3f; target = %0.3f &amp;#34;&lt;/span>&lt;span style="color:#f92672">+&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;Desired StablePodCount = %0.0f, PanicPodCount = %0.0f, ReadyEndpointCount = %d, MaxScaleUp = %0.0f, MaxScaleDown = %0.0f&amp;#34;&lt;/span>,
&lt;span style="color:#a6e22e">metricName&lt;/span>, &lt;span style="color:#a6e22e">observedStableValue&lt;/span>, &lt;span style="color:#a6e22e">observedPanicValue&lt;/span>, &lt;span style="color:#a6e22e">spec&lt;/span>.&lt;span style="color:#a6e22e">TargetValue&lt;/span>,
&lt;span style="color:#a6e22e">dspc&lt;/span>, &lt;span style="color:#a6e22e">dppc&lt;/span>, &lt;span style="color:#a6e22e">originalReadyPodsCount&lt;/span>, &lt;span style="color:#a6e22e">maxScaleUp&lt;/span>, &lt;span style="color:#a6e22e">maxScaleDown&lt;/span>))
}
&lt;span style="color:#75715e">// We want to keep desired pod count in the [maxScaleDown, maxScaleUp] range.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">desiredStablePodCount&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> int32(&lt;span style="color:#a6e22e">math&lt;/span>.&lt;span style="color:#a6e22e">Min&lt;/span>(&lt;span style="color:#a6e22e">math&lt;/span>.&lt;span style="color:#a6e22e">Max&lt;/span>(&lt;span style="color:#a6e22e">dspc&lt;/span>, &lt;span style="color:#a6e22e">maxScaleDown&lt;/span>), &lt;span style="color:#a6e22e">maxScaleUp&lt;/span>))
&lt;span style="color:#a6e22e">desiredPanicPodCount&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> int32(&lt;span style="color:#a6e22e">math&lt;/span>.&lt;span style="color:#a6e22e">Min&lt;/span>(&lt;span style="color:#a6e22e">math&lt;/span>.&lt;span style="color:#a6e22e">Max&lt;/span>(&lt;span style="color:#a6e22e">dppc&lt;/span>, &lt;span style="color:#a6e22e">maxScaleDown&lt;/span>), &lt;span style="color:#a6e22e">maxScaleUp&lt;/span>))
&lt;span style="color:#a6e22e">isOverPanicThreshold&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">dppc&lt;/span>&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#a6e22e">readyPodsCount&lt;/span> &lt;span style="color:#f92672">&amp;gt;=&lt;/span> &lt;span style="color:#a6e22e">spec&lt;/span>.&lt;span style="color:#a6e22e">PanicThreshold&lt;/span>
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">a&lt;/span>.&lt;span style="color:#a6e22e">panicTime&lt;/span>.&lt;span style="color:#a6e22e">IsZero&lt;/span>() &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#a6e22e">isOverPanicThreshold&lt;/span> {
&lt;span style="color:#75715e">// Begin panicking when we cross the threshold in the panic window.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">logger&lt;/span>.&lt;span style="color:#a6e22e">Info&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;PANICKING.&amp;#34;&lt;/span>)
&lt;span style="color:#a6e22e">a&lt;/span>.&lt;span style="color:#a6e22e">panicTime&lt;/span> = &lt;span style="color:#a6e22e">now&lt;/span>
&lt;span style="color:#a6e22e">pkgmetrics&lt;/span>.&lt;span style="color:#a6e22e">Record&lt;/span>(&lt;span style="color:#a6e22e">a&lt;/span>.&lt;span style="color:#a6e22e">reporterCtx&lt;/span>, &lt;span style="color:#a6e22e">panicM&lt;/span>.&lt;span style="color:#a6e22e">M&lt;/span>(&lt;span style="color:#ae81ff">1&lt;/span>))
} &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">isOverPanicThreshold&lt;/span> {
&lt;span style="color:#75715e">// If we&amp;#39;re still over panic threshold right now — extend the panic window.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">a&lt;/span>.&lt;span style="color:#a6e22e">panicTime&lt;/span> = &lt;span style="color:#a6e22e">now&lt;/span>
} &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> !&lt;span style="color:#a6e22e">a&lt;/span>.&lt;span style="color:#a6e22e">panicTime&lt;/span>.&lt;span style="color:#a6e22e">IsZero&lt;/span>() &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> !&lt;span style="color:#a6e22e">isOverPanicThreshold&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#a6e22e">a&lt;/span>.&lt;span style="color:#a6e22e">panicTime&lt;/span>.&lt;span style="color:#a6e22e">Add&lt;/span>(&lt;span style="color:#a6e22e">spec&lt;/span>.&lt;span style="color:#a6e22e">StableWindow&lt;/span>).&lt;span style="color:#a6e22e">Before&lt;/span>(&lt;span style="color:#a6e22e">now&lt;/span>) {
&lt;span style="color:#75715e">// Stop panicking after the surge has made its way into the stable metric.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">logger&lt;/span>.&lt;span style="color:#a6e22e">Info&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Un-panicking.&amp;#34;&lt;/span>)
&lt;span style="color:#a6e22e">a&lt;/span>.&lt;span style="color:#a6e22e">panicTime&lt;/span> = &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Time&lt;/span>{}
&lt;span style="color:#a6e22e">a&lt;/span>.&lt;span style="color:#a6e22e">maxPanicPods&lt;/span> = &lt;span style="color:#ae81ff">0&lt;/span>
&lt;span style="color:#a6e22e">pkgmetrics&lt;/span>.&lt;span style="color:#a6e22e">Record&lt;/span>(&lt;span style="color:#a6e22e">a&lt;/span>.&lt;span style="color:#a6e22e">reporterCtx&lt;/span>, &lt;span style="color:#a6e22e">panicM&lt;/span>.&lt;span style="color:#a6e22e">M&lt;/span>(&lt;span style="color:#ae81ff">0&lt;/span>))
}
&lt;span style="color:#a6e22e">desiredPodCount&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">desiredStablePodCount&lt;/span>
&lt;span style="color:#66d9ef">if&lt;/span> !&lt;span style="color:#a6e22e">a&lt;/span>.&lt;span style="color:#a6e22e">panicTime&lt;/span>.&lt;span style="color:#a6e22e">IsZero&lt;/span>() {
&lt;span style="color:#75715e">// In some edgecases stable window metric might be larger
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// than panic one. And we should provision for stable as for panic,
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// so pick the larger of the two.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">desiredPodCount&lt;/span> &amp;lt; &lt;span style="color:#a6e22e">desiredPanicPodCount&lt;/span> {
&lt;span style="color:#a6e22e">desiredPodCount&lt;/span> = &lt;span style="color:#a6e22e">desiredPanicPodCount&lt;/span>
}
&lt;span style="color:#a6e22e">logger&lt;/span>.&lt;span style="color:#a6e22e">Debug&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Operating in panic mode.&amp;#34;&lt;/span>)
&lt;span style="color:#75715e">// We do not scale down while in panic mode. Only increases will be applied.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">desiredPodCount&lt;/span> &amp;gt; &lt;span style="color:#a6e22e">a&lt;/span>.&lt;span style="color:#a6e22e">maxPanicPods&lt;/span> {
&lt;span style="color:#a6e22e">logger&lt;/span>.&lt;span style="color:#a6e22e">Infof&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Increasing pods count from %d to %d.&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">originalReadyPodsCount&lt;/span>, &lt;span style="color:#a6e22e">desiredPodCount&lt;/span>)
&lt;span style="color:#a6e22e">a&lt;/span>.&lt;span style="color:#a6e22e">maxPanicPods&lt;/span> = &lt;span style="color:#a6e22e">desiredPodCount&lt;/span>
} &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">desiredPodCount&lt;/span> &amp;lt; &lt;span style="color:#a6e22e">a&lt;/span>.&lt;span style="color:#a6e22e">maxPanicPods&lt;/span> {
&lt;span style="color:#a6e22e">logger&lt;/span>.&lt;span style="color:#a6e22e">Infof&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Skipping pod count decrease from %d to %d.&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">a&lt;/span>.&lt;span style="color:#a6e22e">maxPanicPods&lt;/span>, &lt;span style="color:#a6e22e">desiredPodCount&lt;/span>)
}
&lt;span style="color:#a6e22e">desiredPodCount&lt;/span> = &lt;span style="color:#a6e22e">a&lt;/span>.&lt;span style="color:#a6e22e">maxPanicPods&lt;/span>
} &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;span style="color:#a6e22e">logger&lt;/span>.&lt;span style="color:#a6e22e">Debug&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Operating in stable mode.&amp;#34;&lt;/span>)
}
&lt;span style="color:#75715e">// Delay scale down decisions, if a ScaleDownDelay was specified.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// We only do this if there&amp;#39;s a non-nil delayWindow because although a
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// one-element delay window is _almost_ the same as no delay at all, it is
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// not the same in the case where two Scale()s happen in the same time
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// interval (because the largest will be picked rather than the most recent
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// in that case).
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">a&lt;/span>.&lt;span style="color:#a6e22e">delayWindow&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;span style="color:#a6e22e">a&lt;/span>.&lt;span style="color:#a6e22e">delayWindow&lt;/span>.&lt;span style="color:#a6e22e">Record&lt;/span>(&lt;span style="color:#a6e22e">now&lt;/span>, &lt;span style="color:#a6e22e">desiredPodCount&lt;/span>)
&lt;span style="color:#a6e22e">delayedPodCount&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">a&lt;/span>.&lt;span style="color:#a6e22e">delayWindow&lt;/span>.&lt;span style="color:#a6e22e">Current&lt;/span>()
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">delayedPodCount&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#a6e22e">desiredPodCount&lt;/span> {
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">debugEnabled&lt;/span> {
&lt;span style="color:#a6e22e">desugared&lt;/span>.&lt;span style="color:#a6e22e">Debug&lt;/span>(
&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Sprintf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Delaying scale to %d, staying at %d&amp;#34;&lt;/span>,
&lt;span style="color:#a6e22e">desiredPodCount&lt;/span>, &lt;span style="color:#a6e22e">delayedPodCount&lt;/span>))
}
&lt;span style="color:#a6e22e">desiredPodCount&lt;/span> = &lt;span style="color:#a6e22e">delayedPodCount&lt;/span>
}
}
&lt;span style="color:#75715e">// Compute excess burst capacity
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">//
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// the excess burst capacity is based on panic value, since we don&amp;#39;t want to
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// be making knee-jerk decisions about Activator in the request path.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// Negative EBC means that the deployment does not have enough capacity to serve
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// the desired burst off hand.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// EBC = TotCapacity - Cur#ReqInFlight - TargetBurstCapacity
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">excessBCF&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1.&lt;/span>
&lt;span style="color:#66d9ef">switch&lt;/span> {
&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#a6e22e">spec&lt;/span>.&lt;span style="color:#a6e22e">TargetBurstCapacity&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>:
&lt;span style="color:#a6e22e">excessBCF&lt;/span> = &lt;span style="color:#ae81ff">0&lt;/span>
&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#a6e22e">spec&lt;/span>.&lt;span style="color:#a6e22e">TargetBurstCapacity&lt;/span> &amp;gt; &lt;span style="color:#ae81ff">0&lt;/span>:
&lt;span style="color:#a6e22e">totCap&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> float64(&lt;span style="color:#a6e22e">originalReadyPodsCount&lt;/span>) &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#a6e22e">spec&lt;/span>.&lt;span style="color:#a6e22e">TotalValue&lt;/span>
&lt;span style="color:#a6e22e">excessBCF&lt;/span> = &lt;span style="color:#a6e22e">math&lt;/span>.&lt;span style="color:#a6e22e">Floor&lt;/span>(&lt;span style="color:#a6e22e">totCap&lt;/span> &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#a6e22e">spec&lt;/span>.&lt;span style="color:#a6e22e">TargetBurstCapacity&lt;/span> &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#a6e22e">observedPanicValue&lt;/span>)
}
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">debugEnabled&lt;/span> {
&lt;span style="color:#a6e22e">desugared&lt;/span>.&lt;span style="color:#a6e22e">Debug&lt;/span>(&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Sprintf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;PodCount=%d Total1PodCapacity=%0.3f ObsStableValue=%0.3f ObsPanicValue=%0.3f TargetBC=%0.3f ExcessBC=%0.3f&amp;#34;&lt;/span>,
&lt;span style="color:#a6e22e">originalReadyPodsCount&lt;/span>, &lt;span style="color:#a6e22e">spec&lt;/span>.&lt;span style="color:#a6e22e">TotalValue&lt;/span>, &lt;span style="color:#a6e22e">observedStableValue&lt;/span>,
&lt;span style="color:#a6e22e">observedPanicValue&lt;/span>, &lt;span style="color:#a6e22e">spec&lt;/span>.&lt;span style="color:#a6e22e">TargetBurstCapacity&lt;/span>, &lt;span style="color:#a6e22e">excessBCF&lt;/span>))
}
&lt;span style="color:#66d9ef">switch&lt;/span> &lt;span style="color:#a6e22e">spec&lt;/span>.&lt;span style="color:#a6e22e">ScalingMetric&lt;/span> {
&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#a6e22e">autoscaling&lt;/span>.&lt;span style="color:#a6e22e">RPS&lt;/span>:
&lt;span style="color:#a6e22e">pkgmetrics&lt;/span>.&lt;span style="color:#a6e22e">RecordBatch&lt;/span>(&lt;span style="color:#a6e22e">a&lt;/span>.&lt;span style="color:#a6e22e">reporterCtx&lt;/span>,
&lt;span style="color:#a6e22e">excessBurstCapacityM&lt;/span>.&lt;span style="color:#a6e22e">M&lt;/span>(&lt;span style="color:#a6e22e">excessBCF&lt;/span>),
&lt;span style="color:#a6e22e">desiredPodCountM&lt;/span>.&lt;span style="color:#a6e22e">M&lt;/span>(int64(&lt;span style="color:#a6e22e">desiredPodCount&lt;/span>)),
&lt;span style="color:#a6e22e">stableRPSM&lt;/span>.&lt;span style="color:#a6e22e">M&lt;/span>(&lt;span style="color:#a6e22e">observedStableValue&lt;/span>),
&lt;span style="color:#a6e22e">panicRPSM&lt;/span>.&lt;span style="color:#a6e22e">M&lt;/span>(&lt;span style="color:#a6e22e">observedStableValue&lt;/span>),
&lt;span style="color:#a6e22e">targetRPSM&lt;/span>.&lt;span style="color:#a6e22e">M&lt;/span>(&lt;span style="color:#a6e22e">spec&lt;/span>.&lt;span style="color:#a6e22e">TargetValue&lt;/span>),
)
&lt;span style="color:#66d9ef">default&lt;/span>:
&lt;span style="color:#a6e22e">pkgmetrics&lt;/span>.&lt;span style="color:#a6e22e">RecordBatch&lt;/span>(&lt;span style="color:#a6e22e">a&lt;/span>.&lt;span style="color:#a6e22e">reporterCtx&lt;/span>,
&lt;span style="color:#a6e22e">excessBurstCapacityM&lt;/span>.&lt;span style="color:#a6e22e">M&lt;/span>(&lt;span style="color:#a6e22e">excessBCF&lt;/span>),
&lt;span style="color:#a6e22e">desiredPodCountM&lt;/span>.&lt;span style="color:#a6e22e">M&lt;/span>(int64(&lt;span style="color:#a6e22e">desiredPodCount&lt;/span>)),
&lt;span style="color:#a6e22e">stableRequestConcurrencyM&lt;/span>.&lt;span style="color:#a6e22e">M&lt;/span>(&lt;span style="color:#a6e22e">observedStableValue&lt;/span>),
&lt;span style="color:#a6e22e">panicRequestConcurrencyM&lt;/span>.&lt;span style="color:#a6e22e">M&lt;/span>(&lt;span style="color:#a6e22e">observedPanicValue&lt;/span>),
&lt;span style="color:#a6e22e">targetRequestConcurrencyM&lt;/span>.&lt;span style="color:#a6e22e">M&lt;/span>(&lt;span style="color:#a6e22e">spec&lt;/span>.&lt;span style="color:#a6e22e">TargetValue&lt;/span>),
)
}
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">ScaleResult&lt;/span>{
&lt;span style="color:#a6e22e">DesiredPodCount&lt;/span>: &lt;span style="color:#a6e22e">desiredPodCount&lt;/span>,
&lt;span style="color:#a6e22e">ExcessBurstCapacity&lt;/span>: int32(&lt;span style="color:#a6e22e">excessBCF&lt;/span>),
&lt;span style="color:#a6e22e">ScaleValid&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>,
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>我们简单看下在计算出缩放信息后&lt;code>updateLatestScale&lt;/code>做的事情，这个函数的返回就是标志者是否要放到事件队列中触发下游的更新。这个函数的作用就是将副本信息放到&lt;code>sr.decider.Status&lt;/code>中。&lt;code>decider&lt;/code>看起来本来是一种k8s资源后来发现只需要存在内存中就可以了。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">sr&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">scalerRunner&lt;/span>) &lt;span style="color:#a6e22e">updateLatestScale&lt;/span>(&lt;span style="color:#a6e22e">sRes&lt;/span> &lt;span style="color:#a6e22e">ScaleResult&lt;/span>) &lt;span style="color:#66d9ef">bool&lt;/span> {
&lt;span style="color:#a6e22e">ret&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>
&lt;span style="color:#a6e22e">sr&lt;/span>.&lt;span style="color:#a6e22e">mux&lt;/span>.&lt;span style="color:#a6e22e">Lock&lt;/span>()
&lt;span style="color:#66d9ef">defer&lt;/span> &lt;span style="color:#a6e22e">sr&lt;/span>.&lt;span style="color:#a6e22e">mux&lt;/span>.&lt;span style="color:#a6e22e">Unlock&lt;/span>()
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">sr&lt;/span>.&lt;span style="color:#a6e22e">decider&lt;/span>.&lt;span style="color:#a6e22e">Status&lt;/span>.&lt;span style="color:#a6e22e">DesiredScale&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#a6e22e">sRes&lt;/span>.&lt;span style="color:#a6e22e">DesiredPodCount&lt;/span> {
&lt;span style="color:#a6e22e">sr&lt;/span>.&lt;span style="color:#a6e22e">decider&lt;/span>.&lt;span style="color:#a6e22e">Status&lt;/span>.&lt;span style="color:#a6e22e">DesiredScale&lt;/span> = &lt;span style="color:#a6e22e">sRes&lt;/span>.&lt;span style="color:#a6e22e">DesiredPodCount&lt;/span>
&lt;span style="color:#a6e22e">ret&lt;/span> = &lt;span style="color:#66d9ef">true&lt;/span>
}
&lt;span style="color:#75715e">// If sign has changed -- then we have to update KPA.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">ret&lt;/span> = &lt;span style="color:#a6e22e">ret&lt;/span> &lt;span style="color:#f92672">||&lt;/span> !&lt;span style="color:#a6e22e">sameSign&lt;/span>(&lt;span style="color:#a6e22e">sr&lt;/span>.&lt;span style="color:#a6e22e">decider&lt;/span>.&lt;span style="color:#a6e22e">Status&lt;/span>.&lt;span style="color:#a6e22e">ExcessBurstCapacity&lt;/span>, &lt;span style="color:#a6e22e">sRes&lt;/span>.&lt;span style="color:#a6e22e">ExcessBurstCapacity&lt;/span>)
&lt;span style="color:#75715e">// Update with the latest calculation anyway.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">sr&lt;/span>.&lt;span style="color:#a6e22e">decider&lt;/span>.&lt;span style="color:#a6e22e">Status&lt;/span>.&lt;span style="color:#a6e22e">ExcessBurstCapacity&lt;/span> = &lt;span style="color:#a6e22e">sRes&lt;/span>.&lt;span style="color:#a6e22e">ExcessBurstCapacity&lt;/span>
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">ret&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后调用Inform函数，这里的watcher函数就是将此事件通知到workQueue来进行后续处理。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#75715e">// Inform sends an update to the registered watcher function, if it is set.
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">m&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">MultiScaler&lt;/span>) &lt;span style="color:#a6e22e">Inform&lt;/span>(&lt;span style="color:#a6e22e">event&lt;/span> &lt;span style="color:#a6e22e">types&lt;/span>.&lt;span style="color:#a6e22e">NamespacedName&lt;/span>) &lt;span style="color:#66d9ef">bool&lt;/span> {
&lt;span style="color:#a6e22e">m&lt;/span>.&lt;span style="color:#a6e22e">watcherMutex&lt;/span>.&lt;span style="color:#a6e22e">RLock&lt;/span>()
&lt;span style="color:#66d9ef">defer&lt;/span> &lt;span style="color:#a6e22e">m&lt;/span>.&lt;span style="color:#a6e22e">watcherMutex&lt;/span>.&lt;span style="color:#a6e22e">RUnlock&lt;/span>()
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">m&lt;/span>.&lt;span style="color:#a6e22e">watcher&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;span style="color:#a6e22e">m&lt;/span>.&lt;span style="color:#a6e22e">watcher&lt;/span>(&lt;span style="color:#a6e22e">event&lt;/span>)
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>
}
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>
}
&lt;span style="color:#75715e">// 上面函数中的m.watcher就是对应此函数，在pkg/reconciler/autoscaling/kpa/controller.go文件`NewController`函数中被赋值的
&lt;/span>&lt;span style="color:#75715e">// EnqueueKey takes a namespace/name string and puts it onto the work queue.
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Impl&lt;/span>) &lt;span style="color:#a6e22e">EnqueueKey&lt;/span>(&lt;span style="color:#a6e22e">key&lt;/span> &lt;span style="color:#a6e22e">types&lt;/span>.&lt;span style="color:#a6e22e">NamespacedName&lt;/span>) {
&lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">workQueue&lt;/span>.&lt;span style="color:#a6e22e">Add&lt;/span>(&lt;span style="color:#a6e22e">key&lt;/span>)
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">logger&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">logger&lt;/span>.&lt;span style="color:#a6e22e">Desugar&lt;/span>(); &lt;span style="color:#a6e22e">logger&lt;/span>.&lt;span style="color:#a6e22e">Core&lt;/span>().&lt;span style="color:#a6e22e">Enabled&lt;/span>(&lt;span style="color:#a6e22e">zapcore&lt;/span>.&lt;span style="color:#a6e22e">DebugLevel&lt;/span>) {
&lt;span style="color:#a6e22e">logger&lt;/span>.&lt;span style="color:#a6e22e">Debug&lt;/span>(&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Sprintf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Adding to queue %s (depth: %d)&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">safeKey&lt;/span>(&lt;span style="color:#a6e22e">key&lt;/span>), &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">workQueue&lt;/span>.&lt;span style="color:#a6e22e">Len&lt;/span>()),
&lt;span style="color:#a6e22e">zap&lt;/span>.&lt;span style="color:#a6e22e">String&lt;/span>(&lt;span style="color:#a6e22e">logkey&lt;/span>.&lt;span style="color:#a6e22e">Key&lt;/span>, &lt;span style="color:#a6e22e">key&lt;/span>.&lt;span style="color:#a6e22e">String&lt;/span>()))
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Worker queue的内容最终会在processNextWorkItem函数中消费。这个函数就是一个集散中心是个通用的函数，每个crd都会有一个对应的controller实例，这里核心就是对&lt;code>c.Reconciler.Reconcile&lt;/code>函数的调用，这个函数会根据具体情况决定后续执行&lt;code>ReconcileKind&lt;/code>还是销毁后的清理还是观察。在当前情况下会转到kpa对应的&lt;code>ReconcileKind&lt;/code>函数。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#75715e">// processNextWorkItem will read a single work item off the workqueue and
&lt;/span>&lt;span style="color:#75715e">// attempt to process it, by calling Reconcile on our Reconciler.
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Impl&lt;/span>) &lt;span style="color:#a6e22e">processNextWorkItem&lt;/span>() &lt;span style="color:#66d9ef">bool&lt;/span> {
&lt;span style="color:#a6e22e">obj&lt;/span>, &lt;span style="color:#a6e22e">shutdown&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">workQueue&lt;/span>.&lt;span style="color:#a6e22e">Get&lt;/span>()
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">shutdown&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>
}
&lt;span style="color:#a6e22e">key&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">obj&lt;/span>.(&lt;span style="color:#a6e22e">types&lt;/span>.&lt;span style="color:#a6e22e">NamespacedName&lt;/span>)
&lt;span style="color:#a6e22e">keyStr&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">safeKey&lt;/span>(&lt;span style="color:#a6e22e">key&lt;/span>)
&lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">logger&lt;/span>.&lt;span style="color:#a6e22e">Debugf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Processing from queue %s (depth: %d)&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">safeKey&lt;/span>(&lt;span style="color:#a6e22e">key&lt;/span>), &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">workQueue&lt;/span>.&lt;span style="color:#a6e22e">Len&lt;/span>())
&lt;span style="color:#a6e22e">startTime&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Now&lt;/span>()
&lt;span style="color:#75715e">// Send the metrics for the current queue depth
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">statsReporter&lt;/span>.&lt;span style="color:#a6e22e">ReportQueueDepth&lt;/span>(int64(&lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">workQueue&lt;/span>.&lt;span style="color:#a6e22e">Len&lt;/span>()))
&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#66d9ef">error&lt;/span>
&lt;span style="color:#66d9ef">defer&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>() {
&lt;span style="color:#a6e22e">status&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">trueString&lt;/span>
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;span style="color:#a6e22e">status&lt;/span> = &lt;span style="color:#a6e22e">falseString&lt;/span>
}
&lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">statsReporter&lt;/span>.&lt;span style="color:#a6e22e">ReportReconcile&lt;/span>(&lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Since&lt;/span>(&lt;span style="color:#a6e22e">startTime&lt;/span>), &lt;span style="color:#a6e22e">status&lt;/span>, &lt;span style="color:#a6e22e">key&lt;/span>)
&lt;span style="color:#75715e">// We call Done here so the workqueue knows we have finished
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// processing this item. We also must remember to call Forget if
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// reconcile succeeds. If a transient error occurs, we do not call
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// Forget and put the item back to the queue with an increased
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// delay.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">workQueue&lt;/span>.&lt;span style="color:#a6e22e">Done&lt;/span>(&lt;span style="color:#a6e22e">key&lt;/span>)
}()
&lt;span style="color:#75715e">// Embed the key into the logger and attach that to the context we pass
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// to the Reconciler.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">logger&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">logger&lt;/span>.&lt;span style="color:#a6e22e">With&lt;/span>(&lt;span style="color:#a6e22e">zap&lt;/span>.&lt;span style="color:#a6e22e">String&lt;/span>(&lt;span style="color:#a6e22e">logkey&lt;/span>.&lt;span style="color:#a6e22e">TraceID&lt;/span>, &lt;span style="color:#a6e22e">uuid&lt;/span>.&lt;span style="color:#a6e22e">NewString&lt;/span>()), &lt;span style="color:#a6e22e">zap&lt;/span>.&lt;span style="color:#a6e22e">String&lt;/span>(&lt;span style="color:#a6e22e">logkey&lt;/span>.&lt;span style="color:#a6e22e">Key&lt;/span>, &lt;span style="color:#a6e22e">keyStr&lt;/span>))
&lt;span style="color:#a6e22e">ctx&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">logging&lt;/span>.&lt;span style="color:#a6e22e">WithLogger&lt;/span>(&lt;span style="color:#a6e22e">context&lt;/span>.&lt;span style="color:#a6e22e">Background&lt;/span>(), &lt;span style="color:#a6e22e">logger&lt;/span>)
&lt;span style="color:#75715e">// Run Reconcile, passing it the namespace/name string of the
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// resource to be synced.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// 这个函数主要是根据节点是否是leader及是否是删除事件决定需要应用的函数是什么
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> = &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">Reconciler&lt;/span>.&lt;span style="color:#a6e22e">Reconcile&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>, &lt;span style="color:#a6e22e">keyStr&lt;/span>); &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">handleErr&lt;/span>(&lt;span style="color:#a6e22e">logger&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>, &lt;span style="color:#a6e22e">key&lt;/span>, &lt;span style="color:#a6e22e">startTime&lt;/span>)
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>
}
&lt;span style="color:#75715e">// Finally, if no error occurs we Forget this item so it does not
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// have any delay when another change happens.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">workQueue&lt;/span>.&lt;span style="color:#a6e22e">Forget&lt;/span>(&lt;span style="color:#a6e22e">key&lt;/span>)
&lt;span style="color:#a6e22e">logger&lt;/span>.&lt;span style="color:#a6e22e">Infow&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Reconcile succeeded&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">zap&lt;/span>.&lt;span style="color:#a6e22e">Duration&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;duration&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Since&lt;/span>(&lt;span style="color:#a6e22e">startTime&lt;/span>)))
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>后续会调用kpa（以实际缩放类型为准，如果缩放类型是kpa的话）的&lt;code>ReconcileKind&lt;/code>，这个函数比较长，我们划一下重点：&lt;code>ReconcileSKS&lt;/code>、&lt;code>reconcileDecider&lt;/code>、&lt;code>ReconcileMetric&lt;/code>、&lt;code>want, err := c.scaler.scale(ctx, pa, sks, decider.Status.DesiredScale)&lt;/code>、&lt;code>computeStatus&lt;/code>.其中 &lt;code>ReconcileSKS&lt;/code>、&lt;code>reconcileDecider&lt;/code>、&lt;code>ReconcileMetric&lt;/code>都是对对应crd的更新，只有一个例外Decider它不是个实实在在创建到k8s的crd。其中&lt;code>computeStatus&lt;/code>其实也是对crd的更新，只不过是更新&lt;code>PodAutoscaler&lt;/code>.那么到目前还没有提到的&lt;code>want, err := c.scaler.scale(ctx, pa, sks, decider.Status.DesiredScale)&lt;/code>函数就是做了实际对deployment进行缩放的逻辑。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Reconciler&lt;/span>) &lt;span style="color:#a6e22e">ReconcileKind&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span> &lt;span style="color:#a6e22e">context&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>, &lt;span style="color:#a6e22e">pa&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">autoscalingv1alpha1&lt;/span>.&lt;span style="color:#a6e22e">PodAutoscaler&lt;/span>) &lt;span style="color:#a6e22e">pkgreconciler&lt;/span>.&lt;span style="color:#a6e22e">Event&lt;/span> {
&lt;span style="color:#a6e22e">ctx&lt;/span>, &lt;span style="color:#a6e22e">cancel&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">context&lt;/span>.&lt;span style="color:#a6e22e">WithTimeout&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>, &lt;span style="color:#ae81ff">10&lt;/span>&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Second&lt;/span>)
&lt;span style="color:#66d9ef">defer&lt;/span> &lt;span style="color:#a6e22e">cancel&lt;/span>()
&lt;span style="color:#a6e22e">logger&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">logging&lt;/span>.&lt;span style="color:#a6e22e">FromContext&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>)
&lt;span style="color:#75715e">// We need the SKS object in order to optimize scale to zero
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// performance. It is OK if SKS is nil at this point.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">sksName&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">anames&lt;/span>.&lt;span style="color:#a6e22e">SKS&lt;/span>(&lt;span style="color:#a6e22e">pa&lt;/span>.&lt;span style="color:#a6e22e">Name&lt;/span>)
&lt;span style="color:#a6e22e">sks&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">SKSLister&lt;/span>.&lt;span style="color:#a6e22e">ServerlessServices&lt;/span>(&lt;span style="color:#a6e22e">pa&lt;/span>.&lt;span style="color:#a6e22e">Namespace&lt;/span>).&lt;span style="color:#a6e22e">Get&lt;/span>(&lt;span style="color:#a6e22e">sksName&lt;/span>)
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> !&lt;span style="color:#a6e22e">errors&lt;/span>.&lt;span style="color:#a6e22e">IsNotFound&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span>) {
&lt;span style="color:#a6e22e">logger&lt;/span>.&lt;span style="color:#a6e22e">Warnw&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Error retrieving SKS for Scaler&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">zap&lt;/span>.&lt;span style="color:#a6e22e">Error&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span>))
}
&lt;span style="color:#75715e">// Having an SKS and its PrivateServiceName is a prerequisite for all upcoming steps.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">sks&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> &lt;span style="color:#f92672">||&lt;/span> &lt;span style="color:#a6e22e">sks&lt;/span>.&lt;span style="color:#a6e22e">Status&lt;/span>.&lt;span style="color:#a6e22e">PrivateServiceName&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span> {
&lt;span style="color:#75715e">// Before we can reconcile decider and get real number of activators
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// we start with default of 2.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> = &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">ReconcileSKS&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>, &lt;span style="color:#a6e22e">pa&lt;/span>, &lt;span style="color:#a6e22e">nv1alpha1&lt;/span>.&lt;span style="color:#a6e22e">SKSOperationModeServe&lt;/span>, &lt;span style="color:#a6e22e">minActivators&lt;/span>); &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Errorf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;error reconciling SKS: %w&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>)
}
&lt;span style="color:#a6e22e">pa&lt;/span>.&lt;span style="color:#a6e22e">Status&lt;/span>.&lt;span style="color:#a6e22e">MarkSKSNotReady&lt;/span>(&lt;span style="color:#a6e22e">noPrivateServiceName&lt;/span>) &lt;span style="color:#75715e">// In both cases this is true.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">computeStatus&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>, &lt;span style="color:#a6e22e">pa&lt;/span>, &lt;span style="color:#a6e22e">podCounts&lt;/span>{&lt;span style="color:#a6e22e">want&lt;/span>: &lt;span style="color:#a6e22e">scaleUnknown&lt;/span>}, &lt;span style="color:#a6e22e">logger&lt;/span>)
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>
}
&lt;span style="color:#a6e22e">pa&lt;/span>.&lt;span style="color:#a6e22e">Status&lt;/span>.&lt;span style="color:#a6e22e">MetricsServiceName&lt;/span> = &lt;span style="color:#a6e22e">sks&lt;/span>.&lt;span style="color:#a6e22e">Status&lt;/span>.&lt;span style="color:#a6e22e">PrivateServiceName&lt;/span>
&lt;span style="color:#a6e22e">decider&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">reconcileDecider&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>, &lt;span style="color:#a6e22e">pa&lt;/span>)
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Errorf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;error reconciling Decider: %w&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>)
}
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">ReconcileMetric&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>, &lt;span style="color:#a6e22e">pa&lt;/span>, &lt;span style="color:#a6e22e">resolveScrapeTarget&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>, &lt;span style="color:#a6e22e">pa&lt;/span>)); &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Errorf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;error reconciling Metric: %w&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>)
}
&lt;span style="color:#75715e">// Get the appropriate current scale from the metric, and right size
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// the scaleTargetRef based on it.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">want&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">scaler&lt;/span>.&lt;span style="color:#a6e22e">scale&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>, &lt;span style="color:#a6e22e">pa&lt;/span>, &lt;span style="color:#a6e22e">sks&lt;/span>, &lt;span style="color:#a6e22e">decider&lt;/span>.&lt;span style="color:#a6e22e">Status&lt;/span>.&lt;span style="color:#a6e22e">DesiredScale&lt;/span>)
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Errorf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;error scaling target: %w&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>)
}
&lt;span style="color:#75715e">// 这里开始计算sks的模式应该是什么，当pod正常的时候就serve模式。模式代表的含义？
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">mode&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">nv1alpha1&lt;/span>.&lt;span style="color:#a6e22e">SKSOperationModeServe&lt;/span>
&lt;span style="color:#75715e">// We put activator in the serving path in the following cases:
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// 1. The revision is scaled to 0:
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// a. want == 0
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// b. want == -1 &amp;amp;&amp;amp; PA is inactive (Autoscaler has no previous knowledge of
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// this revision, e.g. after a restart) but PA status is inactive (it was
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// already scaled to 0).
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// 2. The excess burst capacity is negative.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">want&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#f92672">||&lt;/span> &lt;span style="color:#a6e22e">decider&lt;/span>.&lt;span style="color:#a6e22e">Status&lt;/span>.&lt;span style="color:#a6e22e">ExcessBurstCapacity&lt;/span> &amp;lt; &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#f92672">||&lt;/span> &lt;span style="color:#a6e22e">want&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#a6e22e">scaleUnknown&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#a6e22e">pa&lt;/span>.&lt;span style="color:#a6e22e">Status&lt;/span>.&lt;span style="color:#a6e22e">IsInactive&lt;/span>() {
&lt;span style="color:#a6e22e">mode&lt;/span> = &lt;span style="color:#a6e22e">nv1alpha1&lt;/span>.&lt;span style="color:#a6e22e">SKSOperationModeProxy&lt;/span>
}
&lt;span style="color:#75715e">// 根据reversion label获取所有的pod，根据每个pod的状态计算每种状态的pod有多少个。
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// Compare the desired and observed resources to determine our situation.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">podCounter&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">resourceutil&lt;/span>.&lt;span style="color:#a6e22e">NewPodAccessor&lt;/span>(&lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">podsLister&lt;/span>, &lt;span style="color:#a6e22e">pa&lt;/span>.&lt;span style="color:#a6e22e">Namespace&lt;/span>, &lt;span style="color:#a6e22e">pa&lt;/span>.&lt;span style="color:#a6e22e">Labels&lt;/span>[&lt;span style="color:#a6e22e">serving&lt;/span>.&lt;span style="color:#a6e22e">RevisionLabelKey&lt;/span>])
&lt;span style="color:#a6e22e">ready&lt;/span>, &lt;span style="color:#a6e22e">notReady&lt;/span>, &lt;span style="color:#a6e22e">pending&lt;/span>, &lt;span style="color:#a6e22e">terminating&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">podCounter&lt;/span>.&lt;span style="color:#a6e22e">PodCountsByState&lt;/span>()
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Errorf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;error getting pod counts: %w&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>)
}
&lt;span style="color:#75715e">// numActivators就是activator的数量
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// Determine the amount of activators to put into the routing path.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">numActivators&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">computeNumActivators&lt;/span>(&lt;span style="color:#a6e22e">ready&lt;/span>, &lt;span style="color:#a6e22e">decider&lt;/span>)
&lt;span style="color:#a6e22e">logger&lt;/span>.&lt;span style="color:#a6e22e">Infof&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;SKS should be in %s mode: want = %d, ebc = %d, #act&amp;#39;s = %d PA Inactive? = %v&amp;#34;&lt;/span>,
&lt;span style="color:#a6e22e">mode&lt;/span>, &lt;span style="color:#a6e22e">want&lt;/span>, &lt;span style="color:#a6e22e">decider&lt;/span>.&lt;span style="color:#a6e22e">Status&lt;/span>.&lt;span style="color:#a6e22e">ExcessBurstCapacity&lt;/span>, &lt;span style="color:#a6e22e">numActivators&lt;/span>,
&lt;span style="color:#a6e22e">pa&lt;/span>.&lt;span style="color:#a6e22e">Status&lt;/span>.&lt;span style="color:#a6e22e">IsInactive&lt;/span>())
&lt;span style="color:#75715e">// 创建或者更新sks
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">sks&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> = &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">ReconcileSKS&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>, &lt;span style="color:#a6e22e">pa&lt;/span>, &lt;span style="color:#a6e22e">mode&lt;/span>, &lt;span style="color:#a6e22e">numActivators&lt;/span>)
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Errorf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;error reconciling SKS: %w&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>)
}
&lt;span style="color:#75715e">// Propagate service name.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">pa&lt;/span>.&lt;span style="color:#a6e22e">Status&lt;/span>.&lt;span style="color:#a6e22e">ServiceName&lt;/span> = &lt;span style="color:#a6e22e">sks&lt;/span>.&lt;span style="color:#a6e22e">Status&lt;/span>.&lt;span style="color:#a6e22e">ServiceName&lt;/span>
&lt;span style="color:#75715e">// If SKS is not ready — ensure we&amp;#39;re not becoming ready.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">sks&lt;/span>.&lt;span style="color:#a6e22e">IsReady&lt;/span>() {
&lt;span style="color:#a6e22e">logger&lt;/span>.&lt;span style="color:#a6e22e">Debug&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;SKS is ready, marking SKS status ready&amp;#34;&lt;/span>)
&lt;span style="color:#a6e22e">pa&lt;/span>.&lt;span style="color:#a6e22e">Status&lt;/span>.&lt;span style="color:#a6e22e">MarkSKSReady&lt;/span>()
} &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;span style="color:#a6e22e">logger&lt;/span>.&lt;span style="color:#a6e22e">Debug&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;SKS is not ready, marking SKS status not ready&amp;#34;&lt;/span>)
&lt;span style="color:#a6e22e">pa&lt;/span>.&lt;span style="color:#a6e22e">Status&lt;/span>.&lt;span style="color:#a6e22e">MarkSKSNotReady&lt;/span>(&lt;span style="color:#a6e22e">sks&lt;/span>.&lt;span style="color:#a6e22e">Status&lt;/span>.&lt;span style="color:#a6e22e">GetCondition&lt;/span>(&lt;span style="color:#a6e22e">nv1alpha1&lt;/span>.&lt;span style="color:#a6e22e">ServerlessServiceConditionReady&lt;/span>).&lt;span style="color:#a6e22e">GetMessage&lt;/span>())
}
&lt;span style="color:#a6e22e">logger&lt;/span>.&lt;span style="color:#a6e22e">Infof&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;PA scale got=%d, want=%d, desiredPods=%d ebc=%d&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">ready&lt;/span>, &lt;span style="color:#a6e22e">want&lt;/span>,
&lt;span style="color:#a6e22e">decider&lt;/span>.&lt;span style="color:#a6e22e">Status&lt;/span>.&lt;span style="color:#a6e22e">DesiredScale&lt;/span>, &lt;span style="color:#a6e22e">decider&lt;/span>.&lt;span style="color:#a6e22e">Status&lt;/span>.&lt;span style="color:#a6e22e">ExcessBurstCapacity&lt;/span>)
&lt;span style="color:#a6e22e">pc&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">podCounts&lt;/span>{
&lt;span style="color:#a6e22e">want&lt;/span>: int(&lt;span style="color:#a6e22e">want&lt;/span>),
&lt;span style="color:#a6e22e">ready&lt;/span>: &lt;span style="color:#a6e22e">ready&lt;/span>,
&lt;span style="color:#a6e22e">notReady&lt;/span>: &lt;span style="color:#a6e22e">notReady&lt;/span>,
&lt;span style="color:#a6e22e">pending&lt;/span>: &lt;span style="color:#a6e22e">pending&lt;/span>,
&lt;span style="color:#a6e22e">terminating&lt;/span>: &lt;span style="color:#a6e22e">terminating&lt;/span>,
}
&lt;span style="color:#a6e22e">logger&lt;/span>.&lt;span style="color:#a6e22e">Infof&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Observed pod counts=%#v&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">pc&lt;/span>)
&lt;span style="color:#a6e22e">computeStatus&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>, &lt;span style="color:#a6e22e">pa&lt;/span>, &lt;span style="color:#a6e22e">pc&lt;/span>, &lt;span style="color:#a6e22e">logger&lt;/span>)
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>ReconcileMetric&lt;/code>定义在pkg/reconciler/autoscaling/reconciler.go文件中。根据kpa和scaler配置计算出目标metrics的crd。在配置没有变更的情况下，不会有更新，所以这个函数在大多数情况下是不会变动的。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#75715e">// ReconcileMetric reconciles a metric instance out of the given PodAutoscaler to control metric collection.
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Base&lt;/span>) &lt;span style="color:#a6e22e">ReconcileMetric&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span> &lt;span style="color:#a6e22e">context&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>, &lt;span style="color:#a6e22e">pa&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">autoscalingv1alpha1&lt;/span>.&lt;span style="color:#a6e22e">PodAutoscaler&lt;/span>, &lt;span style="color:#a6e22e">metricSN&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) &lt;span style="color:#66d9ef">error&lt;/span> {
&lt;span style="color:#a6e22e">desiredMetric&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">resources&lt;/span>.&lt;span style="color:#a6e22e">MakeMetric&lt;/span>(&lt;span style="color:#a6e22e">pa&lt;/span>, &lt;span style="color:#a6e22e">metricSN&lt;/span>, &lt;span style="color:#a6e22e">config&lt;/span>.&lt;span style="color:#a6e22e">FromContext&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>).&lt;span style="color:#a6e22e">Autoscaler&lt;/span>)
&lt;span style="color:#a6e22e">metric&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">MetricLister&lt;/span>.&lt;span style="color:#a6e22e">Metrics&lt;/span>(&lt;span style="color:#a6e22e">desiredMetric&lt;/span>.&lt;span style="color:#a6e22e">Namespace&lt;/span>).&lt;span style="color:#a6e22e">Get&lt;/span>(&lt;span style="color:#a6e22e">desiredMetric&lt;/span>.&lt;span style="color:#a6e22e">Name&lt;/span>)
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">errors&lt;/span>.&lt;span style="color:#a6e22e">IsNotFound&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span>) {
&lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> = &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">Client&lt;/span>.&lt;span style="color:#a6e22e">AutoscalingV1alpha1&lt;/span>().&lt;span style="color:#a6e22e">Metrics&lt;/span>(&lt;span style="color:#a6e22e">desiredMetric&lt;/span>.&lt;span style="color:#a6e22e">Namespace&lt;/span>).&lt;span style="color:#a6e22e">Create&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>, &lt;span style="color:#a6e22e">desiredMetric&lt;/span>, &lt;span style="color:#a6e22e">metav1&lt;/span>.&lt;span style="color:#a6e22e">CreateOptions&lt;/span>{})
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Errorf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;error creating metric: %w&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>)
}
} &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Errorf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;error fetching metric: %w&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>)
} &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> !&lt;span style="color:#a6e22e">metav1&lt;/span>.&lt;span style="color:#a6e22e">IsControlledBy&lt;/span>(&lt;span style="color:#a6e22e">metric&lt;/span>, &lt;span style="color:#a6e22e">pa&lt;/span>) {
&lt;span style="color:#a6e22e">pa&lt;/span>.&lt;span style="color:#a6e22e">Status&lt;/span>.&lt;span style="color:#a6e22e">MarkResourceNotOwned&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Metric&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">desiredMetric&lt;/span>.&lt;span style="color:#a6e22e">Name&lt;/span>)
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Errorf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;PA: %s does not own Metric: %s&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">pa&lt;/span>.&lt;span style="color:#a6e22e">Name&lt;/span>, &lt;span style="color:#a6e22e">desiredMetric&lt;/span>.&lt;span style="color:#a6e22e">Name&lt;/span>)
} &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> !&lt;span style="color:#a6e22e">equality&lt;/span>.&lt;span style="color:#a6e22e">Semantic&lt;/span>.&lt;span style="color:#a6e22e">DeepEqual&lt;/span>(&lt;span style="color:#a6e22e">desiredMetric&lt;/span>.&lt;span style="color:#a6e22e">Spec&lt;/span>, &lt;span style="color:#a6e22e">metric&lt;/span>.&lt;span style="color:#a6e22e">Spec&lt;/span>) {
&lt;span style="color:#a6e22e">want&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">metric&lt;/span>.&lt;span style="color:#a6e22e">DeepCopy&lt;/span>()
&lt;span style="color:#a6e22e">want&lt;/span>.&lt;span style="color:#a6e22e">Spec&lt;/span> = &lt;span style="color:#a6e22e">desiredMetric&lt;/span>.&lt;span style="color:#a6e22e">Spec&lt;/span>
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> = &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">Client&lt;/span>.&lt;span style="color:#a6e22e">AutoscalingV1alpha1&lt;/span>().&lt;span style="color:#a6e22e">Metrics&lt;/span>(&lt;span style="color:#a6e22e">desiredMetric&lt;/span>.&lt;span style="color:#a6e22e">Namespace&lt;/span>).&lt;span style="color:#a6e22e">Update&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>, &lt;span style="color:#a6e22e">want&lt;/span>, &lt;span style="color:#a6e22e">metav1&lt;/span>.&lt;span style="color:#a6e22e">UpdateOptions&lt;/span>{}); &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Errorf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;error updating metric: %w&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>)
}
}
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>scale&lt;/code>定义在&lt;code>pkg/reconciler/autoscaling/kpa/scaler.go&lt;/code>中，功能是对目标进行缩放，主要是计算各种边界状态，并根据实际情况调用缩容到0和进行缩放的函数。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#75715e">// scale attempts to scale the given PA&amp;#39;s target reference to the desired scale.
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">ks&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">scaler&lt;/span>) &lt;span style="color:#a6e22e">scale&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span> &lt;span style="color:#a6e22e">context&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>, &lt;span style="color:#a6e22e">pa&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">autoscalingv1alpha1&lt;/span>.&lt;span style="color:#a6e22e">PodAutoscaler&lt;/span>, &lt;span style="color:#a6e22e">sks&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">nv1a1&lt;/span>.&lt;span style="color:#a6e22e">ServerlessService&lt;/span>, &lt;span style="color:#a6e22e">desiredScale&lt;/span> &lt;span style="color:#66d9ef">int32&lt;/span>) (&lt;span style="color:#66d9ef">int32&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>) {
&lt;span style="color:#a6e22e">asConfig&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">config&lt;/span>.&lt;span style="color:#a6e22e">FromContext&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>).&lt;span style="color:#a6e22e">Autoscaler&lt;/span>
&lt;span style="color:#a6e22e">logger&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">logging&lt;/span>.&lt;span style="color:#a6e22e">FromContext&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>)
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">desiredScale&lt;/span> &amp;lt; &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> !&lt;span style="color:#a6e22e">pa&lt;/span>.&lt;span style="color:#a6e22e">Status&lt;/span>.&lt;span style="color:#a6e22e">IsActivating&lt;/span>() {
&lt;span style="color:#a6e22e">logger&lt;/span>.&lt;span style="color:#a6e22e">Debug&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Metrics are not yet being collected.&amp;#34;&lt;/span>)
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">desiredScale&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>
}
&lt;span style="color:#a6e22e">min&lt;/span>, &lt;span style="color:#a6e22e">max&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">pa&lt;/span>.&lt;span style="color:#a6e22e">ScaleBounds&lt;/span>(&lt;span style="color:#a6e22e">asConfig&lt;/span>)
&lt;span style="color:#a6e22e">initialScale&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">kparesources&lt;/span>.&lt;span style="color:#a6e22e">GetInitialScale&lt;/span>(&lt;span style="color:#a6e22e">asConfig&lt;/span>, &lt;span style="color:#a6e22e">pa&lt;/span>)
&lt;span style="color:#75715e">// Log reachability as quoted string, since default value is &amp;#34;&amp;#34;.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">logger&lt;/span>.&lt;span style="color:#a6e22e">Debugf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;MinScale = %d, MaxScale = %d, InitialScale = %d, DesiredScale = %d Reachable = %q&amp;#34;&lt;/span>,
&lt;span style="color:#a6e22e">min&lt;/span>, &lt;span style="color:#a6e22e">max&lt;/span>, &lt;span style="color:#a6e22e">initialScale&lt;/span>, &lt;span style="color:#a6e22e">desiredScale&lt;/span>, &lt;span style="color:#a6e22e">pa&lt;/span>.&lt;span style="color:#a6e22e">Spec&lt;/span>.&lt;span style="color:#a6e22e">Reachability&lt;/span>)
&lt;span style="color:#75715e">// If initial scale has been attained, ignore the initialScale altogether.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">initialScale&lt;/span> &amp;gt; &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> !&lt;span style="color:#a6e22e">pa&lt;/span>.&lt;span style="color:#a6e22e">Status&lt;/span>.&lt;span style="color:#a6e22e">IsScaleTargetInitialized&lt;/span>() {
&lt;span style="color:#75715e">// Ignore initial scale if minScale &amp;gt;= initialScale.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">min&lt;/span> &amp;lt; &lt;span style="color:#a6e22e">initialScale&lt;/span> {
&lt;span style="color:#a6e22e">logger&lt;/span>.&lt;span style="color:#a6e22e">Debugf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Adjusting min to meet the initial scale: %d -&amp;gt; %d&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">min&lt;/span>, &lt;span style="color:#a6e22e">initialScale&lt;/span>)
}
&lt;span style="color:#a6e22e">min&lt;/span> = &lt;span style="color:#a6e22e">intMax&lt;/span>(&lt;span style="color:#a6e22e">initialScale&lt;/span>, &lt;span style="color:#a6e22e">min&lt;/span>)
}
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">newScale&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">applyBounds&lt;/span>(&lt;span style="color:#a6e22e">min&lt;/span>, &lt;span style="color:#a6e22e">max&lt;/span>, &lt;span style="color:#a6e22e">desiredScale&lt;/span>); &lt;span style="color:#a6e22e">newScale&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#a6e22e">desiredScale&lt;/span> {
&lt;span style="color:#a6e22e">logger&lt;/span>.&lt;span style="color:#a6e22e">Debugf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Adjusting desiredScale to meet the min and max bounds before applying: %d -&amp;gt; %d&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">desiredScale&lt;/span>, &lt;span style="color:#a6e22e">newScale&lt;/span>)
&lt;span style="color:#a6e22e">desiredScale&lt;/span> = &lt;span style="color:#a6e22e">newScale&lt;/span>
}
&lt;span style="color:#a6e22e">desiredScale&lt;/span>, &lt;span style="color:#a6e22e">shouldApplyScale&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">ks&lt;/span>.&lt;span style="color:#a6e22e">handleScaleToZero&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>, &lt;span style="color:#a6e22e">pa&lt;/span>, &lt;span style="color:#a6e22e">sks&lt;/span>, &lt;span style="color:#a6e22e">desiredScale&lt;/span>)
&lt;span style="color:#66d9ef">if&lt;/span> !&lt;span style="color:#a6e22e">shouldApplyScale&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">desiredScale&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>
}
&lt;span style="color:#75715e">// 获取deployment
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">ps&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">resources&lt;/span>.&lt;span style="color:#a6e22e">GetScaleResource&lt;/span>(&lt;span style="color:#a6e22e">pa&lt;/span>.&lt;span style="color:#a6e22e">Namespace&lt;/span>, &lt;span style="color:#a6e22e">pa&lt;/span>.&lt;span style="color:#a6e22e">Spec&lt;/span>.&lt;span style="color:#a6e22e">ScaleTargetRef&lt;/span>, &lt;span style="color:#a6e22e">ks&lt;/span>.&lt;span style="color:#a6e22e">listerFactory&lt;/span>)
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">desiredScale&lt;/span>, &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Errorf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;failed to get scale target %v: %w&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">pa&lt;/span>.&lt;span style="color:#a6e22e">Spec&lt;/span>.&lt;span style="color:#a6e22e">ScaleTargetRef&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>)
}
&lt;span style="color:#a6e22e">currentScale&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> int32(&lt;span style="color:#ae81ff">1&lt;/span>)
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">ps&lt;/span>.&lt;span style="color:#a6e22e">Spec&lt;/span>.&lt;span style="color:#a6e22e">Replicas&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;span style="color:#a6e22e">currentScale&lt;/span> = &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">ps&lt;/span>.&lt;span style="color:#a6e22e">Spec&lt;/span>.&lt;span style="color:#a6e22e">Replicas&lt;/span>
}
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">desiredScale&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#a6e22e">currentScale&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">desiredScale&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>
}
&lt;span style="color:#a6e22e">logger&lt;/span>.&lt;span style="color:#a6e22e">Infof&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Scaling from %d to %d&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">currentScale&lt;/span>, &lt;span style="color:#a6e22e">desiredScale&lt;/span>)
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">desiredScale&lt;/span>, &lt;span style="color:#a6e22e">ks&lt;/span>.&lt;span style="color:#a6e22e">applyScale&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>, &lt;span style="color:#a6e22e">pa&lt;/span>, &lt;span style="color:#a6e22e">desiredScale&lt;/span>, &lt;span style="color:#a6e22e">ps&lt;/span>)
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="对deployment副本数进行修改">对deployment副本数进行修改&lt;/h4>
&lt;p>执行缩容到0的逻辑，todo仔细看看需要缩容到0的时候的逻辑判断&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">ks&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">scaler&lt;/span>) &lt;span style="color:#a6e22e">handleScaleToZero&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span> &lt;span style="color:#a6e22e">context&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>, &lt;span style="color:#a6e22e">pa&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">autoscalingv1alpha1&lt;/span>.&lt;span style="color:#a6e22e">PodAutoscaler&lt;/span>,
&lt;span style="color:#a6e22e">sks&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">nv1a1&lt;/span>.&lt;span style="color:#a6e22e">ServerlessService&lt;/span>, &lt;span style="color:#a6e22e">desiredScale&lt;/span> &lt;span style="color:#66d9ef">int32&lt;/span>) (&lt;span style="color:#66d9ef">int32&lt;/span>, &lt;span style="color:#66d9ef">bool&lt;/span>) {
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">desiredScale&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">desiredScale&lt;/span>, &lt;span style="color:#66d9ef">true&lt;/span>
}
&lt;span style="color:#75715e">// We should only scale to zero when three of the following conditions are true:
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// a) enable-scale-to-zero from configmap is true
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// b) The PA has been active for at least the stable window, after which it
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// gets marked inactive, and
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// c) the PA has been backed by the Activator for at least the grace period
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// of time.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// Alternatively, if (a) and the revision did not succeed to activate in
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// `activationTimeout` time -- also scale it to 0.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">cfgs&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">config&lt;/span>.&lt;span style="color:#a6e22e">FromContext&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>)
&lt;span style="color:#a6e22e">cfgAS&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">cfgs&lt;/span>.&lt;span style="color:#a6e22e">Autoscaler&lt;/span>
&lt;span style="color:#66d9ef">if&lt;/span> !&lt;span style="color:#a6e22e">cfgAS&lt;/span>.&lt;span style="color:#a6e22e">EnableScaleToZero&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#66d9ef">true&lt;/span>
}
&lt;span style="color:#a6e22e">cfgD&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">cfgs&lt;/span>.&lt;span style="color:#a6e22e">Deployment&lt;/span>
&lt;span style="color:#a6e22e">activationTimeout&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">cfgD&lt;/span>.&lt;span style="color:#a6e22e">ProgressDeadline&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">activationTimeoutBuffer&lt;/span>
&lt;span style="color:#a6e22e">now&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Now&lt;/span>()
&lt;span style="color:#a6e22e">logger&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">logging&lt;/span>.&lt;span style="color:#a6e22e">FromContext&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>)
&lt;span style="color:#66d9ef">switch&lt;/span> {
&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#a6e22e">pa&lt;/span>.&lt;span style="color:#a6e22e">Status&lt;/span>.&lt;span style="color:#a6e22e">IsActivating&lt;/span>(): &lt;span style="color:#75715e">// Active=Unknown
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// If we are stuck activating for longer than our progress deadline, presume we cannot succeed and scale to 0.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">pa&lt;/span>.&lt;span style="color:#a6e22e">Status&lt;/span>.&lt;span style="color:#a6e22e">CanFailActivation&lt;/span>(&lt;span style="color:#a6e22e">now&lt;/span>, &lt;span style="color:#a6e22e">activationTimeout&lt;/span>) {
&lt;span style="color:#a6e22e">logger&lt;/span>.&lt;span style="color:#a6e22e">Info&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Activation has timed out after &amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">activationTimeout&lt;/span>)
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">desiredScale&lt;/span>, &lt;span style="color:#66d9ef">true&lt;/span>
}
&lt;span style="color:#a6e22e">ks&lt;/span>.&lt;span style="color:#a6e22e">enqueueCB&lt;/span>(&lt;span style="color:#a6e22e">pa&lt;/span>, &lt;span style="color:#a6e22e">activationTimeout&lt;/span>)
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">scaleUnknown&lt;/span>, &lt;span style="color:#66d9ef">false&lt;/span>
&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#a6e22e">pa&lt;/span>.&lt;span style="color:#a6e22e">Status&lt;/span>.&lt;span style="color:#a6e22e">IsActive&lt;/span>(): &lt;span style="color:#75715e">// Active=True
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// Don&amp;#39;t scale-to-zero if the PA is active
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// but return `(0, false)` to mark PA inactive, instead.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">sw&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">aresources&lt;/span>.&lt;span style="color:#a6e22e">StableWindow&lt;/span>(&lt;span style="color:#a6e22e">pa&lt;/span>, &lt;span style="color:#a6e22e">cfgAS&lt;/span>)
&lt;span style="color:#a6e22e">af&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">pa&lt;/span>.&lt;span style="color:#a6e22e">Status&lt;/span>.&lt;span style="color:#a6e22e">ActiveFor&lt;/span>(&lt;span style="color:#a6e22e">now&lt;/span>)
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">af&lt;/span> &lt;span style="color:#f92672">&amp;gt;=&lt;/span> &lt;span style="color:#a6e22e">sw&lt;/span> {
&lt;span style="color:#75715e">// If SKS is in proxy mode, then there is high probability
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// of SKS not changing its spec/status and thus not triggering
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// a new reconciliation of PA.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">sks&lt;/span>.&lt;span style="color:#a6e22e">Spec&lt;/span>.&lt;span style="color:#a6e22e">Mode&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#a6e22e">nv1a1&lt;/span>.&lt;span style="color:#a6e22e">SKSOperationModeProxy&lt;/span> {
&lt;span style="color:#a6e22e">logger&lt;/span>.&lt;span style="color:#a6e22e">Debug&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;SKS is already in proxy mode, auto-re-enqueue PA&amp;#34;&lt;/span>)
&lt;span style="color:#75715e">// Long enough to ensure current iteration is finished.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">ks&lt;/span>.&lt;span style="color:#a6e22e">enqueueCB&lt;/span>(&lt;span style="color:#a6e22e">pa&lt;/span>, &lt;span style="color:#ae81ff">3&lt;/span>&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Second&lt;/span>)
}
&lt;span style="color:#a6e22e">logger&lt;/span>.&lt;span style="color:#a6e22e">Info&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Can deactivate PA, was active for &amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">af&lt;/span>)
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">desiredScale&lt;/span>, &lt;span style="color:#66d9ef">false&lt;/span>
}
&lt;span style="color:#75715e">// Otherwise, scale down to at most 1 for the remainder of the idle period and then
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// reconcile PA again.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">logger&lt;/span>.&lt;span style="color:#a6e22e">Infof&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Sleeping additionally for %v before can scale to 0&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">sw&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#a6e22e">af&lt;/span>)
&lt;span style="color:#a6e22e">ks&lt;/span>.&lt;span style="color:#a6e22e">enqueueCB&lt;/span>(&lt;span style="color:#a6e22e">pa&lt;/span>, &lt;span style="color:#a6e22e">sw&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#a6e22e">af&lt;/span>)
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#66d9ef">true&lt;/span>
&lt;span style="color:#66d9ef">default&lt;/span>: &lt;span style="color:#75715e">// Active=False
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">var&lt;/span> (
&lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#66d9ef">error&lt;/span>
&lt;span style="color:#a6e22e">r&lt;/span> = &lt;span style="color:#66d9ef">true&lt;/span>
)
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">resolveTBC&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>, &lt;span style="color:#a6e22e">pa&lt;/span>) &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span> {
&lt;span style="color:#75715e">// if TBC is -1 activator is guaranteed to already be in the path.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// Otherwise, probe to make sure Activator is in path.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">r&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> = &lt;span style="color:#a6e22e">ks&lt;/span>.&lt;span style="color:#a6e22e">activatorProbe&lt;/span>(&lt;span style="color:#a6e22e">pa&lt;/span>, &lt;span style="color:#a6e22e">ks&lt;/span>.&lt;span style="color:#a6e22e">transport&lt;/span>)
&lt;span style="color:#a6e22e">logger&lt;/span>.&lt;span style="color:#a6e22e">Infof&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Probing activator = %v, err = %v&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">r&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>)
}
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">r&lt;/span> {
&lt;span style="color:#75715e">// This enforces that the revision has been backed by the Activator for at least
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// ScaleToZeroGracePeriod time.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// And at least ScaleToZeroPodRetentionPeriod since PA became inactive.
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#75715e">// Most conservative check, if it passes we&amp;#39;re good.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">lastPodTimeout&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">lastPodRetention&lt;/span>(&lt;span style="color:#a6e22e">pa&lt;/span>, &lt;span style="color:#a6e22e">cfgAS&lt;/span>)
&lt;span style="color:#a6e22e">lastPodMaxTimeout&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">durationMax&lt;/span>(&lt;span style="color:#a6e22e">cfgAS&lt;/span>.&lt;span style="color:#a6e22e">ScaleToZeroGracePeriod&lt;/span>, &lt;span style="color:#a6e22e">lastPodTimeout&lt;/span>)
&lt;span style="color:#75715e">// If we have been inactive for this long, we can scale to 0!
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">pa&lt;/span>.&lt;span style="color:#a6e22e">Status&lt;/span>.&lt;span style="color:#a6e22e">InactiveFor&lt;/span>(&lt;span style="color:#a6e22e">now&lt;/span>) &lt;span style="color:#f92672">&amp;gt;=&lt;/span> &lt;span style="color:#a6e22e">lastPodMaxTimeout&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">desiredScale&lt;/span>, &lt;span style="color:#66d9ef">true&lt;/span>
}
&lt;span style="color:#75715e">// Now check last pod retention timeout. Since it&amp;#39;s a hard deadline, regardless
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// of network programming state we should circle back after that time period.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">lastPodTimeout&lt;/span> &amp;gt; &lt;span style="color:#ae81ff">0&lt;/span> {
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">inactiveTime&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">pa&lt;/span>.&lt;span style="color:#a6e22e">Status&lt;/span>.&lt;span style="color:#a6e22e">InactiveFor&lt;/span>(&lt;span style="color:#a6e22e">now&lt;/span>); &lt;span style="color:#a6e22e">inactiveTime&lt;/span> &amp;lt; &lt;span style="color:#a6e22e">lastPodTimeout&lt;/span> {
&lt;span style="color:#a6e22e">logger&lt;/span>.&lt;span style="color:#a6e22e">Infof&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Can&amp;#39;t scale to 0; InactiveFor %v &amp;lt; ScaleToZeroPodRetentionPeriod = %v&amp;#34;&lt;/span>,
&lt;span style="color:#a6e22e">inactiveTime&lt;/span>, &lt;span style="color:#a6e22e">lastPodTimeout&lt;/span>)
&lt;span style="color:#a6e22e">ks&lt;/span>.&lt;span style="color:#a6e22e">enqueueCB&lt;/span>(&lt;span style="color:#a6e22e">pa&lt;/span>, &lt;span style="color:#a6e22e">lastPodTimeout&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#a6e22e">inactiveTime&lt;/span>)
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">desiredScale&lt;/span>, &lt;span style="color:#66d9ef">false&lt;/span>
}
&lt;span style="color:#a6e22e">logger&lt;/span>.&lt;span style="color:#a6e22e">Debug&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Last pod timeout satisfied&amp;#34;&lt;/span>)
}
&lt;span style="color:#75715e">// Otherwise check how long SKS was in proxy mode.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// Compute the difference between time we&amp;#39;ve been proxying with the timeout.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// If it&amp;#39;s positive, that&amp;#39;s the time we need to sleep, if negative -- we
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// can scale to zero.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">pf&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">sks&lt;/span>.&lt;span style="color:#a6e22e">Status&lt;/span>.&lt;span style="color:#a6e22e">ProxyFor&lt;/span>()
&lt;span style="color:#a6e22e">to&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">cfgAS&lt;/span>.&lt;span style="color:#a6e22e">ScaleToZeroGracePeriod&lt;/span> &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#a6e22e">pf&lt;/span>
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">to&lt;/span> &lt;span style="color:#f92672">&amp;lt;=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> {
&lt;span style="color:#a6e22e">logger&lt;/span>.&lt;span style="color:#a6e22e">Info&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Fast path scaling to 0, in proxy mode for: &amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">pf&lt;/span>)
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">desiredScale&lt;/span>, &lt;span style="color:#66d9ef">true&lt;/span>
}
&lt;span style="color:#75715e">// Re-enqueue the PA for reconciliation with timeout of `to` to make sure we wait
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// long enough.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">logger&lt;/span>.&lt;span style="color:#a6e22e">Info&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Enqueueing PA after &amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">to&lt;/span>)
&lt;span style="color:#a6e22e">ks&lt;/span>.&lt;span style="color:#a6e22e">enqueueCB&lt;/span>(&lt;span style="color:#a6e22e">pa&lt;/span>, &lt;span style="color:#a6e22e">to&lt;/span>)
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">desiredScale&lt;/span>, &lt;span style="color:#66d9ef">false&lt;/span>
}
&lt;span style="color:#75715e">// Otherwise (any prober failure) start the async probe.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">logger&lt;/span>.&lt;span style="color:#a6e22e">Info&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;PA is not yet backed by activator, cannot scale to zero&amp;#34;&lt;/span>)
&lt;span style="color:#66d9ef">if&lt;/span> !&lt;span style="color:#a6e22e">ks&lt;/span>.&lt;span style="color:#a6e22e">probeManager&lt;/span>.&lt;span style="color:#a6e22e">Offer&lt;/span>(&lt;span style="color:#a6e22e">context&lt;/span>.&lt;span style="color:#a6e22e">Background&lt;/span>(), &lt;span style="color:#a6e22e">paToProbeTarget&lt;/span>(&lt;span style="color:#a6e22e">pa&lt;/span>), &lt;span style="color:#a6e22e">pa&lt;/span>, &lt;span style="color:#a6e22e">probePeriod&lt;/span>, &lt;span style="color:#a6e22e">probeTimeout&lt;/span>, &lt;span style="color:#a6e22e">probeOptions&lt;/span>&lt;span style="color:#f92672">...&lt;/span>) {
&lt;span style="color:#a6e22e">logger&lt;/span>.&lt;span style="color:#a6e22e">Info&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Probe for revision is already in flight&amp;#34;&lt;/span>)
}
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">desiredScale&lt;/span>, &lt;span style="color:#66d9ef">false&lt;/span>
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>应用缩放，其核心的逻辑就是获取&lt;code>PodAutoscaler&lt;/code>引用的deployment，并修改副本数量，如果期望副本数不一致就创建patch来修改对应的deployment。&lt;/p>
&lt;p>ScaleTargetRef指向的是deployment，获取dep应用计算出来的patch，其中patch的内容就是将deployment的Replicas数量改为希望的数量，然后进行patch。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">ks&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">scaler&lt;/span>) &lt;span style="color:#a6e22e">applyScale&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span> &lt;span style="color:#a6e22e">context&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>, &lt;span style="color:#a6e22e">pa&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">autoscalingv1alpha1&lt;/span>.&lt;span style="color:#a6e22e">PodAutoscaler&lt;/span>, &lt;span style="color:#a6e22e">desiredScale&lt;/span> &lt;span style="color:#66d9ef">int32&lt;/span>,
&lt;span style="color:#a6e22e">ps&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">autoscalingv1alpha1&lt;/span>.&lt;span style="color:#a6e22e">PodScalable&lt;/span>) &lt;span style="color:#66d9ef">error&lt;/span> {
&lt;span style="color:#a6e22e">logger&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">logging&lt;/span>.&lt;span style="color:#a6e22e">FromContext&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>)
&lt;span style="color:#75715e">// 获取引用的deployment
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">gvr&lt;/span>, &lt;span style="color:#a6e22e">name&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">resources&lt;/span>.&lt;span style="color:#a6e22e">ScaleResourceArguments&lt;/span>(&lt;span style="color:#a6e22e">pa&lt;/span>.&lt;span style="color:#a6e22e">Spec&lt;/span>.&lt;span style="color:#a6e22e">ScaleTargetRef&lt;/span>)
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span>
}
&lt;span style="color:#a6e22e">psNew&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">ps&lt;/span>.&lt;span style="color:#a6e22e">DeepCopy&lt;/span>()
&lt;span style="color:#a6e22e">psNew&lt;/span>.&lt;span style="color:#a6e22e">Spec&lt;/span>.&lt;span style="color:#a6e22e">Replicas&lt;/span> = &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">desiredScale&lt;/span>
&lt;span style="color:#a6e22e">patch&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">duck&lt;/span>.&lt;span style="color:#a6e22e">CreatePatch&lt;/span>(&lt;span style="color:#a6e22e">ps&lt;/span>, &lt;span style="color:#a6e22e">psNew&lt;/span>)
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span>
}
&lt;span style="color:#a6e22e">patchBytes&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">patch&lt;/span>.&lt;span style="color:#a6e22e">MarshalJSON&lt;/span>()
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span>
}
&lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> = &lt;span style="color:#a6e22e">ks&lt;/span>.&lt;span style="color:#a6e22e">dynamicClient&lt;/span>.&lt;span style="color:#a6e22e">Resource&lt;/span>(&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">gvr&lt;/span>).&lt;span style="color:#a6e22e">Namespace&lt;/span>(&lt;span style="color:#a6e22e">pa&lt;/span>.&lt;span style="color:#a6e22e">Namespace&lt;/span>).&lt;span style="color:#a6e22e">Patch&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>, &lt;span style="color:#a6e22e">ps&lt;/span>.&lt;span style="color:#a6e22e">Name&lt;/span>, &lt;span style="color:#a6e22e">types&lt;/span>.&lt;span style="color:#a6e22e">JSONPatchType&lt;/span>,
&lt;span style="color:#a6e22e">patchBytes&lt;/span>, &lt;span style="color:#a6e22e">metav1&lt;/span>.&lt;span style="color:#a6e22e">PatchOptions&lt;/span>{})
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Errorf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;failed to apply scale %d to scale target %s: %w&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">desiredScale&lt;/span>, &lt;span style="color:#a6e22e">name&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>)
}
&lt;span style="color:#a6e22e">logger&lt;/span>.&lt;span style="color:#a6e22e">Debug&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Successfully scaled to &amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">desiredScale&lt;/span>)
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>参考资料：&lt;/p>
&lt;p>&lt;a href="https://kubernetes.io/zh/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/">给容器配置存活、就绪和启动探测器&lt;/a>&lt;/p>
&lt;p>&lt;a href="">&lt;/a>&lt;/p></description></item><item><title>Serverless: Knative Crd</title><link>https://taction.top/serverless/platform/knative-crd/</link><pubDate>Wed, 01 Dec 2021 15:43:22 +0800</pubDate><guid>https://taction.top/serverless/platform/knative-crd/</guid><description>
&lt;p>TL；DR&lt;/p>
&lt;p>本文主要介绍knative中的CRD，及以一个CRD为例介绍，只创建了ksvc其他所有的衍生CRD是如何被创建的。最后以一个实际运行的knative service为例展示了各个实际CRD的案例内容。&lt;/p>
&lt;h3 id="前置知识">前置知识&lt;/h3>
&lt;p>在阅读本部分内容时，你应该已经对knative有了一个初步的了解和感觉，知道它是干什么的。另外可能需要你对k8s及自定义controller有一定的了解。如果你在阅读此部分内容有不知所云的感觉，你可以先了解下&lt;a href="https://github.com/kubernetes/sample-controller">kubernetes sample-controller&lt;/a>.另外《kubernetes编程》应该也会对你在这方面的了解有所帮助。&lt;/p>
&lt;h3 id="crd总览">CRD总览&lt;/h3>
&lt;p>knative在创建一个service（ksvc）后，会自动创建一系列的crd。以下是创建一个ksvc所会创建的所有crd。&lt;/p>
&lt;p>各个crd的基础功能在这里就不展开介绍了，只挑几个比较重点的说下：&lt;/p>
&lt;p>kingress创建的目的是兼容不同网关的，网关需要监听此资源，当有kingress被创建后，需要解析此规则形成网关自己的路由规则。&lt;/p>
&lt;p>revision是当前这个服务版本的一个核心CRD，一方面在于它创建了&lt;code>deployment&lt;/code>和&lt;code>podautoscalers&lt;/code>,并且&lt;code>podautoscalers&lt;/code>中有ref字段指向此&lt;code>deployment&lt;/code>。另一方面很多流程都是通过revision的Name或者Uid进行关联的。&lt;/p>
&lt;p>public service就是k8s的一个service只不过没有定义label selector，这个svc也是在冷启动时流量会转到activator的核心。因为它在服务没有pod的时候会指向activator地址由activator在pod启动后转发，在服务被缩放pod启动后，会指向实际的pod。这样对这个服务的访问只要是通过这个svc，不论服务当前有没有pod，最终都能被导向到实际的pod中。&lt;/p>
&lt;p>&lt;img src="https://image-1255620078.cos.ap-nanjing.myqcloud.com/image-20211201162120869.png" alt="image-20211201162120869">&lt;/p>
&lt;p>关于CRD的介绍在&lt;a href="https://mp.weixin.qq.com/s/O9LXnIQknW-vH_mwrkQltA">深入探究 Knative 扩缩容的奥秘&lt;/a>文章中有一个比较好的介绍。&lt;/p>
&lt;h3 id="controller介绍">Controller介绍&lt;/h3>
&lt;p>controller是这些crd自动创建及状态维护的核心组件。&lt;a href="https://www.mdnice.com/writing/bb331f71193c4c28903b63209aeeb14b">Knative Serving核心逻辑实现（上篇）&lt;/a>这篇文章已经对代码结构做了一个非常好的概述，我在这里就不赘述了。&lt;/p>
&lt;p>这里就只是简要说明一下，在&lt;code>pkg/reconciler&lt;/code>几乎每个文件夹对应一种CRD资源。对资源的处理就在这个文件夹中。然后每种资源都会有个&lt;code>ReconcileKind&lt;/code>方法资源被创建和更新的时候都会触发这个方法。&lt;/p>
&lt;p>以ksvc为例，在&lt;code>pkg/reconciler/service/service.go&lt;/code>文件中我们可以看到其&lt;code>ReconcileKind&lt;/code>方法，这个方法主要就是创建其下层CRD。对于ksvc来说就是创建 &lt;code>Configuration&lt;/code> 和 &lt;code>Route&lt;/code> 资源。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Reconciler&lt;/span>) &lt;span style="color:#a6e22e">ReconcileKind&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span> &lt;span style="color:#a6e22e">context&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>, &lt;span style="color:#a6e22e">service&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">v1&lt;/span>.&lt;span style="color:#a6e22e">Service&lt;/span>) &lt;span style="color:#a6e22e">pkgreconciler&lt;/span>.&lt;span style="color:#a6e22e">Event&lt;/span> {
&lt;span style="color:#a6e22e">ctx&lt;/span>, &lt;span style="color:#a6e22e">cancel&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">context&lt;/span>.&lt;span style="color:#a6e22e">WithTimeout&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>, &lt;span style="color:#ae81ff">10&lt;/span>&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Second&lt;/span>)
&lt;span style="color:#66d9ef">defer&lt;/span> &lt;span style="color:#a6e22e">cancel&lt;/span>()
&lt;span style="color:#a6e22e">logger&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">logging&lt;/span>.&lt;span style="color:#a6e22e">FromContext&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>)
&lt;span style="color:#a6e22e">config&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">config&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>, &lt;span style="color:#a6e22e">service&lt;/span>)
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span>
}
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">config&lt;/span>.&lt;span style="color:#a6e22e">Generation&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#a6e22e">config&lt;/span>.&lt;span style="color:#a6e22e">Status&lt;/span>.&lt;span style="color:#a6e22e">ObservedGeneration&lt;/span> {
&lt;span style="color:#75715e">// The Configuration hasn&amp;#39;t yet reconciled our latest changes to
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// its desired state, so its conditions are outdated.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">service&lt;/span>.&lt;span style="color:#a6e22e">Status&lt;/span>.&lt;span style="color:#a6e22e">MarkConfigurationNotReconciled&lt;/span>()
&lt;span style="color:#75715e">// If BYO-Revision name is used we must serialize reconciling the Configuration
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// and Route. Wait for observed generation to match before continuing.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">config&lt;/span>.&lt;span style="color:#a6e22e">Spec&lt;/span>.&lt;span style="color:#a6e22e">GetTemplate&lt;/span>().&lt;span style="color:#a6e22e">Name&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>
}
} &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;span style="color:#a6e22e">logger&lt;/span>.&lt;span style="color:#a6e22e">Debugf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Configuration Conditions = %#v&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">config&lt;/span>.&lt;span style="color:#a6e22e">Status&lt;/span>.&lt;span style="color:#a6e22e">Conditions&lt;/span>)
&lt;span style="color:#75715e">// Update our Status based on the state of our underlying Configuration.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">service&lt;/span>.&lt;span style="color:#a6e22e">Status&lt;/span>.&lt;span style="color:#a6e22e">PropagateConfigurationStatus&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">config&lt;/span>.&lt;span style="color:#a6e22e">Status&lt;/span>)
}
&lt;span style="color:#75715e">// When the Configuration names a Revision, check that the named Revision is owned
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// by our Configuration and matches its generation before reprogramming the Route,
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// otherwise a bad patch could lead to folks inadvertently routing traffic to a
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// pre-existing Revision (possibly for another Configuration).
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">CheckNameAvailability&lt;/span>(&lt;span style="color:#a6e22e">config&lt;/span>, &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">revisionLister&lt;/span>); &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span>
!&lt;span style="color:#a6e22e">apierrs&lt;/span>.&lt;span style="color:#a6e22e">IsNotFound&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span>) {
&lt;span style="color:#a6e22e">service&lt;/span>.&lt;span style="color:#a6e22e">Status&lt;/span>.&lt;span style="color:#a6e22e">MarkRevisionNameTaken&lt;/span>(&lt;span style="color:#a6e22e">config&lt;/span>.&lt;span style="color:#a6e22e">Spec&lt;/span>.&lt;span style="color:#a6e22e">GetTemplate&lt;/span>().&lt;span style="color:#a6e22e">Name&lt;/span>)
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>
}
&lt;span style="color:#a6e22e">route&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">route&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>, &lt;span style="color:#a6e22e">service&lt;/span>)
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span>
}
&lt;span style="color:#75715e">// Update our Status based on the state of our underlying Route.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">ss&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">service&lt;/span>.&lt;span style="color:#a6e22e">Status&lt;/span>
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">route&lt;/span>.&lt;span style="color:#a6e22e">Generation&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#a6e22e">route&lt;/span>.&lt;span style="color:#a6e22e">Status&lt;/span>.&lt;span style="color:#a6e22e">ObservedGeneration&lt;/span> {
&lt;span style="color:#75715e">// The Route hasn&amp;#39;t yet reconciled our latest changes to
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// its desired state, so its conditions are outdated.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">ss&lt;/span>.&lt;span style="color:#a6e22e">MarkRouteNotReconciled&lt;/span>()
} &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;span style="color:#75715e">// Update our Status based on the state of our underlying Route.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">ss&lt;/span>.&lt;span style="color:#a6e22e">PropagateRouteStatus&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">route&lt;/span>.&lt;span style="color:#a6e22e">Status&lt;/span>)
}
&lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">checkRoutesNotReady&lt;/span>(&lt;span style="color:#a6e22e">config&lt;/span>, &lt;span style="color:#a6e22e">logger&lt;/span>, &lt;span style="color:#a6e22e">route&lt;/span>, &lt;span style="color:#a6e22e">service&lt;/span>)
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>创建configuration资源&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Reconciler&lt;/span>) &lt;span style="color:#a6e22e">config&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span> &lt;span style="color:#a6e22e">context&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>, &lt;span style="color:#a6e22e">service&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">v1&lt;/span>.&lt;span style="color:#a6e22e">Service&lt;/span>) (&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">v1&lt;/span>.&lt;span style="color:#a6e22e">Configuration&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>) {
&lt;span style="color:#a6e22e">recorder&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">controller&lt;/span>.&lt;span style="color:#a6e22e">GetEventRecorder&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>)
&lt;span style="color:#a6e22e">configName&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">resourcenames&lt;/span>.&lt;span style="color:#a6e22e">Configuration&lt;/span>(&lt;span style="color:#a6e22e">service&lt;/span>)
&lt;span style="color:#a6e22e">config&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">configurationLister&lt;/span>.&lt;span style="color:#a6e22e">Configurations&lt;/span>(&lt;span style="color:#a6e22e">service&lt;/span>.&lt;span style="color:#a6e22e">Namespace&lt;/span>).&lt;span style="color:#a6e22e">Get&lt;/span>(&lt;span style="color:#a6e22e">configName&lt;/span>)
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">apierrs&lt;/span>.&lt;span style="color:#a6e22e">IsNotFound&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span>) {
&lt;span style="color:#a6e22e">config&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> = &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">createConfiguration&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>, &lt;span style="color:#a6e22e">service&lt;/span>)
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;span style="color:#a6e22e">recorder&lt;/span>.&lt;span style="color:#a6e22e">Eventf&lt;/span>(&lt;span style="color:#a6e22e">service&lt;/span>, &lt;span style="color:#a6e22e">corev1&lt;/span>.&lt;span style="color:#a6e22e">EventTypeWarning&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;CreationFailed&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;Failed to create Configuration %q: %v&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">configName&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>)
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Errorf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;failed to create Configuration: %w&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>)
}
&lt;span style="color:#a6e22e">recorder&lt;/span>.&lt;span style="color:#a6e22e">Eventf&lt;/span>(&lt;span style="color:#a6e22e">service&lt;/span>, &lt;span style="color:#a6e22e">corev1&lt;/span>.&lt;span style="color:#a6e22e">EventTypeNormal&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;Created&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;Created Configuration %q&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">configName&lt;/span>)
} &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Errorf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;failed to get Configuration: %w&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>)
} &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> !&lt;span style="color:#a6e22e">metav1&lt;/span>.&lt;span style="color:#a6e22e">IsControlledBy&lt;/span>(&lt;span style="color:#a6e22e">config&lt;/span>, &lt;span style="color:#a6e22e">service&lt;/span>) {
&lt;span style="color:#75715e">// Surface an error in the service&amp;#39;s status,and return an error.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">service&lt;/span>.&lt;span style="color:#a6e22e">Status&lt;/span>.&lt;span style="color:#a6e22e">MarkConfigurationNotOwned&lt;/span>(&lt;span style="color:#a6e22e">configName&lt;/span>)
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Errorf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;service: %q does not own configuration: %q&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">service&lt;/span>.&lt;span style="color:#a6e22e">Name&lt;/span>, &lt;span style="color:#a6e22e">configName&lt;/span>)
} &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">config&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> = &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">reconcileConfiguration&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>, &lt;span style="color:#a6e22e">service&lt;/span>, &lt;span style="color:#a6e22e">config&lt;/span>); &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Errorf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;failed to reconcile Configuration: %w&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>)
}
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">config&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>创建route资源&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Reconciler&lt;/span>) &lt;span style="color:#a6e22e">route&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span> &lt;span style="color:#a6e22e">context&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>, &lt;span style="color:#a6e22e">service&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">v1&lt;/span>.&lt;span style="color:#a6e22e">Service&lt;/span>) (&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">v1&lt;/span>.&lt;span style="color:#a6e22e">Route&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>) {
&lt;span style="color:#a6e22e">recorder&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">controller&lt;/span>.&lt;span style="color:#a6e22e">GetEventRecorder&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>)
&lt;span style="color:#a6e22e">routeName&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">resourcenames&lt;/span>.&lt;span style="color:#a6e22e">Route&lt;/span>(&lt;span style="color:#a6e22e">service&lt;/span>)
&lt;span style="color:#a6e22e">route&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">routeLister&lt;/span>.&lt;span style="color:#a6e22e">Routes&lt;/span>(&lt;span style="color:#a6e22e">service&lt;/span>.&lt;span style="color:#a6e22e">Namespace&lt;/span>).&lt;span style="color:#a6e22e">Get&lt;/span>(&lt;span style="color:#a6e22e">routeName&lt;/span>)
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">apierrs&lt;/span>.&lt;span style="color:#a6e22e">IsNotFound&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span>) {
&lt;span style="color:#a6e22e">route&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> = &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">createRoute&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>, &lt;span style="color:#a6e22e">service&lt;/span>)
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;span style="color:#a6e22e">recorder&lt;/span>.&lt;span style="color:#a6e22e">Eventf&lt;/span>(&lt;span style="color:#a6e22e">service&lt;/span>, &lt;span style="color:#a6e22e">corev1&lt;/span>.&lt;span style="color:#a6e22e">EventTypeWarning&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;CreationFailed&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;Failed to create Route %q: %v&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">routeName&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>)
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Errorf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;failed to create Route: %w&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>)
}
&lt;span style="color:#a6e22e">recorder&lt;/span>.&lt;span style="color:#a6e22e">Eventf&lt;/span>(&lt;span style="color:#a6e22e">service&lt;/span>, &lt;span style="color:#a6e22e">corev1&lt;/span>.&lt;span style="color:#a6e22e">EventTypeNormal&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;Created&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;Created Route %q&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">routeName&lt;/span>)
} &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Errorf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;failed to get Route: %w&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>)
} &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> !&lt;span style="color:#a6e22e">metav1&lt;/span>.&lt;span style="color:#a6e22e">IsControlledBy&lt;/span>(&lt;span style="color:#a6e22e">route&lt;/span>, &lt;span style="color:#a6e22e">service&lt;/span>) {
&lt;span style="color:#75715e">// Surface an error in the service&amp;#39;s status, and return an error.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">service&lt;/span>.&lt;span style="color:#a6e22e">Status&lt;/span>.&lt;span style="color:#a6e22e">MarkRouteNotOwned&lt;/span>(&lt;span style="color:#a6e22e">routeName&lt;/span>)
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Errorf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;service: %q does not own route: %q&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">service&lt;/span>.&lt;span style="color:#a6e22e">Name&lt;/span>, &lt;span style="color:#a6e22e">routeName&lt;/span>)
} &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">route&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> = &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">reconcileRoute&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>, &lt;span style="color:#a6e22e">service&lt;/span>, &lt;span style="color:#a6e22e">route&lt;/span>); &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Errorf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;failed to reconcile Route: %w&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>)
}
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">route&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="webhook介绍">webhook介绍&lt;/h3>
&lt;p>webhook的作用就是对CRD的个项内容进行合规性检查。这里先略过对具体执行代码的介绍，最终对各个crd合规性的校验在&lt;code>pkg/apis/serving&lt;/code>文件夹下，有3个版本文件夹，以v1为例，每个CRD的校验逻辑都在xxx_validate.go文件中。以ksvc为例，其文件中有对Service crd和ServiceSpec的合法校验，当创建的crd校验不通过时，就会拒绝这个crd的创建。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#75715e">// Validate makes sure that Service is properly configured.
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">s&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Service&lt;/span>) &lt;span style="color:#a6e22e">Validate&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span> &lt;span style="color:#a6e22e">context&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>) (&lt;span style="color:#a6e22e">errs&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">apis&lt;/span>.&lt;span style="color:#a6e22e">FieldError&lt;/span>) {
&lt;span style="color:#75715e">// If we are in a status sub resource update, the metadata and spec cannot change.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// So, to avoid rejecting controller status updates due to validations that may
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// have changed (i.e. due to config-defaults changes), we elide the metadata and
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// spec validation.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> !&lt;span style="color:#a6e22e">apis&lt;/span>.&lt;span style="color:#a6e22e">IsInStatusUpdate&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>) {
&lt;span style="color:#a6e22e">errs&lt;/span> = &lt;span style="color:#a6e22e">errs&lt;/span>.&lt;span style="color:#a6e22e">Also&lt;/span>(&lt;span style="color:#a6e22e">serving&lt;/span>.&lt;span style="color:#a6e22e">ValidateObjectMetadata&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>, &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">GetObjectMeta&lt;/span>(), &lt;span style="color:#66d9ef">false&lt;/span>))
&lt;span style="color:#a6e22e">errs&lt;/span> = &lt;span style="color:#a6e22e">errs&lt;/span>.&lt;span style="color:#a6e22e">Also&lt;/span>(&lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">validateLabels&lt;/span>().&lt;span style="color:#a6e22e">ViaField&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;labels&amp;#34;&lt;/span>))
&lt;span style="color:#a6e22e">errs&lt;/span> = &lt;span style="color:#a6e22e">errs&lt;/span>.&lt;span style="color:#a6e22e">Also&lt;/span>(&lt;span style="color:#a6e22e">serving&lt;/span>.&lt;span style="color:#a6e22e">ValidateRolloutDurationAnnotation&lt;/span>(
&lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">GetAnnotations&lt;/span>()).&lt;span style="color:#a6e22e">ViaField&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;annotations&amp;#34;&lt;/span>))
&lt;span style="color:#a6e22e">errs&lt;/span> = &lt;span style="color:#a6e22e">errs&lt;/span>.&lt;span style="color:#a6e22e">ViaField&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;metadata&amp;#34;&lt;/span>)
&lt;span style="color:#a6e22e">ctx&lt;/span> = &lt;span style="color:#a6e22e">apis&lt;/span>.&lt;span style="color:#a6e22e">WithinParent&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>, &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">ObjectMeta&lt;/span>)
&lt;span style="color:#a6e22e">errs&lt;/span> = &lt;span style="color:#a6e22e">errs&lt;/span>.&lt;span style="color:#a6e22e">Also&lt;/span>(&lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">Spec&lt;/span>.&lt;span style="color:#a6e22e">Validate&lt;/span>(&lt;span style="color:#a6e22e">apis&lt;/span>.&lt;span style="color:#a6e22e">WithinSpec&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>)).&lt;span style="color:#a6e22e">ViaField&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;spec&amp;#34;&lt;/span>))
}
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">apis&lt;/span>.&lt;span style="color:#a6e22e">IsInUpdate&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>) {
&lt;span style="color:#a6e22e">original&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">apis&lt;/span>.&lt;span style="color:#a6e22e">GetBaseline&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>).(&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Service&lt;/span>)
&lt;span style="color:#a6e22e">errs&lt;/span> = &lt;span style="color:#a6e22e">errs&lt;/span>.&lt;span style="color:#a6e22e">Also&lt;/span>(
&lt;span style="color:#a6e22e">apis&lt;/span>.&lt;span style="color:#a6e22e">ValidateCreatorAndModifier&lt;/span>(
&lt;span style="color:#a6e22e">original&lt;/span>.&lt;span style="color:#a6e22e">Spec&lt;/span>, &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">Spec&lt;/span>, &lt;span style="color:#a6e22e">original&lt;/span>.&lt;span style="color:#a6e22e">GetAnnotations&lt;/span>(),
&lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">GetAnnotations&lt;/span>(), &lt;span style="color:#a6e22e">serving&lt;/span>.&lt;span style="color:#a6e22e">GroupName&lt;/span>).&lt;span style="color:#a6e22e">ViaField&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;metadata.annotations&amp;#34;&lt;/span>))
&lt;span style="color:#a6e22e">errs&lt;/span> = &lt;span style="color:#a6e22e">errs&lt;/span>.&lt;span style="color:#a6e22e">Also&lt;/span>(
&lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">Spec&lt;/span>.&lt;span style="color:#a6e22e">ConfigurationSpec&lt;/span>.&lt;span style="color:#a6e22e">Template&lt;/span>.&lt;span style="color:#a6e22e">VerifyNameChange&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>,
&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">original&lt;/span>.&lt;span style="color:#a6e22e">Spec&lt;/span>.&lt;span style="color:#a6e22e">ConfigurationSpec&lt;/span>.&lt;span style="color:#a6e22e">Template&lt;/span>).&lt;span style="color:#a6e22e">ViaField&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;spec.template&amp;#34;&lt;/span>))
}
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">errs&lt;/span>
}
&lt;span style="color:#75715e">// Validate implements apis.Validatable
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">ss&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">ServiceSpec&lt;/span>) &lt;span style="color:#a6e22e">Validate&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span> &lt;span style="color:#a6e22e">context&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>) &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">apis&lt;/span>.&lt;span style="color:#a6e22e">FieldError&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">ss&lt;/span>.&lt;span style="color:#a6e22e">ConfigurationSpec&lt;/span>.&lt;span style="color:#a6e22e">Validate&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>).&lt;span style="color:#a6e22e">Also&lt;/span>(
&lt;span style="color:#75715e">// Within the context of Service, the RouteSpec has a default
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// configurationName.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">ss&lt;/span>.&lt;span style="color:#a6e22e">RouteSpec&lt;/span>.&lt;span style="color:#a6e22e">Validate&lt;/span>(&lt;span style="color:#a6e22e">WithDefaultConfigurationName&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>)))
}
&lt;span style="color:#75715e">// validateLabels function validates service labels
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">s&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Service&lt;/span>) &lt;span style="color:#a6e22e">validateLabels&lt;/span>() (&lt;span style="color:#a6e22e">errs&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">apis&lt;/span>.&lt;span style="color:#a6e22e">FieldError&lt;/span>) {
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">val&lt;/span>, &lt;span style="color:#a6e22e">ok&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">Labels&lt;/span>[&lt;span style="color:#a6e22e">network&lt;/span>.&lt;span style="color:#a6e22e">VisibilityLabelKey&lt;/span>]; &lt;span style="color:#a6e22e">ok&lt;/span> {
&lt;span style="color:#a6e22e">errs&lt;/span> = &lt;span style="color:#a6e22e">errs&lt;/span>.&lt;span style="color:#a6e22e">Also&lt;/span>(&lt;span style="color:#a6e22e">validateClusterVisibilityLabel&lt;/span>(&lt;span style="color:#a6e22e">val&lt;/span>))
}
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">errs&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="附crd示例">附CRD示例&lt;/h3>
&lt;h4 id="kservice">kservice&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">serving.knative.dev/v1&lt;/span>
&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Service&lt;/span>
&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;span style="color:#f92672">annotations&lt;/span>:
&lt;span style="color:#f92672">kubectl.kubernetes.io/last-applied-configuration&lt;/span>: |&lt;span style="color:#e6db74">
&lt;/span>&lt;span style="color:#e6db74"> &lt;/span> {&lt;span style="color:#e6db74">&amp;#34;apiVersion&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;serving.knative.dev/v1&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;kind&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;Service&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;metadata&amp;#34;&lt;/span>:{&lt;span style="color:#e6db74">&amp;#34;annotations&amp;#34;&lt;/span>:{},&lt;span style="color:#e6db74">&amp;#34;name&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;hello&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;namespace&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;default&amp;#34;&lt;/span>},&lt;span style="color:#e6db74">&amp;#34;spec&amp;#34;&lt;/span>:{&lt;span style="color:#e6db74">&amp;#34;template&amp;#34;&lt;/span>:{&lt;span style="color:#e6db74">&amp;#34;spec&amp;#34;&lt;/span>:{&lt;span style="color:#e6db74">&amp;#34;containers&amp;#34;&lt;/span>:[{&lt;span style="color:#e6db74">&amp;#34;env&amp;#34;&lt;/span>:[{&lt;span style="color:#e6db74">&amp;#34;name&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;TARGET&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;value&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;Knative&amp;#34;&lt;/span>}],&lt;span style="color:#e6db74">&amp;#34;image&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;gcr.oneitfarm.com/knative-samples/helloworld-go&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;ports&amp;#34;&lt;/span>:[{&lt;span style="color:#e6db74">&amp;#34;containerPort&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">8080&lt;/span>}]}]}}}}
&lt;span style="color:#f92672">creationTimestamp&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;2021-11-12T06:33:11Z&amp;#34;&lt;/span>
&lt;span style="color:#f92672">generation&lt;/span>: &lt;span style="color:#ae81ff">1&lt;/span>
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">hello&lt;/span>
&lt;span style="color:#f92672">namespace&lt;/span>: &lt;span style="color:#ae81ff">default&lt;/span>
&lt;span style="color:#f92672">resourceVersion&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;1400935&amp;#34;&lt;/span>
&lt;span style="color:#f92672">uid&lt;/span>: &lt;span style="color:#ae81ff">d97bd364-1b92-4682-b568-cffd4b85054f&lt;/span>
&lt;span style="color:#f92672">spec&lt;/span>:
&lt;span style="color:#f92672">template&lt;/span>:
&lt;span style="color:#f92672">spec&lt;/span>:
&lt;span style="color:#f92672">containerConcurrency&lt;/span>: &lt;span style="color:#ae81ff">0&lt;/span>
&lt;span style="color:#f92672">containers&lt;/span>:
- &lt;span style="color:#f92672">env&lt;/span>:
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">TARGET&lt;/span>
&lt;span style="color:#f92672">value&lt;/span>: &lt;span style="color:#ae81ff">Knative&lt;/span>
&lt;span style="color:#f92672">image&lt;/span>: &lt;span style="color:#ae81ff">gcr.oneitfarm.com/knative-samples/helloworld-go&lt;/span>
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">user-container&lt;/span>
&lt;span style="color:#f92672">ports&lt;/span>:
- &lt;span style="color:#f92672">containerPort&lt;/span>: &lt;span style="color:#ae81ff">8080&lt;/span>
&lt;span style="color:#f92672">protocol&lt;/span>: &lt;span style="color:#ae81ff">TCP&lt;/span>
&lt;span style="color:#f92672">readinessProbe&lt;/span>:
&lt;span style="color:#f92672">successThreshold&lt;/span>: &lt;span style="color:#ae81ff">1&lt;/span>
&lt;span style="color:#f92672">tcpSocket&lt;/span>:
&lt;span style="color:#f92672">port&lt;/span>: &lt;span style="color:#ae81ff">0&lt;/span>
&lt;span style="color:#f92672">resources&lt;/span>: {}
&lt;span style="color:#f92672">enableServiceLinks&lt;/span>: &lt;span style="color:#66d9ef">false&lt;/span>
&lt;span style="color:#f92672">timeoutSeconds&lt;/span>: &lt;span style="color:#ae81ff">300&lt;/span>
&lt;span style="color:#f92672">traffic&lt;/span>:
- &lt;span style="color:#f92672">latestRevision&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;span style="color:#f92672">percent&lt;/span>: &lt;span style="color:#ae81ff">100&lt;/span>
&lt;span style="color:#f92672">status&lt;/span>:
&lt;span style="color:#f92672">address&lt;/span>:
&lt;span style="color:#f92672">url&lt;/span>: &lt;span style="color:#ae81ff">http://hello.default.svc.cluster.local&lt;/span>
&lt;span style="color:#f92672">latestCreatedRevisionName&lt;/span>: &lt;span style="color:#ae81ff">hello-00001&lt;/span>
&lt;span style="color:#f92672">latestReadyRevisionName&lt;/span>: &lt;span style="color:#ae81ff">hello-00001&lt;/span>
&lt;span style="color:#f92672">observedGeneration&lt;/span>: &lt;span style="color:#ae81ff">1&lt;/span>
&lt;span style="color:#f92672">traffic&lt;/span>:
- &lt;span style="color:#f92672">latestRevision&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;span style="color:#f92672">percent&lt;/span>: &lt;span style="color:#ae81ff">100&lt;/span>
&lt;span style="color:#f92672">revisionName&lt;/span>: &lt;span style="color:#ae81ff">hello-00001&lt;/span>
&lt;span style="color:#f92672">url&lt;/span>: &lt;span style="color:#ae81ff">http://hello.default.10.103.31.251.nip.io&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="service-private">service private&lt;/h4>
&lt;p>注意private的service具有selector，永远指向对应的deployment的所有pod。在没有pod的时候这个svc就不会对应到任何地址上。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#f92672">selector&lt;/span>:
&lt;span style="color:#f92672">serving.knative.dev/revisionUID&lt;/span>: &lt;span style="color:#ae81ff">357a23d7-24e2-4bb3-8af6-40e23122548f&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>完整内容：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">v1&lt;/span>
&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Service&lt;/span>
&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;span style="color:#f92672">annotations&lt;/span>:
&lt;span style="color:#f92672">autoscaling.knative.dev/class&lt;/span>: &lt;span style="color:#ae81ff">kpa.autoscaling.knative.dev&lt;/span>
&lt;span style="color:#f92672">serving.knative.dev/creator&lt;/span>: &lt;span style="color:#ae81ff">minikube-user&lt;/span>
&lt;span style="color:#f92672">creationTimestamp&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;2021-11-12T06:59:31Z&amp;#34;&lt;/span>
&lt;span style="color:#f92672">labels&lt;/span>:
&lt;span style="color:#f92672">app&lt;/span>: &lt;span style="color:#ae81ff">hello-00001&lt;/span>
&lt;span style="color:#f92672">networking.internal.knative.dev/serverlessservice&lt;/span>: &lt;span style="color:#ae81ff">hello-00001&lt;/span>
&lt;span style="color:#f92672">networking.internal.knative.dev/serviceType&lt;/span>: &lt;span style="color:#ae81ff">Private&lt;/span>
&lt;span style="color:#f92672">serving.knative.dev/configuration&lt;/span>: &lt;span style="color:#ae81ff">hello&lt;/span>
&lt;span style="color:#f92672">serving.knative.dev/configurationGeneration&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;1&amp;#34;&lt;/span>
&lt;span style="color:#f92672">serving.knative.dev/configurationUID&lt;/span>: &lt;span style="color:#ae81ff">5150d10a-8d42-464b-95be-2f38b110e863&lt;/span>
&lt;span style="color:#f92672">serving.knative.dev/revision&lt;/span>: &lt;span style="color:#ae81ff">hello-00001&lt;/span>
&lt;span style="color:#f92672">serving.knative.dev/revisionUID&lt;/span>: &lt;span style="color:#ae81ff">357a23d7-24e2-4bb3-8af6-40e23122548f&lt;/span>
&lt;span style="color:#f92672">serving.knative.dev/service&lt;/span>: &lt;span style="color:#ae81ff">hello&lt;/span>
&lt;span style="color:#f92672">serving.knative.dev/serviceUID&lt;/span>: &lt;span style="color:#ae81ff">d97bd364-1b92-4682-b568-cffd4b85054f&lt;/span>
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">hello-00001-private&lt;/span>
&lt;span style="color:#f92672">namespace&lt;/span>: &lt;span style="color:#ae81ff">default&lt;/span>
&lt;span style="color:#f92672">ownerReferences&lt;/span>:
- &lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">networking.internal.knative.dev/v1alpha1&lt;/span>
&lt;span style="color:#f92672">blockOwnerDeletion&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;span style="color:#f92672">controller&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">ServerlessService&lt;/span>
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">hello-00001&lt;/span>
&lt;span style="color:#f92672">uid&lt;/span>: &lt;span style="color:#ae81ff">cb0495e0-f248-460f-9e5c-ecdd5af12b24&lt;/span>
&lt;span style="color:#f92672">resourceVersion&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;1397163&amp;#34;&lt;/span>
&lt;span style="color:#f92672">uid&lt;/span>: &lt;span style="color:#ae81ff">cbd1cb73-6e29-46a1-b532-96659cddfffd&lt;/span>
&lt;span style="color:#f92672">spec&lt;/span>:
&lt;span style="color:#f92672">clusterIP&lt;/span>: &lt;span style="color:#ae81ff">10.101.43.6&lt;/span>
&lt;span style="color:#f92672">clusterIPs&lt;/span>:
- &lt;span style="color:#ae81ff">10.101.43.6&lt;/span>
&lt;span style="color:#f92672">ipFamilies&lt;/span>:
- &lt;span style="color:#ae81ff">IPv4&lt;/span>
&lt;span style="color:#f92672">ipFamilyPolicy&lt;/span>: &lt;span style="color:#ae81ff">SingleStack&lt;/span>
&lt;span style="color:#f92672">ports&lt;/span>:
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">http&lt;/span>
&lt;span style="color:#f92672">port&lt;/span>: &lt;span style="color:#ae81ff">80&lt;/span>
&lt;span style="color:#f92672">protocol&lt;/span>: &lt;span style="color:#ae81ff">TCP&lt;/span>
&lt;span style="color:#f92672">targetPort&lt;/span>: &lt;span style="color:#ae81ff">8012&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">http-autometric&lt;/span>
&lt;span style="color:#f92672">port&lt;/span>: &lt;span style="color:#ae81ff">9090&lt;/span>
&lt;span style="color:#f92672">protocol&lt;/span>: &lt;span style="color:#ae81ff">TCP&lt;/span>
&lt;span style="color:#f92672">targetPort&lt;/span>: &lt;span style="color:#ae81ff">http-autometric&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">http-usermetric&lt;/span>
&lt;span style="color:#f92672">port&lt;/span>: &lt;span style="color:#ae81ff">9091&lt;/span>
&lt;span style="color:#f92672">protocol&lt;/span>: &lt;span style="color:#ae81ff">TCP&lt;/span>
&lt;span style="color:#f92672">targetPort&lt;/span>: &lt;span style="color:#ae81ff">http-usermetric&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">http-queueadm&lt;/span>
&lt;span style="color:#f92672">port&lt;/span>: &lt;span style="color:#ae81ff">8022&lt;/span>
&lt;span style="color:#f92672">protocol&lt;/span>: &lt;span style="color:#ae81ff">TCP&lt;/span>
&lt;span style="color:#f92672">targetPort&lt;/span>: &lt;span style="color:#ae81ff">8022&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">http-istio&lt;/span>
&lt;span style="color:#f92672">port&lt;/span>: &lt;span style="color:#ae81ff">8012&lt;/span>
&lt;span style="color:#f92672">protocol&lt;/span>: &lt;span style="color:#ae81ff">TCP&lt;/span>
&lt;span style="color:#f92672">targetPort&lt;/span>: &lt;span style="color:#ae81ff">8012&lt;/span>
&lt;span style="color:#f92672">selector&lt;/span>:
&lt;span style="color:#f92672">serving.knative.dev/revisionUID&lt;/span>: &lt;span style="color:#ae81ff">357a23d7-24e2-4bb3-8af6-40e23122548f&lt;/span>
&lt;span style="color:#f92672">sessionAffinity&lt;/span>: &lt;span style="color:#ae81ff">None&lt;/span>
&lt;span style="color:#f92672">type&lt;/span>: &lt;span style="color:#ae81ff">ClusterIP&lt;/span>
&lt;span style="color:#f92672">status&lt;/span>:
&lt;span style="color:#f92672">loadBalancer&lt;/span>: {}
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="configuration">configuration&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">serving.knative.dev/v1&lt;/span>
&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Configuration&lt;/span>
&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;span style="color:#f92672">annotations&lt;/span>:
&lt;span style="color:#f92672">serving.knative.dev/routes&lt;/span>: &lt;span style="color:#ae81ff">hello&lt;/span>
&lt;span style="color:#f92672">creationTimestamp&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;2021-11-12T06:40:53Z&amp;#34;&lt;/span>
&lt;span style="color:#f92672">generation&lt;/span>: &lt;span style="color:#ae81ff">1&lt;/span>
&lt;span style="color:#f92672">labels&lt;/span>:
&lt;span style="color:#f92672">serving.knative.dev/service&lt;/span>: &lt;span style="color:#ae81ff">hello&lt;/span>
&lt;span style="color:#f92672">serving.knative.dev/serviceUID&lt;/span>: &lt;span style="color:#ae81ff">d97bd364-1b92-4682-b568-cffd4b85054f&lt;/span>
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">hello&lt;/span>
&lt;span style="color:#f92672">namespace&lt;/span>: &lt;span style="color:#ae81ff">default&lt;/span>
&lt;span style="color:#f92672">ownerReferences&lt;/span>:
- &lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">serving.knative.dev/v1&lt;/span>
&lt;span style="color:#f92672">blockOwnerDeletion&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;span style="color:#f92672">controller&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Service&lt;/span>
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">hello&lt;/span>
&lt;span style="color:#f92672">uid&lt;/span>: &lt;span style="color:#ae81ff">d97bd364-1b92-4682-b568-cffd4b85054f&lt;/span>
&lt;span style="color:#f92672">resourceVersion&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;1400663&amp;#34;&lt;/span>
&lt;span style="color:#f92672">uid&lt;/span>: &lt;span style="color:#ae81ff">5150d10a-8d42-464b-95be-2f38b110e863&lt;/span>
&lt;span style="color:#f92672">spec&lt;/span>:
&lt;span style="color:#f92672">template&lt;/span>:
&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;span style="color:#f92672">creationTimestamp&lt;/span>: &lt;span style="color:#66d9ef">null&lt;/span>
&lt;span style="color:#f92672">spec&lt;/span>:
&lt;span style="color:#f92672">containerConcurrency&lt;/span>: &lt;span style="color:#ae81ff">0&lt;/span>
&lt;span style="color:#f92672">containers&lt;/span>:
- &lt;span style="color:#f92672">env&lt;/span>:
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">TARGET&lt;/span>
&lt;span style="color:#f92672">value&lt;/span>: &lt;span style="color:#ae81ff">Knative&lt;/span>
&lt;span style="color:#f92672">image&lt;/span>: &lt;span style="color:#ae81ff">gcr.oneitfarm.com/knative-samples/helloworld-go&lt;/span>
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">user-container&lt;/span>
&lt;span style="color:#f92672">ports&lt;/span>:
- &lt;span style="color:#f92672">containerPort&lt;/span>: &lt;span style="color:#ae81ff">8080&lt;/span>
&lt;span style="color:#f92672">protocol&lt;/span>: &lt;span style="color:#ae81ff">TCP&lt;/span>
&lt;span style="color:#f92672">readinessProbe&lt;/span>:
&lt;span style="color:#f92672">successThreshold&lt;/span>: &lt;span style="color:#ae81ff">1&lt;/span>
&lt;span style="color:#f92672">tcpSocket&lt;/span>:
&lt;span style="color:#f92672">port&lt;/span>: &lt;span style="color:#ae81ff">0&lt;/span>
&lt;span style="color:#f92672">status&lt;/span>:
&lt;span style="color:#f92672">conditions&lt;/span>:
- &lt;span style="color:#f92672">lastTransitionTime&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;2021-11-12T07:09:12Z&amp;#34;&lt;/span>
&lt;span style="color:#f92672">status&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;True&amp;#34;&lt;/span>
&lt;span style="color:#f92672">type&lt;/span>: &lt;span style="color:#ae81ff">Ready&lt;/span>
&lt;span style="color:#f92672">latestCreatedRevisionName&lt;/span>: &lt;span style="color:#ae81ff">hello-00001&lt;/span>
&lt;span style="color:#f92672">latestReadyRevisionName&lt;/span>: &lt;span style="color:#ae81ff">hello-00001&lt;/span>
&lt;span style="color:#f92672">observedGeneration&lt;/span>: &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="route">route&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">serving.knative.dev/v1&lt;/span>
&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Route&lt;/span>
&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;span style="color:#f92672">annotations&lt;/span>:
&lt;span style="color:#f92672">serving.knative.dev/creator&lt;/span>: &lt;span style="color:#ae81ff">minikube-user&lt;/span>
&lt;span style="color:#f92672">serving.knative.dev/lastModifier&lt;/span>: &lt;span style="color:#ae81ff">minikube-user&lt;/span>
&lt;span style="color:#f92672">creationTimestamp&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;2021-11-12T06:41:02Z&amp;#34;&lt;/span>
&lt;span style="color:#f92672">finalizers&lt;/span>:
- &lt;span style="color:#ae81ff">routes.serving.knative.dev&lt;/span>
&lt;span style="color:#f92672">generation&lt;/span>: &lt;span style="color:#ae81ff">1&lt;/span>
&lt;span style="color:#f92672">labels&lt;/span>:
&lt;span style="color:#f92672">serving.knative.dev/service&lt;/span>: &lt;span style="color:#ae81ff">hello&lt;/span>
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">hello&lt;/span>
&lt;span style="color:#f92672">namespace&lt;/span>: &lt;span style="color:#ae81ff">default&lt;/span>
&lt;span style="color:#f92672">ownerReferences&lt;/span>:
- &lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">serving.knative.dev/v1&lt;/span>
&lt;span style="color:#f92672">blockOwnerDeletion&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;span style="color:#f92672">controller&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Service&lt;/span>
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">hello&lt;/span>
&lt;span style="color:#f92672">uid&lt;/span>: &lt;span style="color:#ae81ff">d97bd364-1b92-4682-b568-cffd4b85054f&lt;/span>
&lt;span style="color:#f92672">resourceVersion&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;1400934&amp;#34;&lt;/span>
&lt;span style="color:#f92672">uid&lt;/span>: &lt;span style="color:#ae81ff">2da2c785-a4ab-498f-b9d8-32b9898d711f&lt;/span>
&lt;span style="color:#f92672">spec&lt;/span>:
&lt;span style="color:#f92672">traffic&lt;/span>:
- &lt;span style="color:#f92672">configurationName&lt;/span>: &lt;span style="color:#ae81ff">hello&lt;/span>
&lt;span style="color:#f92672">latestRevision&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;span style="color:#f92672">percent&lt;/span>: &lt;span style="color:#ae81ff">100&lt;/span>
&lt;span style="color:#f92672">status&lt;/span>:
&lt;span style="color:#f92672">address&lt;/span>:
&lt;span style="color:#f92672">url&lt;/span>: &lt;span style="color:#ae81ff">http://hello.default.svc.cluster.local&lt;/span>
&lt;span style="color:#f92672">observedGeneration&lt;/span>: &lt;span style="color:#ae81ff">1&lt;/span>
&lt;span style="color:#f92672">traffic&lt;/span>:
- &lt;span style="color:#f92672">latestRevision&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;span style="color:#f92672">percent&lt;/span>: &lt;span style="color:#ae81ff">100&lt;/span>
&lt;span style="color:#f92672">revisionName&lt;/span>: &lt;span style="color:#ae81ff">hello-00001&lt;/span>
&lt;span style="color:#f92672">url&lt;/span>: &lt;span style="color:#ae81ff">http://hello.default.10.103.31.251.nip.io&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="kingress">kingress&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">networking.internal.knative.dev/v1alpha1&lt;/span>
&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Ingress&lt;/span>
&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;span style="color:#f92672">annotations&lt;/span>:
&lt;span style="color:#f92672">networking.internal.knative.dev/rollout&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;{&amp;#34;configurations&amp;#34;:[{&amp;#34;configurationName&amp;#34;:&amp;#34;hello&amp;#34;,&amp;#34;percent&amp;#34;:100,&amp;#34;revisions&amp;#34;:[{&amp;#34;revisionName&amp;#34;:&amp;#34;hello-00001&amp;#34;,&amp;#34;percent&amp;#34;:100}],&amp;#34;stepParams&amp;#34;:{}}]}&amp;#39;&lt;/span>
&lt;span style="color:#f92672">networking.knative.dev/ingress.class&lt;/span>: &lt;span style="color:#ae81ff">kourier.ingress.networking.knative.dev&lt;/span>
&lt;span style="color:#f92672">serving.knative.dev/creator&lt;/span>: &lt;span style="color:#ae81ff">minikube-user&lt;/span>
&lt;span style="color:#f92672">serving.knative.dev/lastModifier&lt;/span>: &lt;span style="color:#ae81ff">minikube-user&lt;/span>
&lt;span style="color:#f92672">creationTimestamp&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;2021-11-12T07:09:12Z&amp;#34;&lt;/span>
&lt;span style="color:#f92672">finalizers&lt;/span>:
- &lt;span style="color:#ae81ff">ingresses.networking.internal.knative.dev&lt;/span>
&lt;span style="color:#f92672">generation&lt;/span>: &lt;span style="color:#ae81ff">1&lt;/span>
&lt;span style="color:#f92672">labels&lt;/span>:
&lt;span style="color:#f92672">serving.knative.dev/route&lt;/span>: &lt;span style="color:#ae81ff">hello&lt;/span>
&lt;span style="color:#f92672">serving.knative.dev/routeNamespace&lt;/span>: &lt;span style="color:#ae81ff">default&lt;/span>
&lt;span style="color:#f92672">serving.knative.dev/service&lt;/span>: &lt;span style="color:#ae81ff">hello&lt;/span>
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">hello&lt;/span>
&lt;span style="color:#f92672">namespace&lt;/span>: &lt;span style="color:#ae81ff">default&lt;/span>
&lt;span style="color:#f92672">ownerReferences&lt;/span>:
- &lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">serving.knative.dev/v1&lt;/span>
&lt;span style="color:#f92672">blockOwnerDeletion&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;span style="color:#f92672">controller&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Route&lt;/span>
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">hello&lt;/span>
&lt;span style="color:#f92672">uid&lt;/span>: &lt;span style="color:#ae81ff">2da2c785-a4ab-498f-b9d8-32b9898d711f&lt;/span>
&lt;span style="color:#f92672">resourceVersion&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;1400686&amp;#34;&lt;/span>
&lt;span style="color:#f92672">uid&lt;/span>: &lt;span style="color:#ae81ff">b602b482-0d15-46f8-b4de-8016a75d13ce&lt;/span>
&lt;span style="color:#f92672">spec&lt;/span>:
&lt;span style="color:#f92672">httpOption&lt;/span>: &lt;span style="color:#ae81ff">Enabled&lt;/span>
&lt;span style="color:#f92672">rules&lt;/span>:
- &lt;span style="color:#f92672">hosts&lt;/span>:
- &lt;span style="color:#ae81ff">hello.default&lt;/span>
- &lt;span style="color:#ae81ff">hello.default.svc&lt;/span>
- &lt;span style="color:#ae81ff">hello.default.svc.cluster.local&lt;/span>
&lt;span style="color:#f92672">http&lt;/span>:
&lt;span style="color:#f92672">paths&lt;/span>:
- &lt;span style="color:#f92672">splits&lt;/span>:
- &lt;span style="color:#f92672">appendHeaders&lt;/span>:
&lt;span style="color:#f92672">Knative-Serving-Namespace&lt;/span>: &lt;span style="color:#ae81ff">default&lt;/span>
&lt;span style="color:#f92672">Knative-Serving-Revision&lt;/span>: &lt;span style="color:#ae81ff">hello-00001&lt;/span>
&lt;span style="color:#f92672">percent&lt;/span>: &lt;span style="color:#ae81ff">100&lt;/span>
&lt;span style="color:#f92672">serviceName&lt;/span>: &lt;span style="color:#ae81ff">hello-00001&lt;/span>
&lt;span style="color:#f92672">serviceNamespace&lt;/span>: &lt;span style="color:#ae81ff">default&lt;/span>
&lt;span style="color:#f92672">servicePort&lt;/span>: &lt;span style="color:#ae81ff">80&lt;/span>
&lt;span style="color:#f92672">visibility&lt;/span>: &lt;span style="color:#ae81ff">ClusterLocal&lt;/span>
- &lt;span style="color:#f92672">hosts&lt;/span>:
- &lt;span style="color:#ae81ff">hello.default.10.103.31.251.nip.io&lt;/span>
&lt;span style="color:#f92672">http&lt;/span>:
&lt;span style="color:#f92672">paths&lt;/span>:
- &lt;span style="color:#f92672">splits&lt;/span>:
- &lt;span style="color:#f92672">appendHeaders&lt;/span>:
&lt;span style="color:#f92672">Knative-Serving-Namespace&lt;/span>: &lt;span style="color:#ae81ff">default&lt;/span>
&lt;span style="color:#f92672">Knative-Serving-Revision&lt;/span>: &lt;span style="color:#ae81ff">hello-00001&lt;/span>
&lt;span style="color:#f92672">percent&lt;/span>: &lt;span style="color:#ae81ff">100&lt;/span>
&lt;span style="color:#f92672">serviceName&lt;/span>: &lt;span style="color:#ae81ff">hello-00001&lt;/span>
&lt;span style="color:#f92672">serviceNamespace&lt;/span>: &lt;span style="color:#ae81ff">default&lt;/span>
&lt;span style="color:#f92672">servicePort&lt;/span>: &lt;span style="color:#ae81ff">80&lt;/span>
&lt;span style="color:#f92672">visibility&lt;/span>: &lt;span style="color:#ae81ff">ExternalIP&lt;/span>
&lt;span style="color:#f92672">status&lt;/span>:
&lt;span style="color:#f92672">conditions&lt;/span>:
- &lt;span style="color:#f92672">lastTransitionTime&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;2021-11-12T07:09:12Z&amp;#34;&lt;/span>
&lt;span style="color:#f92672">status&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;True&amp;#34;&lt;/span>
&lt;span style="color:#f92672">type&lt;/span>: &lt;span style="color:#ae81ff">LoadBalancerReady&lt;/span>
- &lt;span style="color:#f92672">lastTransitionTime&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;2021-11-12T07:09:12Z&amp;#34;&lt;/span>
&lt;span style="color:#f92672">status&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;True&amp;#34;&lt;/span>
&lt;span style="color:#f92672">type&lt;/span>: &lt;span style="color:#ae81ff">NetworkConfigured&lt;/span>
- &lt;span style="color:#f92672">lastTransitionTime&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;2021-11-12T07:09:12Z&amp;#34;&lt;/span>
&lt;span style="color:#f92672">status&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;True&amp;#34;&lt;/span>
&lt;span style="color:#f92672">type&lt;/span>: &lt;span style="color:#ae81ff">Ready&lt;/span>
&lt;span style="color:#f92672">observedGeneration&lt;/span>: &lt;span style="color:#ae81ff">1&lt;/span>
&lt;span style="color:#f92672">privateLoadBalancer&lt;/span>:
&lt;span style="color:#f92672">ingress&lt;/span>:
- &lt;span style="color:#f92672">domainInternal&lt;/span>: &lt;span style="color:#ae81ff">kourier-internal.kourier-system.svc.cluster.local&lt;/span>
&lt;span style="color:#f92672">publicLoadBalancer&lt;/span>:
&lt;span style="color:#f92672">ingress&lt;/span>:
- &lt;span style="color:#f92672">domainInternal&lt;/span>: &lt;span style="color:#ae81ff">kourier.kourier-system.svc.cluster.local&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="revision">revision&lt;/h4>
&lt;p>label指向了configuration和service&lt;/p>
&lt;p>annotions下有各个控制缩放的字段。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">serving.knative.dev/v1&lt;/span>
&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Revision&lt;/span>
&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;span style="color:#f92672">annotations&lt;/span>:
&lt;span style="color:#f92672">serving.knative.dev/routes&lt;/span>: &lt;span style="color:#ae81ff">hello&lt;/span>
&lt;span style="color:#f92672">creationTimestamp&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;2021-11-12T06:41:02Z&amp;#34;&lt;/span>
&lt;span style="color:#f92672">generation&lt;/span>: &lt;span style="color:#ae81ff">1&lt;/span>
&lt;span style="color:#f92672">labels&lt;/span>:
&lt;span style="color:#f92672">serving.knative.dev/configuration&lt;/span>: &lt;span style="color:#ae81ff">hello&lt;/span>
&lt;span style="color:#f92672">serving.knative.dev/configurationGeneration&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;1&amp;#34;&lt;/span>
&lt;span style="color:#f92672">serving.knative.dev/configurationUID&lt;/span>: &lt;span style="color:#ae81ff">5150d10a-8d42-464b-95be-2f38b110e863&lt;/span>
&lt;span style="color:#f92672">serving.knative.dev/routingState&lt;/span>: &lt;span style="color:#ae81ff">active&lt;/span>
&lt;span style="color:#f92672">serving.knative.dev/service&lt;/span>: &lt;span style="color:#ae81ff">hello&lt;/span>
&lt;span style="color:#f92672">serving.knative.dev/serviceUID&lt;/span>: &lt;span style="color:#ae81ff">d97bd364-1b92-4682-b568-cffd4b85054f&lt;/span>
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">hello-00001&lt;/span>
&lt;span style="color:#f92672">namespace&lt;/span>: &lt;span style="color:#ae81ff">default&lt;/span>
&lt;span style="color:#f92672">ownerReferences&lt;/span>:
- &lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">serving.knative.dev/v1&lt;/span>
&lt;span style="color:#f92672">blockOwnerDeletion&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;span style="color:#f92672">controller&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Configuration&lt;/span>
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">hello&lt;/span>
&lt;span style="color:#f92672">uid&lt;/span>: &lt;span style="color:#ae81ff">5150d10a-8d42-464b-95be-2f38b110e863&lt;/span>
&lt;span style="color:#f92672">resourceVersion&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;1433082&amp;#34;&lt;/span>
&lt;span style="color:#f92672">uid&lt;/span>: &lt;span style="color:#ae81ff">357a23d7-24e2-4bb3-8af6-40e23122548f&lt;/span>
&lt;span style="color:#f92672">spec&lt;/span>:
&lt;span style="color:#f92672">containerConcurrency&lt;/span>: &lt;span style="color:#ae81ff">0&lt;/span>
&lt;span style="color:#f92672">containers&lt;/span>:
- &lt;span style="color:#f92672">env&lt;/span>:
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">TARGET&lt;/span>
&lt;span style="color:#f92672">value&lt;/span>: &lt;span style="color:#ae81ff">Knative&lt;/span>
&lt;span style="color:#f92672">image&lt;/span>: &lt;span style="color:#ae81ff">gcr.oneitfarm.com/knative-samples/helloworld-go&lt;/span>
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">user-container&lt;/span>
&lt;span style="color:#f92672">ports&lt;/span>:
- &lt;span style="color:#f92672">containerPort&lt;/span>: &lt;span style="color:#ae81ff">8080&lt;/span>
&lt;span style="color:#f92672">protocol&lt;/span>: &lt;span style="color:#ae81ff">TCP&lt;/span>
&lt;span style="color:#f92672">readinessProbe&lt;/span>:
&lt;span style="color:#f92672">successThreshold&lt;/span>: &lt;span style="color:#ae81ff">1&lt;/span>
&lt;span style="color:#f92672">tcpSocket&lt;/span>:
&lt;span style="color:#f92672">port&lt;/span>: &lt;span style="color:#ae81ff">0&lt;/span>
&lt;span style="color:#f92672">resources&lt;/span>: {}
&lt;span style="color:#f92672">enableServiceLinks&lt;/span>: &lt;span style="color:#66d9ef">false&lt;/span>
&lt;span style="color:#f92672">timeoutSeconds&lt;/span>: &lt;span style="color:#ae81ff">300&lt;/span>
&lt;span style="color:#f92672">status&lt;/span>:
&lt;span style="color:#f92672">actualReplicas&lt;/span>: &lt;span style="color:#ae81ff">0&lt;/span>
&lt;span style="color:#f92672">containerStatuses&lt;/span>:
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">user-container&lt;/span>
&lt;span style="color:#f92672">desiredReplicas&lt;/span>: &lt;span style="color:#ae81ff">0&lt;/span>
&lt;span style="color:#f92672">observedGeneration&lt;/span>: &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="deployment">deployment&lt;/h4>
&lt;p>label指向了configuration和revision和service，注意还注入了proxy容器。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">apps/v1&lt;/span>
&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Deployment&lt;/span>
&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;span style="color:#f92672">annotations&lt;/span>:
&lt;span style="color:#f92672">deployment.kubernetes.io/revision&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;1&amp;#34;&lt;/span>
&lt;span style="color:#f92672">creationTimestamp&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;2021-11-12T06:52:34Z&amp;#34;&lt;/span>
&lt;span style="color:#f92672">generation&lt;/span>: &lt;span style="color:#ae81ff">12&lt;/span>
&lt;span style="color:#f92672">labels&lt;/span>:
&lt;span style="color:#f92672">app&lt;/span>: &lt;span style="color:#ae81ff">hello-00001&lt;/span>
&lt;span style="color:#f92672">serving.knative.dev/configuration&lt;/span>: &lt;span style="color:#ae81ff">hello&lt;/span>
&lt;span style="color:#f92672">serving.knative.dev/configurationGeneration&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;1&amp;#34;&lt;/span>
&lt;span style="color:#f92672">serving.knative.dev/configurationUID&lt;/span>: &lt;span style="color:#ae81ff">5150d10a-8d42-464b-95be-2f38b110e863&lt;/span>
&lt;span style="color:#f92672">serving.knative.dev/revision&lt;/span>: &lt;span style="color:#ae81ff">hello-00001&lt;/span>
&lt;span style="color:#f92672">serving.knative.dev/revisionUID&lt;/span>: &lt;span style="color:#ae81ff">357a23d7-24e2-4bb3-8af6-40e23122548f&lt;/span>
&lt;span style="color:#f92672">serving.knative.dev/service&lt;/span>: &lt;span style="color:#ae81ff">hello&lt;/span>
&lt;span style="color:#f92672">serving.knative.dev/serviceUID&lt;/span>: &lt;span style="color:#ae81ff">d97bd364-1b92-4682-b568-cffd4b85054f&lt;/span>
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">hello-00001-deployment&lt;/span>
&lt;span style="color:#f92672">namespace&lt;/span>: &lt;span style="color:#ae81ff">default&lt;/span>
&lt;span style="color:#f92672">ownerReferences&lt;/span>:
- &lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">serving.knative.dev/v1&lt;/span>
&lt;span style="color:#f92672">blockOwnerDeletion&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;span style="color:#f92672">controller&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Revision&lt;/span>
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">hello-00001&lt;/span>
&lt;span style="color:#f92672">uid&lt;/span>: &lt;span style="color:#ae81ff">357a23d7-24e2-4bb3-8af6-40e23122548f&lt;/span>
&lt;span style="color:#f92672">resourceVersion&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;2999968&amp;#34;&lt;/span>
&lt;span style="color:#f92672">uid&lt;/span>: &lt;span style="color:#ae81ff">06001aab-6d40-4916-be05-0f2f8e6d392b&lt;/span>
&lt;span style="color:#f92672">spec&lt;/span>:
&lt;span style="color:#f92672">progressDeadlineSeconds&lt;/span>: &lt;span style="color:#ae81ff">600&lt;/span>
&lt;span style="color:#f92672">replicas&lt;/span>: &lt;span style="color:#ae81ff">0&lt;/span>
&lt;span style="color:#f92672">revisionHistoryLimit&lt;/span>: &lt;span style="color:#ae81ff">10&lt;/span>
&lt;span style="color:#f92672">selector&lt;/span>:
&lt;span style="color:#f92672">matchLabels&lt;/span>:
&lt;span style="color:#f92672">serving.knative.dev/revisionUID&lt;/span>: &lt;span style="color:#ae81ff">357a23d7-24e2-4bb3-8af6-40e23122548f&lt;/span>
&lt;span style="color:#f92672">strategy&lt;/span>:
&lt;span style="color:#f92672">rollingUpdate&lt;/span>:
&lt;span style="color:#f92672">maxSurge&lt;/span>: &lt;span style="color:#ae81ff">25&lt;/span>&lt;span style="color:#ae81ff">%&lt;/span>
&lt;span style="color:#f92672">maxUnavailable&lt;/span>: &lt;span style="color:#ae81ff">0&lt;/span>
&lt;span style="color:#f92672">type&lt;/span>: &lt;span style="color:#ae81ff">RollingUpdate&lt;/span>
&lt;span style="color:#f92672">template&lt;/span>:
&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;span style="color:#f92672">labels&lt;/span>:
&lt;span style="color:#f92672">app&lt;/span>: &lt;span style="color:#ae81ff">hello-00001&lt;/span>
&lt;span style="color:#f92672">serving.knative.dev/configuration&lt;/span>: &lt;span style="color:#ae81ff">hello&lt;/span>
&lt;span style="color:#f92672">serving.knative.dev/configurationGeneration&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;1&amp;#34;&lt;/span>
&lt;span style="color:#f92672">serving.knative.dev/configurationUID&lt;/span>: &lt;span style="color:#ae81ff">5150d10a-8d42-464b-95be-2f38b110e863&lt;/span>
&lt;span style="color:#f92672">serving.knative.dev/revision&lt;/span>: &lt;span style="color:#ae81ff">hello-00001&lt;/span>
&lt;span style="color:#f92672">serving.knative.dev/revisionUID&lt;/span>: &lt;span style="color:#ae81ff">357a23d7-24e2-4bb3-8af6-40e23122548f&lt;/span>
&lt;span style="color:#f92672">serving.knative.dev/service&lt;/span>: &lt;span style="color:#ae81ff">hello&lt;/span>
&lt;span style="color:#f92672">serving.knative.dev/serviceUID&lt;/span>: &lt;span style="color:#ae81ff">d97bd364-1b92-4682-b568-cffd4b85054f&lt;/span>
&lt;span style="color:#f92672">spec&lt;/span>:
&lt;span style="color:#f92672">containers&lt;/span>:
- &lt;span style="color:#f92672">env&lt;/span>:
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">TARGET&lt;/span>
&lt;span style="color:#f92672">value&lt;/span>: &lt;span style="color:#ae81ff">Knative&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">PORT&lt;/span>
&lt;span style="color:#f92672">value&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;8080&amp;#34;&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">K_REVISION&lt;/span>
&lt;span style="color:#f92672">value&lt;/span>: &lt;span style="color:#ae81ff">hello-00001&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">K_CONFIGURATION&lt;/span>
&lt;span style="color:#f92672">value&lt;/span>: &lt;span style="color:#ae81ff">hello&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">K_SERVICE&lt;/span>
&lt;span style="color:#f92672">value&lt;/span>: &lt;span style="color:#ae81ff">hello&lt;/span>
&lt;span style="color:#f92672">image&lt;/span>: &lt;span style="color:#ae81ff">gcr.oneitfarm.com/knative-samples/helloworld-go&lt;/span>
&lt;span style="color:#f92672">imagePullPolicy&lt;/span>: &lt;span style="color:#ae81ff">Always&lt;/span>
&lt;span style="color:#f92672">lifecycle&lt;/span>:
&lt;span style="color:#f92672">preStop&lt;/span>:
&lt;span style="color:#f92672">httpGet&lt;/span>:
&lt;span style="color:#f92672">path&lt;/span>: &lt;span style="color:#ae81ff">/wait-for-drain&lt;/span>
&lt;span style="color:#f92672">port&lt;/span>: &lt;span style="color:#ae81ff">8022&lt;/span>
&lt;span style="color:#f92672">scheme&lt;/span>: &lt;span style="color:#ae81ff">HTTP&lt;/span>
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">user-container&lt;/span>
&lt;span style="color:#f92672">ports&lt;/span>:
- &lt;span style="color:#f92672">containerPort&lt;/span>: &lt;span style="color:#ae81ff">8080&lt;/span>
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">user-port&lt;/span>
&lt;span style="color:#f92672">protocol&lt;/span>: &lt;span style="color:#ae81ff">TCP&lt;/span>
&lt;span style="color:#f92672">resources&lt;/span>: {}
&lt;span style="color:#f92672">terminationMessagePath&lt;/span>: &lt;span style="color:#ae81ff">/dev/termination-log&lt;/span>
&lt;span style="color:#f92672">terminationMessagePolicy&lt;/span>: &lt;span style="color:#ae81ff">FallbackToLogsOnError&lt;/span>
- &lt;span style="color:#f92672">env&lt;/span>:
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">SERVING_NAMESPACE&lt;/span>
&lt;span style="color:#f92672">value&lt;/span>: &lt;span style="color:#ae81ff">default&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">SERVING_SERVICE&lt;/span>
&lt;span style="color:#f92672">value&lt;/span>: &lt;span style="color:#ae81ff">hello&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">SERVING_CONFIGURATION&lt;/span>
&lt;span style="color:#f92672">value&lt;/span>: &lt;span style="color:#ae81ff">hello&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">SERVING_REVISION&lt;/span>
&lt;span style="color:#f92672">value&lt;/span>: &lt;span style="color:#ae81ff">hello-00001&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">QUEUE_SERVING_PORT&lt;/span>
&lt;span style="color:#f92672">value&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;8012&amp;#34;&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">CONTAINER_CONCURRENCY&lt;/span>
&lt;span style="color:#f92672">value&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;0&amp;#34;&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">REVISION_TIMEOUT_SECONDS&lt;/span>
&lt;span style="color:#f92672">value&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;300&amp;#34;&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">SERVING_POD&lt;/span>
&lt;span style="color:#f92672">valueFrom&lt;/span>:
&lt;span style="color:#f92672">fieldRef&lt;/span>:
&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">v1&lt;/span>
&lt;span style="color:#f92672">fieldPath&lt;/span>: &lt;span style="color:#ae81ff">metadata.name&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">SERVING_POD_IP&lt;/span>
&lt;span style="color:#f92672">valueFrom&lt;/span>:
&lt;span style="color:#f92672">fieldRef&lt;/span>:
&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">v1&lt;/span>
&lt;span style="color:#f92672">fieldPath&lt;/span>: &lt;span style="color:#ae81ff">status.podIP&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">SERVING_LOGGING_CONFIG&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">SERVING_LOGGING_LEVEL&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">SERVING_REQUEST_LOG_TEMPLATE&lt;/span>
&lt;span style="color:#f92672">value&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;{&amp;#34;httpRequest&amp;#34;: {&amp;#34;requestMethod&amp;#34;: &amp;#34;{{.Request.Method}}&amp;#34;, &amp;#34;requestUrl&amp;#34;:
&lt;/span>&lt;span style="color:#e6db74"> &amp;#34;{{js .Request.RequestURI}}&amp;#34;, &amp;#34;requestSize&amp;#34;: &amp;#34;{{.Request.ContentLength}}&amp;#34;,
&lt;/span>&lt;span style="color:#e6db74"> &amp;#34;status&amp;#34;: {{.Response.Code}}, &amp;#34;responseSize&amp;#34;: &amp;#34;{{.Response.Size}}&amp;#34;, &amp;#34;userAgent&amp;#34;:
&lt;/span>&lt;span style="color:#e6db74"> &amp;#34;{{js .Request.UserAgent}}&amp;#34;, &amp;#34;remoteIp&amp;#34;: &amp;#34;{{js .Request.RemoteAddr}}&amp;#34;,
&lt;/span>&lt;span style="color:#e6db74"> &amp;#34;serverIp&amp;#34;: &amp;#34;{{.Revision.PodIP}}&amp;#34;, &amp;#34;referer&amp;#34;: &amp;#34;{{js .Request.Referer}}&amp;#34;,
&lt;/span>&lt;span style="color:#e6db74"> &amp;#34;latency&amp;#34;: &amp;#34;{{.Response.Latency}}s&amp;#34;, &amp;#34;protocol&amp;#34;: &amp;#34;{{.Request.Proto}}&amp;#34;},
&lt;/span>&lt;span style="color:#e6db74"> &amp;#34;traceId&amp;#34;: &amp;#34;{{index .Request.Header &amp;#34;X-B3-Traceid&amp;#34;}}&amp;#34;}&amp;#39;&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">SERVING_ENABLE_REQUEST_LOG&lt;/span>
&lt;span style="color:#f92672">value&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;false&amp;#34;&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">SERVING_REQUEST_METRICS_BACKEND&lt;/span>
&lt;span style="color:#f92672">value&lt;/span>: &lt;span style="color:#ae81ff">prometheus&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">TRACING_CONFIG_BACKEND&lt;/span>
&lt;span style="color:#f92672">value&lt;/span>: &lt;span style="color:#ae81ff">none&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">TRACING_CONFIG_ZIPKIN_ENDPOINT&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">TRACING_CONFIG_DEBUG&lt;/span>
&lt;span style="color:#f92672">value&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;false&amp;#34;&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">TRACING_CONFIG_SAMPLE_RATE&lt;/span>
&lt;span style="color:#f92672">value&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;0.1&amp;#34;&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">USER_PORT&lt;/span>
&lt;span style="color:#f92672">value&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;8080&amp;#34;&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">SYSTEM_NAMESPACE&lt;/span>
&lt;span style="color:#f92672">value&lt;/span>: &lt;span style="color:#ae81ff">knative-serving&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">METRICS_DOMAIN&lt;/span>
&lt;span style="color:#f92672">value&lt;/span>: &lt;span style="color:#ae81ff">knative.dev/internal/serving&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">SERVING_READINESS_PROBE&lt;/span>
&lt;span style="color:#f92672">value&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;{&amp;#34;tcpSocket&amp;#34;:{&amp;#34;port&amp;#34;:8080,&amp;#34;host&amp;#34;:&amp;#34;127.0.0.1&amp;#34;},&amp;#34;successThreshold&amp;#34;:1}&amp;#39;&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">ENABLE_PROFILING&lt;/span>
&lt;span style="color:#f92672">value&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;false&amp;#34;&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">SERVING_ENABLE_PROBE_REQUEST_LOG&lt;/span>
&lt;span style="color:#f92672">value&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;false&amp;#34;&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">METRICS_COLLECTOR_ADDRESS&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">CONCURRENCY_STATE_ENDPOINT&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">CONCURRENCY_STATE_TOKEN_PATH&lt;/span>
&lt;span style="color:#f92672">value&lt;/span>: &lt;span style="color:#ae81ff">/var/run/secrets/tokens/state-token&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">HOST_IP&lt;/span>
&lt;span style="color:#f92672">valueFrom&lt;/span>:
&lt;span style="color:#f92672">fieldRef&lt;/span>:
&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">v1&lt;/span>
&lt;span style="color:#f92672">fieldPath&lt;/span>: &lt;span style="color:#ae81ff">status.hostIP&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">ENABLE_HTTP2_AUTO_DETECTION&lt;/span>
&lt;span style="color:#f92672">value&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;false&amp;#34;&lt;/span>
&lt;span style="color:#f92672">image&lt;/span>: &lt;span style="color:#ae81ff">gcr.oneitfarm.com/knative-releases/knative.dev/serving/cmd/queue@sha256:5e63873df82ae864bfd5267a0ec7c3ef87c38a04c5ec894100fc4d5c48720569&lt;/span>
&lt;span style="color:#f92672">imagePullPolicy&lt;/span>: &lt;span style="color:#ae81ff">IfNotPresent&lt;/span>
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">queue-proxy&lt;/span>
&lt;span style="color:#f92672">ports&lt;/span>:
- &lt;span style="color:#f92672">containerPort&lt;/span>: &lt;span style="color:#ae81ff">8022&lt;/span>
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">http-queueadm&lt;/span>
&lt;span style="color:#f92672">protocol&lt;/span>: &lt;span style="color:#ae81ff">TCP&lt;/span>
- &lt;span style="color:#f92672">containerPort&lt;/span>: &lt;span style="color:#ae81ff">9090&lt;/span>
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">http-autometric&lt;/span>
&lt;span style="color:#f92672">protocol&lt;/span>: &lt;span style="color:#ae81ff">TCP&lt;/span>
- &lt;span style="color:#f92672">containerPort&lt;/span>: &lt;span style="color:#ae81ff">9091&lt;/span>
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">http-usermetric&lt;/span>
&lt;span style="color:#f92672">protocol&lt;/span>: &lt;span style="color:#ae81ff">TCP&lt;/span>
- &lt;span style="color:#f92672">containerPort&lt;/span>: &lt;span style="color:#ae81ff">8012&lt;/span>
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">queue-port&lt;/span>
&lt;span style="color:#f92672">protocol&lt;/span>: &lt;span style="color:#ae81ff">TCP&lt;/span>
&lt;span style="color:#f92672">readinessProbe&lt;/span>:
&lt;span style="color:#f92672">failureThreshold&lt;/span>: &lt;span style="color:#ae81ff">3&lt;/span>
&lt;span style="color:#f92672">httpGet&lt;/span>:
&lt;span style="color:#f92672">httpHeaders&lt;/span>:
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">K-Network-Probe&lt;/span>
&lt;span style="color:#f92672">value&lt;/span>: &lt;span style="color:#ae81ff">queue&lt;/span>
&lt;span style="color:#f92672">path&lt;/span>: &lt;span style="color:#ae81ff">/&lt;/span>
&lt;span style="color:#f92672">port&lt;/span>: &lt;span style="color:#ae81ff">8012&lt;/span>
&lt;span style="color:#f92672">scheme&lt;/span>: &lt;span style="color:#ae81ff">HTTP&lt;/span>
&lt;span style="color:#f92672">periodSeconds&lt;/span>: &lt;span style="color:#ae81ff">1&lt;/span>
&lt;span style="color:#f92672">successThreshold&lt;/span>: &lt;span style="color:#ae81ff">1&lt;/span>
&lt;span style="color:#f92672">timeoutSeconds&lt;/span>: &lt;span style="color:#ae81ff">1&lt;/span>
&lt;span style="color:#f92672">resources&lt;/span>:
&lt;span style="color:#f92672">requests&lt;/span>:
&lt;span style="color:#f92672">cpu&lt;/span>: &lt;span style="color:#ae81ff">25m&lt;/span>
&lt;span style="color:#f92672">securityContext&lt;/span>:
&lt;span style="color:#f92672">allowPrivilegeEscalation&lt;/span>: &lt;span style="color:#66d9ef">false&lt;/span>
&lt;span style="color:#f92672">capabilities&lt;/span>:
&lt;span style="color:#f92672">drop&lt;/span>:
- &lt;span style="color:#ae81ff">all&lt;/span>
&lt;span style="color:#f92672">readOnlyRootFilesystem&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;span style="color:#f92672">runAsNonRoot&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;span style="color:#f92672">terminationMessagePath&lt;/span>: &lt;span style="color:#ae81ff">/dev/termination-log&lt;/span>
&lt;span style="color:#f92672">terminationMessagePolicy&lt;/span>: &lt;span style="color:#ae81ff">File&lt;/span>
&lt;span style="color:#f92672">dnsPolicy&lt;/span>: &lt;span style="color:#ae81ff">ClusterFirst&lt;/span>
&lt;span style="color:#f92672">enableServiceLinks&lt;/span>: &lt;span style="color:#66d9ef">false&lt;/span>
&lt;span style="color:#f92672">restartPolicy&lt;/span>: &lt;span style="color:#ae81ff">Always&lt;/span>
&lt;span style="color:#f92672">schedulerName&lt;/span>: &lt;span style="color:#ae81ff">default-scheduler&lt;/span>
&lt;span style="color:#f92672">securityContext&lt;/span>: {}
&lt;span style="color:#f92672">terminationGracePeriodSeconds&lt;/span>: &lt;span style="color:#ae81ff">300&lt;/span>
&lt;span style="color:#f92672">status&lt;/span>:
&lt;span style="color:#f92672">observedGeneration&lt;/span>: &lt;span style="color:#ae81ff">12&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="imagecache">imagecache&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">caching.internal.knative.dev/v1alpha1&lt;/span>
&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Image&lt;/span>
&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;span style="color:#f92672">annotations&lt;/span>:
&lt;span style="color:#f92672">serving.knative.dev/creator&lt;/span>: &lt;span style="color:#ae81ff">minikube-user&lt;/span>
&lt;span style="color:#f92672">creationTimestamp&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;2021-11-12T06:53:11Z&amp;#34;&lt;/span>
&lt;span style="color:#f92672">generation&lt;/span>: &lt;span style="color:#ae81ff">1&lt;/span>
&lt;span style="color:#f92672">labels&lt;/span>:
&lt;span style="color:#f92672">app&lt;/span>: &lt;span style="color:#ae81ff">hello-00001&lt;/span>
&lt;span style="color:#f92672">serving.knative.dev/configuration&lt;/span>: &lt;span style="color:#ae81ff">hello&lt;/span>
&lt;span style="color:#f92672">serving.knative.dev/configurationGeneration&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;1&amp;#34;&lt;/span>
&lt;span style="color:#f92672">serving.knative.dev/configurationUID&lt;/span>: &lt;span style="color:#ae81ff">5150d10a-8d42-464b-95be-2f38b110e863&lt;/span>
&lt;span style="color:#f92672">serving.knative.dev/revision&lt;/span>: &lt;span style="color:#ae81ff">hello-00001&lt;/span>
&lt;span style="color:#f92672">serving.knative.dev/revisionUID&lt;/span>: &lt;span style="color:#ae81ff">357a23d7-24e2-4bb3-8af6-40e23122548f&lt;/span>
&lt;span style="color:#f92672">serving.knative.dev/service&lt;/span>: &lt;span style="color:#ae81ff">hello&lt;/span>
&lt;span style="color:#f92672">serving.knative.dev/serviceUID&lt;/span>: &lt;span style="color:#ae81ff">d97bd364-1b92-4682-b568-cffd4b85054f&lt;/span>
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">hello-00001-cache-user-container&lt;/span>
&lt;span style="color:#f92672">namespace&lt;/span>: &lt;span style="color:#ae81ff">default&lt;/span>
&lt;span style="color:#f92672">ownerReferences&lt;/span>:
- &lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">serving.knative.dev/v1&lt;/span>
&lt;span style="color:#f92672">blockOwnerDeletion&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;span style="color:#f92672">controller&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Revision&lt;/span>
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">hello-00001&lt;/span>
&lt;span style="color:#f92672">uid&lt;/span>: &lt;span style="color:#ae81ff">357a23d7-24e2-4bb3-8af6-40e23122548f&lt;/span>
&lt;span style="color:#f92672">resourceVersion&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;1394796&amp;#34;&lt;/span>
&lt;span style="color:#f92672">uid&lt;/span>: &lt;span style="color:#ae81ff">0eb86961-74d2-4a23-bc21-24da31526b26&lt;/span>
&lt;span style="color:#f92672">spec&lt;/span>:
&lt;span style="color:#f92672">image&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="kpa">KPA&lt;/h4>
&lt;p>label指向了configuration、revision、service。scaleTargetRef指向了需要被缩放的目标deployment。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">autoscaling.internal.knative.dev/v1alpha1&lt;/span>
&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">PodAutoscaler&lt;/span>
&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;span style="color:#f92672">annotations&lt;/span>:
&lt;span style="color:#f92672">autoscaling.knative.dev/class&lt;/span>: &lt;span style="color:#ae81ff">kpa.autoscaling.knative.dev&lt;/span>
&lt;span style="color:#f92672">autoscaling.knative.dev/metric&lt;/span>: &lt;span style="color:#ae81ff">concurrency&lt;/span>
&lt;span style="color:#f92672">creationTimestamp&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;2021-11-12T06:59:30Z&amp;#34;&lt;/span>
&lt;span style="color:#f92672">generation&lt;/span>: &lt;span style="color:#ae81ff">6&lt;/span>
&lt;span style="color:#f92672">labels&lt;/span>:
&lt;span style="color:#f92672">app&lt;/span>: &lt;span style="color:#ae81ff">hello-00001&lt;/span>
&lt;span style="color:#f92672">serving.knative.dev/configuration&lt;/span>: &lt;span style="color:#ae81ff">hello&lt;/span>
&lt;span style="color:#f92672">serving.knative.dev/configurationGeneration&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;1&amp;#34;&lt;/span>
&lt;span style="color:#f92672">serving.knative.dev/configurationUID&lt;/span>: &lt;span style="color:#ae81ff">5150d10a-8d42-464b-95be-2f38b110e863&lt;/span>
&lt;span style="color:#f92672">serving.knative.dev/revision&lt;/span>: &lt;span style="color:#ae81ff">hello-00001&lt;/span>
&lt;span style="color:#f92672">serving.knative.dev/revisionUID&lt;/span>: &lt;span style="color:#ae81ff">357a23d7-24e2-4bb3-8af6-40e23122548f&lt;/span>
&lt;span style="color:#f92672">serving.knative.dev/service&lt;/span>: &lt;span style="color:#ae81ff">hello&lt;/span>
&lt;span style="color:#f92672">serving.knative.dev/serviceUID&lt;/span>: &lt;span style="color:#ae81ff">d97bd364-1b92-4682-b568-cffd4b85054f&lt;/span>
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">hello-00001&lt;/span>
&lt;span style="color:#f92672">namespace&lt;/span>: &lt;span style="color:#ae81ff">default&lt;/span>
&lt;span style="color:#f92672">ownerReferences&lt;/span>:
- &lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">serving.knative.dev/v1&lt;/span>
&lt;span style="color:#f92672">blockOwnerDeletion&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;span style="color:#f92672">controller&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Revision&lt;/span>
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">hello-00001&lt;/span>
&lt;span style="color:#f92672">uid&lt;/span>: &lt;span style="color:#ae81ff">357a23d7-24e2-4bb3-8af6-40e23122548f&lt;/span>
&lt;span style="color:#f92672">resourceVersion&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;2999966&amp;#34;&lt;/span>
&lt;span style="color:#f92672">uid&lt;/span>: &lt;span style="color:#ae81ff">a630c17f-600f-44a3-ab44-f6e4213ac229&lt;/span>
&lt;span style="color:#f92672">spec&lt;/span>:
&lt;span style="color:#f92672">protocolType&lt;/span>: &lt;span style="color:#ae81ff">http1&lt;/span>
&lt;span style="color:#f92672">reachability&lt;/span>: &lt;span style="color:#ae81ff">Reachable&lt;/span>
&lt;span style="color:#f92672">scaleTargetRef&lt;/span>:
&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">apps/v1&lt;/span>
&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Deployment&lt;/span>
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">hello-00001-deployment&lt;/span>
&lt;span style="color:#f92672">status&lt;/span>:
&lt;span style="color:#f92672">actualScale&lt;/span>: &lt;span style="color:#ae81ff">0&lt;/span>
&lt;span style="color:#f92672">desiredScale&lt;/span>: &lt;span style="color:#ae81ff">0&lt;/span>
&lt;span style="color:#f92672">metricsServiceName&lt;/span>: &lt;span style="color:#ae81ff">hello-00001-private&lt;/span>
&lt;span style="color:#f92672">observedGeneration&lt;/span>: &lt;span style="color:#ae81ff">6&lt;/span>
&lt;span style="color:#f92672">serviceName&lt;/span>: &lt;span style="color:#ae81ff">hello-00001&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="sks">SKS&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">v1&lt;/span>
&lt;span style="color:#f92672">items&lt;/span>:
- &lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">networking.internal.knative.dev/v1alpha1&lt;/span>
&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">ServerlessService&lt;/span>
&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;span style="color:#f92672">annotations&lt;/span>:
&lt;span style="color:#f92672">autoscaling.knative.dev/class&lt;/span>: &lt;span style="color:#ae81ff">kpa.autoscaling.knative.dev&lt;/span>
&lt;span style="color:#f92672">serving.knative.dev/creator&lt;/span>: &lt;span style="color:#ae81ff">minikube-user&lt;/span>
&lt;span style="color:#f92672">creationTimestamp&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;2021-11-12T06:59:30Z&amp;#34;&lt;/span>
&lt;span style="color:#f92672">generation&lt;/span>: &lt;span style="color:#ae81ff">13&lt;/span>
&lt;span style="color:#f92672">labels&lt;/span>:
&lt;span style="color:#f92672">app&lt;/span>: &lt;span style="color:#ae81ff">hello-00001&lt;/span>
&lt;span style="color:#f92672">serving.knative.dev/configuration&lt;/span>: &lt;span style="color:#ae81ff">hello&lt;/span>
&lt;span style="color:#f92672">serving.knative.dev/configurationGeneration&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;1&amp;#34;&lt;/span>
&lt;span style="color:#f92672">serving.knative.dev/configurationUID&lt;/span>: &lt;span style="color:#ae81ff">5150d10a-8d42-464b-95be-2f38b110e863&lt;/span>
&lt;span style="color:#f92672">serving.knative.dev/revision&lt;/span>: &lt;span style="color:#ae81ff">hello-00001&lt;/span>
&lt;span style="color:#f92672">serving.knative.dev/revisionUID&lt;/span>: &lt;span style="color:#ae81ff">357a23d7-24e2-4bb3-8af6-40e23122548f&lt;/span>
&lt;span style="color:#f92672">serving.knative.dev/service&lt;/span>: &lt;span style="color:#ae81ff">hello&lt;/span>
&lt;span style="color:#f92672">serving.knative.dev/serviceUID&lt;/span>: &lt;span style="color:#ae81ff">d97bd364-1b92-4682-b568-cffd4b85054f&lt;/span>
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">hello-00001&lt;/span>
&lt;span style="color:#f92672">namespace&lt;/span>: &lt;span style="color:#ae81ff">default&lt;/span>
&lt;span style="color:#f92672">ownerReferences&lt;/span>:
- &lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">autoscaling.internal.knative.dev/v1alpha1&lt;/span>
&lt;span style="color:#f92672">blockOwnerDeletion&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;span style="color:#f92672">controller&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">PodAutoscaler&lt;/span>
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">hello-00001&lt;/span>
&lt;span style="color:#f92672">uid&lt;/span>: &lt;span style="color:#ae81ff">a630c17f-600f-44a3-ab44-f6e4213ac229&lt;/span>
&lt;span style="color:#f92672">resourceVersion&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;2999964&amp;#34;&lt;/span>
&lt;span style="color:#f92672">uid&lt;/span>: &lt;span style="color:#ae81ff">cb0495e0-f248-460f-9e5c-ecdd5af12b24&lt;/span>
&lt;span style="color:#f92672">spec&lt;/span>:
&lt;span style="color:#f92672">mode&lt;/span>: &lt;span style="color:#ae81ff">Proxy&lt;/span>
&lt;span style="color:#f92672">numActivators&lt;/span>: &lt;span style="color:#ae81ff">2&lt;/span>
&lt;span style="color:#f92672">objectRef&lt;/span>:
&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">apps/v1&lt;/span>
&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Deployment&lt;/span>
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">hello-00001-deployment&lt;/span>
&lt;span style="color:#f92672">protocolType&lt;/span>: &lt;span style="color:#ae81ff">http1&lt;/span>
&lt;span style="color:#f92672">status&lt;/span>:
&lt;span style="color:#f92672">observedGeneration&lt;/span>: &lt;span style="color:#ae81ff">7&lt;/span>
&lt;span style="color:#f92672">privateServiceName&lt;/span>: &lt;span style="color:#ae81ff">hello-00001-private&lt;/span>
&lt;span style="color:#f92672">serviceName&lt;/span>: &lt;span style="color:#ae81ff">hello-00001&lt;/span>
&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">List&lt;/span>
&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;span style="color:#f92672">resourceVersion&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>
&lt;span style="color:#f92672">selfLink&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="service-public">Service public&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">v1&lt;/span>
&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Service&lt;/span>
&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;span style="color:#f92672">annotations&lt;/span>:
&lt;span style="color:#f92672">autoscaling.knative.dev/class&lt;/span>: &lt;span style="color:#ae81ff">kpa.autoscaling.knative.dev&lt;/span>
&lt;span style="color:#f92672">creationTimestamp&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;2021-11-12T06:59:31Z&amp;#34;&lt;/span>
&lt;span style="color:#f92672">labels&lt;/span>:
&lt;span style="color:#f92672">app&lt;/span>: &lt;span style="color:#ae81ff">hello-00001&lt;/span>
&lt;span style="color:#f92672">networking.internal.knative.dev/serverlessservice&lt;/span>: &lt;span style="color:#ae81ff">hello-00001&lt;/span>
&lt;span style="color:#f92672">networking.internal.knative.dev/serviceType&lt;/span>: &lt;span style="color:#ae81ff">Public&lt;/span>
&lt;span style="color:#f92672">serving.knative.dev/configuration&lt;/span>: &lt;span style="color:#ae81ff">hello&lt;/span>
&lt;span style="color:#f92672">serving.knative.dev/configurationGeneration&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;1&amp;#34;&lt;/span>
&lt;span style="color:#f92672">serving.knative.dev/configurationUID&lt;/span>: &lt;span style="color:#ae81ff">5150d10a-8d42-464b-95be-2f38b110e863&lt;/span>
&lt;span style="color:#f92672">serving.knative.dev/revision&lt;/span>: &lt;span style="color:#ae81ff">hello-00001&lt;/span>
&lt;span style="color:#f92672">serving.knative.dev/revisionUID&lt;/span>: &lt;span style="color:#ae81ff">357a23d7-24e2-4bb3-8af6-40e23122548f&lt;/span>
&lt;span style="color:#f92672">serving.knative.dev/service&lt;/span>: &lt;span style="color:#ae81ff">hello&lt;/span>
&lt;span style="color:#f92672">serving.knative.dev/serviceUID&lt;/span>: &lt;span style="color:#ae81ff">d97bd364-1b92-4682-b568-cffd4b85054f&lt;/span>
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">hello-00001&lt;/span>
&lt;span style="color:#f92672">namespace&lt;/span>: &lt;span style="color:#ae81ff">default&lt;/span>
&lt;span style="color:#f92672">ownerReferences&lt;/span>:
- &lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">networking.internal.knative.dev/v1alpha1&lt;/span>
&lt;span style="color:#f92672">blockOwnerDeletion&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;span style="color:#f92672">controller&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">ServerlessService&lt;/span>
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">hello-00001&lt;/span>
&lt;span style="color:#f92672">uid&lt;/span>: &lt;span style="color:#ae81ff">cb0495e0-f248-460f-9e5c-ecdd5af12b24&lt;/span>
&lt;span style="color:#f92672">resourceVersion&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;1397165&amp;#34;&lt;/span>
&lt;span style="color:#f92672">uid&lt;/span>: &lt;span style="color:#ae81ff">a1117e40-8a81-4700-b13e-53cd52bf55d5&lt;/span>
&lt;span style="color:#f92672">spec&lt;/span>:
&lt;span style="color:#f92672">clusterIP&lt;/span>: &lt;span style="color:#ae81ff">10.109.208.245&lt;/span>
&lt;span style="color:#f92672">clusterIPs&lt;/span>:
- &lt;span style="color:#ae81ff">10.109.208.245&lt;/span>
&lt;span style="color:#f92672">ipFamilies&lt;/span>:
- &lt;span style="color:#ae81ff">IPv4&lt;/span>
&lt;span style="color:#f92672">ipFamilyPolicy&lt;/span>: &lt;span style="color:#ae81ff">SingleStack&lt;/span>
&lt;span style="color:#f92672">ports&lt;/span>:
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">http&lt;/span>
&lt;span style="color:#f92672">port&lt;/span>: &lt;span style="color:#ae81ff">80&lt;/span>
&lt;span style="color:#f92672">protocol&lt;/span>: &lt;span style="color:#ae81ff">TCP&lt;/span>
&lt;span style="color:#f92672">targetPort&lt;/span>: &lt;span style="color:#ae81ff">8012&lt;/span>
&lt;span style="color:#f92672">sessionAffinity&lt;/span>: &lt;span style="color:#ae81ff">None&lt;/span>
&lt;span style="color:#f92672">type&lt;/span>: &lt;span style="color:#ae81ff">ClusterIP&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="metrics">metrics&lt;/h4>
&lt;p>metrics是定义这个服务流量指标获取的一些参数。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">autoscaling.internal.knative.dev/v1alpha1&lt;/span>
&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Metric&lt;/span>
&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;span style="color:#f92672">annotations&lt;/span>:
&lt;span style="color:#f92672">autoscaling.knative.dev/class&lt;/span>: &lt;span style="color:#ae81ff">kpa.autoscaling.knative.dev&lt;/span>
&lt;span style="color:#f92672">autoscaling.knative.dev/metric&lt;/span>: &lt;span style="color:#ae81ff">concurrency&lt;/span>
&lt;span style="color:#f92672">creationTimestamp&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;2021-11-12T07:08:59Z&amp;#34;&lt;/span>
&lt;span style="color:#f92672">generation&lt;/span>: &lt;span style="color:#ae81ff">1&lt;/span>
&lt;span style="color:#f92672">labels&lt;/span>:
&lt;span style="color:#f92672">app&lt;/span>: &lt;span style="color:#ae81ff">hello-00001&lt;/span>
&lt;span style="color:#f92672">serving.knative.dev/configuration&lt;/span>: &lt;span style="color:#ae81ff">hello&lt;/span>
&lt;span style="color:#f92672">serving.knative.dev/configurationGeneration&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;1&amp;#34;&lt;/span>
&lt;span style="color:#f92672">serving.knative.dev/configurationUID&lt;/span>: &lt;span style="color:#ae81ff">5150d10a-8d42-464b-95be-2f38b110e863&lt;/span>
&lt;span style="color:#f92672">serving.knative.dev/revision&lt;/span>: &lt;span style="color:#ae81ff">hello-00001&lt;/span>
&lt;span style="color:#f92672">serving.knative.dev/revisionUID&lt;/span>: &lt;span style="color:#ae81ff">357a23d7-24e2-4bb3-8af6-40e23122548f&lt;/span>
&lt;span style="color:#f92672">serving.knative.dev/service&lt;/span>: &lt;span style="color:#ae81ff">hello&lt;/span>
&lt;span style="color:#f92672">serving.knative.dev/serviceUID&lt;/span>: &lt;span style="color:#ae81ff">d97bd364-1b92-4682-b568-cffd4b85054f&lt;/span>
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">hello-00001&lt;/span>
&lt;span style="color:#f92672">namespace&lt;/span>: &lt;span style="color:#ae81ff">default&lt;/span>
&lt;span style="color:#f92672">ownerReferences&lt;/span>:
- &lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">autoscaling.internal.knative.dev/v1alpha1&lt;/span>
&lt;span style="color:#f92672">blockOwnerDeletion&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;span style="color:#f92672">controller&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">PodAutoscaler&lt;/span>
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">hello-00001&lt;/span>
&lt;span style="color:#f92672">uid&lt;/span>: &lt;span style="color:#ae81ff">a630c17f-600f-44a3-ab44-f6e4213ac229&lt;/span>
&lt;span style="color:#f92672">resourceVersion&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;3138042&amp;#34;&lt;/span>
&lt;span style="color:#f92672">uid&lt;/span>: &lt;span style="color:#ae81ff">7d67484b-0d49-4c9e-83e3-8c967889a1e6&lt;/span>
&lt;span style="color:#f92672">spec&lt;/span>:
&lt;span style="color:#f92672">panicWindow&lt;/span>: &lt;span style="color:#ae81ff">6000000000&lt;/span>
&lt;span style="color:#f92672">scrapeTarget&lt;/span>: &lt;span style="color:#ae81ff">hello-00001-private&lt;/span>
&lt;span style="color:#f92672">stableWindow&lt;/span>: &lt;span style="color:#ae81ff">60000000000&lt;/span>
&lt;span style="color:#f92672">status&lt;/span>:
&lt;span style="color:#f92672">conditions&lt;/span>:
- &lt;span style="color:#f92672">lastTransitionTime&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;2021-11-15T13:11:17Z&amp;#34;&lt;/span>
&lt;span style="color:#f92672">status&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;True&amp;#34;&lt;/span>
&lt;span style="color:#f92672">type&lt;/span>: &lt;span style="color:#ae81ff">Ready&lt;/span>
&lt;span style="color:#f92672">observedGeneration&lt;/span>: &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>参考：&lt;/p>
&lt;p>流量机制探索https://juejin.cn/post/6844904084005191693&lt;/p>
&lt;p>如何基于 Knative 开发 自定义controllerhttps://mp.weixin.qq.com/s/L2jt2m1SUjXTD2kuBqB4Ow&lt;/p>
&lt;p>【超详细】深入探究 Knative 扩缩容的奥秘https://mp.weixin.qq.com/s/O9LXnIQknW-vH_mwrkQltA&lt;/p>
&lt;p>【源码解析】Knative Serving核心逻辑实现（上篇）https://www.mdnice.com/writing/bb331f71193c4c28903b63209aeeb14b&lt;/p>
&lt;p>Knative 全链路流量机制探索与揭秘https://www.infoq.cn/article/niwwtl3apwoz7uigdmsb&lt;/p></description></item><item><title>Serverless: Debug Knative</title><link>https://taction.top/serverless/platform/debug-knative/</link><pubDate>Thu, 04 Nov 2021 15:36:50 +0800</pubDate><guid>https://taction.top/serverless/platform/debug-knative/</guid><description>
&lt;p>TL;DR&lt;/p>
&lt;p>本文主要介绍在本机IED中如何远程调试位于k8s中的knative程序。&lt;/p>
&lt;h3 id="目标">目标&lt;/h3>
&lt;p>由于knative组件运行在k8s中，当发生错误的时候，在对代码不是特别熟悉的情况下，单步调试程序能够观察程序运行的函数，以及运行过程中的上下文，对排查问题非常方便。实际knative程序允许你在k8s外运行服务组件，通过环境变量或者命令行参数指定kubeconfig和server参数即可。&lt;/p>
&lt;p>但是本文主要介绍另外一种思路，不是所有程序都能方便的运行在本地的。所以对于运行在k8s中的任意knative程序包括proxy进行调试就是本文的目标。&lt;/p>
&lt;h3 id="步骤">步骤&lt;/h3>
&lt;h4 id="镜像">镜像&lt;/h4>
&lt;blockquote>
&lt;p>knative 镜像制作：https://www.likakuli.com/posts/knative-build/&lt;/p>
&lt;/blockquote>
&lt;p>首先要创建一个镜像，编译的二进制和启动命令都会有所不同。通过查看knative组件&lt;/p>
&lt;p>由于knative使用&lt;a href="https://github.com/google/ko">ko&lt;/a>来进行镜像的制作和推送。我简单的看了一下，发现了解这个可能会给我带来一定的时间成本。所以我直接按照自己最舒服的方式自己写了一下Makefile和Dockerfile。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-makefile" data-lang="makefile">REGCFLAGS &lt;span style="color:#f92672">=&lt;/span> -gcflags &lt;span style="color:#e6db74">&amp;#34;all=-N -l&amp;#34;&lt;/span>
SRC_FOLDER &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>shell ls cmd&lt;span style="color:#66d9ef">)&lt;/span>
&lt;span style="color:#a6e22e">prepare&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">[&lt;/span> ! -d &lt;span style="color:#e6db74">&amp;#34;./bin/&amp;#34;&lt;/span> &lt;span style="color:#f92672">]&lt;/span>; &lt;span style="color:#66d9ef">then&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;span style="color:#ae81ff">&lt;/span> mkdir bin; &lt;span style="color:#ae81ff">\
&lt;/span>&lt;span style="color:#ae81ff">&lt;/span> &lt;span style="color:#66d9ef">fi&lt;/span>
&lt;span style="color:#a6e22e">default&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
@for dir in &lt;span style="color:#e6db74">${&lt;/span>SRC_FOLDER&lt;span style="color:#e6db74">}&lt;/span>; &lt;span style="color:#66d9ef">do&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;span style="color:#ae81ff">&lt;/span> go build &lt;span style="color:#66d9ef">$(&lt;/span>REGCFLAGS&lt;span style="color:#66d9ef">)&lt;/span> -mod vendor -o bin/$$dir ./cmd/$$dir ; &lt;span style="color:#ae81ff">\
&lt;/span>&lt;span style="color:#ae81ff">&lt;/span> &lt;span style="color:#66d9ef">done&lt;/span>
&lt;span style="color:#a6e22e">remote&lt;/span>&lt;span style="color:#f92672">:&lt;/span> prepare default
&lt;span style="color:#a6e22e">docker&lt;/span>&lt;span style="color:#f92672">:&lt;/span> remote
@for dir in &lt;span style="color:#e6db74">${&lt;/span>SRC_FOLDER&lt;span style="color:#e6db74">}&lt;/span>; &lt;span style="color:#66d9ef">do&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;span style="color:#ae81ff">&lt;/span> docker build --build-arg BIN&lt;span style="color:#f92672">=&lt;/span>$$dir -t docker4zc/$$dir . ; docker push docker4zc/$$dir ; &lt;span style="color:#ae81ff">\
&lt;/span>&lt;span style="color:#ae81ff">&lt;/span> &lt;span style="color:#66d9ef">done&lt;/span>
&lt;span style="color:#a6e22e">docker-local&lt;/span>&lt;span style="color:#f92672">:&lt;/span> remote
@for dir in &lt;span style="color:#e6db74">${&lt;/span>SRC_FOLDER&lt;span style="color:#e6db74">}&lt;/span>; &lt;span style="color:#66d9ef">do&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;span style="color:#ae81ff">&lt;/span> docker build --build-arg BIN&lt;span style="color:#f92672">=&lt;/span>$$dir -t docker4zc/$$dir . ; &lt;span style="color:#ae81ff">\
&lt;/span>&lt;span style="color:#ae81ff">&lt;/span> &lt;span style="color:#66d9ef">done&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-dockerfile" data-lang="dockerfile">&lt;span style="color:#66d9ef">FROM&lt;/span>&lt;span style="color:#e6db74"> golang:latest AS golang&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">ENV&lt;/span> GOPROXY&lt;span style="color:#f92672">=&lt;/span>https://goproxy.cn,direct&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">RUN&lt;/span> CGO_ENABLED&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span> go get -ldflags &lt;span style="color:#e6db74">&amp;#39;-s -w -extldflags -static&amp;#39;&lt;/span> github.com/go-delve/delve/cmd/dlv&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#75715e">#FROM gcr.oneitfarm.com/distroless/static:noroot&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">FROM&lt;/span>&lt;span style="color:#e6db74"> ubuntu&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">ARG&lt;/span> BIN&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">WORKDIR&lt;/span>&lt;span style="color:#e6db74"> /&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">COPY&lt;/span> bin/&lt;span style="color:#e6db74">${&lt;/span>BIN&lt;span style="color:#e6db74">}&lt;/span> /execbin&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">COPY&lt;/span> --from&lt;span style="color:#f92672">=&lt;/span>golang /go/bin/dlv /&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">CMD&lt;/span> [&lt;span style="color:#e6db74">&amp;#34;/dlv&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;--listen=:2345&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;--headless=true&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;--api-version=2&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;--accept-multiclient&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;exec&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;/execbin&amp;#34;&lt;/span>]&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>首先你需要在运行命令的地方登陆自己的dockerhub账号，并且将我的dockerhub账号&lt;code>docker4zc&lt;/code>换成你自己的账号，这样你就可以把镜像推送到自己的仓库。然后你在项目主目录下运行&lt;code>make docker&lt;/code>即可。&lt;/p>
&lt;p>然后你需要在这个网址&lt;code>https://github.com/knative/serving/releases/download/v0.26.0/serving-core.yaml&lt;/code>(将v0.26.0替换成你需要的版本)下载安装knative serving的yaml文件，并将你想要调试的组件镜像替换，如果是&lt;code>webhook&lt;/code>组件，那么就是将&lt;code>gcr.io/knative-releases/knative.dev/serving/cmd/webhook@sha256:d512342e1a1ec454ceade96923e21c24ec0f2cb780e86ced8e66eb62033c74b5&lt;/code>格式的镜像替换成&lt;code>docker.io/{your dockerhub account}/webhook:latest&lt;/code>。&lt;/p>
&lt;p>另外由于我将基础镜像由&lt;code>gcr.oneitfarm.com/distroless/static:noroot&lt;/code>替换成了&lt;code>ubuntu&lt;/code>，所以你同时需要将yaml文件中每个deployment下&lt;code>runAsNonRoot: true&lt;/code>去掉。&lt;/p>
&lt;p>接下来你就可以&lt;code>kubectl apply -f serving-core.yaml&lt;/code>将其部署到k8s中。&lt;/p>
&lt;h3 id="端口转发">端口转发&lt;/h3>
&lt;h4 id="转发一个本地端口到-pod-端口">转发一个本地端口到 Pod 端口&lt;/h4>
&lt;p>以下命令将activator的2345端口转发到本地12345端口&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">kubectl port-forward -n knative-serving webhook-7b9b84596d-245rh 12345:2345
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这相当于&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">kubectl port-forward -n knative-serving pods/webhook-7b9b84596d-245rh 12345:2345
&lt;/code>&lt;/pre>&lt;/div>&lt;p>或者&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">kubectl port-forward -n knative-serving deployment/webhook 12345:2345
&lt;/code>&lt;/pre>&lt;/div>&lt;p>参考&lt;a href="https://kubernetes.io/zh/docs/tasks/access-application-cluster/port-forward-access-application-cluster/#%E8%BD%AC%E5%8F%91%E4%B8%80%E4%B8%AA%E6%9C%AC%E5%9C%B0%E7%AB%AF%E5%8F%A3%E5%88%B0-pod-%E7%AB%AF%E5%8F%A3">使用端口转发来访问集群中的应用&lt;/a>&lt;/p>
&lt;p>如果是在minikube中运行，那么你就是在minikube所在机器运行以上命令。并通过机器ip+12345端口进行连接。如果是在k8s中运行，那么你可以在本地将kubectl设置对应的kubeconfig后，通过127.0.0.1+12345端口进行连接。&lt;/p>
&lt;h4 id="goland-ide远程调试">Goland IDE远程调试&lt;/h4>
&lt;p>VS code和goland都具有此功能，这里以goland为例。在创建时选择go remote类型，设置对应的host和port即可：&lt;/p>
&lt;p>&lt;img src="https://taction.top/images/goremotedebug.png" alt="image-20211107153446536">&lt;/p>
&lt;h3 id="注意事项">注意事项&lt;/h3>
&lt;h4 id="使用私有镜像仓库">使用私有镜像仓库&lt;/h4>
&lt;blockquote>
&lt;p>如果你在调试过程中发现&lt;code>Unable to fetch image...x509: certificate signed by unknown authority&lt;/code>，你可以考虑是否由以下原因造成。&lt;/p>
&lt;/blockquote>
&lt;p>如果你的服务使用的是私有的镜像仓库，你需要设置跳过tag resolving。如果你的私有仓库为&lt;code>harbor.test.com&lt;/code>,你可以通过以下命令设置：&lt;/p>
&lt;pre tabindex="0">&lt;code>kubectl patch configmap -n knative-serving config-deployment -p &amp;quot;{\&amp;quot;data\&amp;quot;: {\&amp;quot;registriesSkippingTagResolving\&amp;quot;: \&amp;quot;harbor.test.com\&amp;quot;}}&amp;quot;
&lt;/code>&lt;/pre>&lt;h4 id="k8s探活">k8s探活&lt;/h4>
&lt;p>由于部分knative组件配置了&lt;a href="https://kubernetes.io/zh/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/">k8s probe&lt;/a>探针，所以你在调试过程中由于执行太慢，发现有时候pod会被重启。所以当遇到这种情况的时候将&lt;code>livenessProbe&lt;/code>和&lt;code>readinessProbe&lt;/code>部分去掉即可。部署之前可以将yaml下载到本地，然后删掉这部分内容之后再apply。如果已经部署完成，以&lt;code>autoscaler&lt;/code>为例可以通过&lt;code>kubectl edit deploy -n knative-serving autoscaler &lt;/code> 编辑对应的yaml文件删除。&lt;/p>
&lt;p>【注意】：此更改应该仅用于测试。&lt;/p>
&lt;p>其他参考：&lt;/p>
&lt;p>&lt;a href="https://zhuanlan.zhihu.com/p/149938368">在Kubernetes中远程调试Go服务&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://github.com/knative/serving/issues/5126">Unable to fetch image &amp;ldquo;gcr.io/knative-samples/helloworld-go&amp;rdquo;: failed to resolve image to digest: Get &amp;ldquo;https://gcr.io/v2/&amp;quot;: x509: certificate signed by unknown authority&lt;/a>&lt;/p></description></item><item><title>Serverless: Knative Use</title><link>https://taction.top/serverless/platform/knative-use/</link><pubDate>Mon, 01 Nov 2021 13:41:20 +0800</pubDate><guid>https://taction.top/serverless/platform/knative-use/</guid><description>
&lt;p>本文档主要介绍跟随&lt;a href="https://knative.dev/docs/getting-started/">官网入门教程&lt;/a>和&lt;a href="https://github.com/csantanapr/knative-minikube">minikube&lt;/a>案例运行knative的hello world。中间部分命令根据国内众所周知的网络特点做了一下适配。本篇基本未涉及原理性介绍。&lt;/p>
&lt;p>首先确认安装&lt;a href="https://kind.sigs.k8s.io/docs/user/quick-start">kind&lt;/a>或者&lt;a href="https://minikube.sigs.k8s.io/docs/start/">minikube&lt;/a>、&lt;a href="https://kubernetes.io/docs/tasks/tools/">kubectl&lt;/a>、&lt;a href="https://knative.dev/docs/getting-started/#install-the-knative-cli">kn&lt;/a>这些必要的软件。如果你跟随本教程，那么你只需要确认安装minikube和kubectl即可。&lt;/p>
&lt;h3 id="启动minikube">启动minikube&lt;/h3>
&lt;p>当minikube镜像拉取过慢的时候可以参考&lt;a href="https://www.cxyzjd.com/article/TinyJian/109699420">配置代理&lt;/a>。或者通过以下命令来运行minikube&lt;code>minikube start --image-mirror-country='cn' --image-repository='registry.cn-hangzhou.aliyuncs.com/google_containers'&lt;/code>但是这样是不够的。还是无法解决minikube拉取knative镜像问题。你会发现pod的状态被卡在&lt;code>ImagePullBackOff&lt;/code>状态中。&lt;/p>
&lt;p>作为一个成熟的程序员，命令行代理你肯定已经非常熟悉了。这里主要说明一下启动minikube设置的docker-env是配置在拉取镜像中通过此代理拉取。这里要注意第一要把本地代理client监听0.0.0.0，如果为了安全你可以通过网络安全组来限制只能自己的ip访问这个端口。第二将以下命令行中{your ip}替换成你主机的实际公网ip。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#75715e"># 命令行代理&lt;/span>
export http_proxy&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;http://127.0.0.1:1080&amp;#34;&lt;/span>
export https_proxy&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;http://127.0.0.1:1080&amp;#34;&lt;/span>
&lt;span style="color:#75715e"># 启动minikube&lt;/span>
minikube start &lt;span style="color:#ae81ff">\
&lt;/span>&lt;span style="color:#ae81ff">&lt;/span>--image-mirror-country cn &lt;span style="color:#ae81ff">\
&lt;/span>&lt;span style="color:#ae81ff">&lt;/span>--image-repository&lt;span style="color:#f92672">=&lt;/span>registry.cn-hangzhou.aliyuncs.com/google_containers &lt;span style="color:#ae81ff">\
&lt;/span>&lt;span style="color:#ae81ff">&lt;/span>--docker-env http_proxy&lt;span style="color:#f92672">=&lt;/span>http://&lt;span style="color:#f92672">{&lt;/span>your ip&lt;span style="color:#f92672">}&lt;/span>:1080 &lt;span style="color:#ae81ff">\
&lt;/span>&lt;span style="color:#ae81ff">&lt;/span>--docker-env https_proxy&lt;span style="color:#f92672">=&lt;/span>http://&lt;span style="color:#f92672">{&lt;/span>your ip&lt;span style="color:#f92672">}&lt;/span>:1080 &lt;span style="color:#ae81ff">\
&lt;/span>&lt;span style="color:#ae81ff">&lt;/span>--docker-env no_proxy&lt;span style="color:#f92672">=&lt;/span>localhost,127.0.0.1,10.96.0.0/12,192.168.99.0/24,192.168.39.0/24
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="安装knative">安装knative&lt;/h3>
&lt;p>选择要安装的版本&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">export KNATIVE_VERSION&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;0.26.0&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>定义knative自己的各项CustomResourceDefinition（CRD）来扩展k8s API。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">kubectl apply -f https://github.com/knative/serving/releases/download/v$KNATIVE_VERSION/serving-crds.yaml
kubectl wait --for&lt;span style="color:#f92672">=&lt;/span>condition&lt;span style="color:#f92672">=&lt;/span>Established --all crd
&lt;/code>&lt;/pre>&lt;/div>&lt;p>创建knative-serving namespace并且安装各项knative组件。在这个yaml里定义了namespace、k8s权限及绑定、一些crd资源以及knative组件deployment。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">kubectl apply -f https://github.com/knative/serving/releases/download/v$KNATIVE_VERSION/serving-core.yaml
kubectl wait pod --timeout&lt;span style="color:#f92672">=&lt;/span>-1s --for&lt;span style="color:#f92672">=&lt;/span>condition&lt;span style="color:#f92672">=&lt;/span>Ready -l &lt;span style="color:#e6db74">&amp;#39;!job-name&amp;#39;&lt;/span> -n knative-serving &amp;gt; /dev/null
&lt;/code>&lt;/pre>&lt;/div>&lt;p>选择你要安装的Net Kourier版本&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">export KNATIVE_NET_KOURIER_VERSION&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;0.26.0&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>在&lt;code>kourier-system&lt;/code> namespace下安装kourier&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">kubectl apply -f https://github.com/knative/net-kourier/releases/download/v$KNATIVE_NET_KOURIER_VERSION/kourier.yaml
kubectl wait pod --timeout&lt;span style="color:#f92672">=&lt;/span>-1s --for&lt;span style="color:#f92672">=&lt;/span>condition&lt;span style="color:#f92672">=&lt;/span>Ready -l &lt;span style="color:#e6db74">&amp;#39;!job-name&amp;#39;&lt;/span> -n kourier-system
kubectl wait pod --timeout&lt;span style="color:#f92672">=&lt;/span>-1s --for&lt;span style="color:#f92672">=&lt;/span>condition&lt;span style="color:#f92672">=&lt;/span>Ready -l &lt;span style="color:#e6db74">&amp;#39;!job-name&amp;#39;&lt;/span> -n knative-serving
&lt;/code>&lt;/pre>&lt;/div>&lt;p>你也可以通过以下命令来查看创建了哪些pod以及它们的状态&lt;code>watch kubectl get pods -n knative-serving&lt;/code>。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ kubectl get pods -n knative-serving
NAME READY STATUS RESTARTS AGE
activator-7b9b84596d-245rh 1/1 Running 0 23m
autoscaler-65cbff8f7d-bg4w7 1/1 Running 0 23m
controller-7d8f4849d8-dnmsq 1/1 Running 0 23m
domain-mapping-676785d476-jx6dd 1/1 Running 0 23m
domainmapping-webhook-7949444d7d-z8plp 1/1 Running 0 23m
webhook-58975ff8d-kqtrx 1/1 Running 0 23m
&lt;/code>&lt;/pre>&lt;p>当所有的都处于running状态的时候，即启动完成，否则你可以根据对应的status判断是否出现了问题。&lt;/p>
&lt;p>新开一个命令行终端运行以下命令。您需要这样做才能使用&lt;code>EXTERNAL-IP&lt;/code>for kourier Load Balancer 服务。&lt;/p>
&lt;pre tabindex="0">&lt;code>minikube tunnel
&lt;/code>&lt;/pre>&lt;p>将环境变量设置为&lt;code>EXTERNAL_IP&lt;/code>工作节点的外部 IP 地址，您可能需要多次运行此命令，直到服务就绪。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">EXTERNAL_IP&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>kubectl -n kourier-system get service kourier -o jsonpath&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;{.status.loadBalancer.ingress[0].ip}&amp;#39;&lt;/span>&lt;span style="color:#66d9ef">)&lt;/span>
echo EXTERNAL_IP&lt;span style="color:#f92672">=&lt;/span>$EXTERNAL_IP
&lt;/code>&lt;/pre>&lt;/div>&lt;p>使用以下命令将环境变量设置&lt;code>KNATIVE_DOMAIN&lt;/code>为 DNS 域&lt;code>nip.io&lt;/code>，并检查dns可以被正常解析。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">KNATIVE_DOMAIN&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>$EXTERNAL_IP&lt;span style="color:#e6db74">.nip.io&amp;#34;&lt;/span>
echo KNATIVE_DOMAIN&lt;span style="color:#f92672">=&lt;/span>$KNATIVE_DOMAIN
dig $KNATIVE_DOMAIN
&lt;/code>&lt;/pre>&lt;/div>&lt;p>为 Knative 服务配置 DNS&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">kubectl patch configmap -n knative-serving config-domain -p &lt;span style="color:#e6db74">&amp;#34;{\&amp;#34;data\&amp;#34;: {\&amp;#34;&lt;/span>$KNATIVE_DOMAIN&lt;span style="color:#e6db74">\&amp;#34;: \&amp;#34;\&amp;#34;}}&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>配置knative使用kourier&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">kubectl patch configmap/config-network &lt;span style="color:#ae81ff">\
&lt;/span>&lt;span style="color:#ae81ff">&lt;/span> --namespace knative-serving &lt;span style="color:#ae81ff">\
&lt;/span>&lt;span style="color:#ae81ff">&lt;/span> --type merge &lt;span style="color:#ae81ff">\
&lt;/span>&lt;span style="color:#ae81ff">&lt;/span> --patch &lt;span style="color:#e6db74">&amp;#39;{&amp;#34;data&amp;#34;:{&amp;#34;ingress.class&amp;#34;:&amp;#34;kourier.ingress.networking.knative.dev&amp;#34;}}&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>接下来你就可以进行服务部署了。&lt;/p>
&lt;h3 id="部署服务">部署服务&lt;/h3>
&lt;pre tabindex="0">&lt;code>cat &amp;lt;&amp;lt;EOF | kubectl apply -f -
apiVersion: serving.knative.dev/v1
kind: Service
metadata:
name: hello
spec:
template:
spec:
containers:
- image: gcr.oneitfarm.com/knative-samples/helloworld-go
ports:
- containerPort: 8080
env:
- name: TARGET
value: &amp;quot;Knative&amp;quot;
EOF
&lt;/code>&lt;/pre>&lt;p>等待服务部署完成&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">kubectl wait ksvc hello --all --timeout&lt;span style="color:#f92672">=&lt;/span>-1s --for&lt;span style="color:#f92672">=&lt;/span>condition&lt;span style="color:#f92672">=&lt;/span>Ready
&lt;/code>&lt;/pre>&lt;/div>&lt;p>获取服务的访问url&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">SERVICE_URL&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>kubectl get ksvc hello -o jsonpath&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;{.status.url}&amp;#39;&lt;/span>&lt;span style="color:#66d9ef">)&lt;/span>
echo $SERVICE_URL
&lt;/code>&lt;/pre>&lt;/div>&lt;p>访问服务,这个时候控制台应该会输出&lt;code>Hello Knative&lt;/code>&lt;/p>
&lt;pre tabindex="0">&lt;code>$ curl $SERVICE_URL
&lt;/code>&lt;/pre>&lt;p>我定义了一下输出内容，这样可以看到运行的时候的请求延迟。分别对服务进行冷启动请求和热请求测试。&lt;/p>
&lt;pre tabindex="0">&lt;code>curl -w &amp;quot;@curl-format.txt&amp;quot; $SERVICE_URL
&lt;/code>&lt;/pre>&lt;p>运行结果&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#75715e"># 冷启动请求&lt;/span>
curl -w &lt;span style="color:#e6db74">&amp;#34;@curl-format.txt&amp;#34;&lt;/span> $SERVICE_URL
Hello Knative!
time_namelookup: 0.001831
time_connect: 0.002052
time_appconnect: 0.000000
time_redirect: 0.000000
time_pretransfer: 0.002110
time_starttransfer: 1.966370
----------
time_total: 1.966427
&lt;span style="color:#75715e"># 热启动请求&lt;/span>
curl -w &lt;span style="color:#e6db74">&amp;#34;@curl-format.txt&amp;#34;&lt;/span> $SERVICE_URL
Hello Knative!
time_namelookup: 0.194799
time_connect: 0.195032
time_appconnect: 0.000000
time_redirect: 0.000000
time_pretransfer: 0.195137
time_starttransfer: 0.196945
----------
time_total: 0.196989
&lt;/code>&lt;/pre>&lt;/div>&lt;p>在这个过程中我们可以另外开一个命令行，通过watch pods来查看当有请求时容器被启动，当一段时间内没有请求后，容器数量被缩放到0这一现象。&lt;/p>
&lt;p>&lt;img src="https://taction.top/images/knative-scale.png" alt="image-20211101204945605">&lt;/p>
&lt;h4 id="部署新版本及分流">部署新版本及分流&lt;/h4>
&lt;p>默认情况下knative会将所有流量都导入新版本，你可以增加&lt;code>traffic&lt;/code>字段来指定不同版本的流量比例。&lt;/p>
&lt;pre tabindex="0">&lt;code>cat &amp;lt;&amp;lt;EOF | kubectl apply -f -
apiVersion: serving.knative.dev/v1
kind: Service
metadata:
name: hello
spec:
template:
metadata:
name: hello-knative-v2
spec:
containers:
- image: gcr.oneitfarm.com/knative-samples/helloworld-go
ports:
- containerPort: 8080
env:
- name: TARGET
value: &amp;quot;Knative V2&amp;quot;
traffic:
- latestRevision: true
percent: 50
- revisionName: hello-00001
percent: 50
EOF
&lt;/code>&lt;/pre>&lt;p>配置成功控制台会输出&lt;/p>
&lt;pre tabindex="0">&lt;code>service.serving.knative.dev/hello configured
&lt;/code>&lt;/pre>&lt;p>这个时候我们再请求就会发现流量被路由到了不同的版本，你可以通过以下命令来查看不同的版本。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">kn revisions list
&lt;span style="color:#75715e"># or&lt;/span>
kubectl get revisions
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="服务缩放定义">服务缩放定义&lt;/h4>
&lt;p>可以通过annotations中的定义来指定缩放策略。比如以下策略可以定义从1-5的pod缩放。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">cat &lt;span style="color:#e6db74">&amp;lt;&amp;lt;EOF | kubectl apply -f -
&lt;/span>&lt;span style="color:#e6db74">apiVersion: serving.knative.dev/v1
&lt;/span>&lt;span style="color:#e6db74">kind: Service
&lt;/span>&lt;span style="color:#e6db74">metadata:
&lt;/span>&lt;span style="color:#e6db74"> name: hello
&lt;/span>&lt;span style="color:#e6db74">spec:
&lt;/span>&lt;span style="color:#e6db74"> template:
&lt;/span>&lt;span style="color:#e6db74"> metadata:
&lt;/span>&lt;span style="color:#e6db74"> name: hello-knative-v3
&lt;/span>&lt;span style="color:#e6db74"> annotations:
&lt;/span>&lt;span style="color:#e6db74"> # the minimum number of pods to scale down to
&lt;/span>&lt;span style="color:#e6db74"> autoscaling.knative.dev/minScale: &amp;#34;1&amp;#34;
&lt;/span>&lt;span style="color:#e6db74"> # the maximum number of pods to scale up to
&lt;/span>&lt;span style="color:#e6db74"> autoscaling.knative.dev/maxScale: &amp;#34;5&amp;#34;
&lt;/span>&lt;span style="color:#e6db74"> # Target in-flight-requests per pod.
&lt;/span>&lt;span style="color:#e6db74"> autoscaling.knative.dev/target: &amp;#34;1&amp;#34;
&lt;/span>&lt;span style="color:#e6db74"> spec:
&lt;/span>&lt;span style="color:#e6db74"> containers:
&lt;/span>&lt;span style="color:#e6db74"> - image: gcr.oneitfarm.com/knative-samples/helloworld-go
&lt;/span>&lt;span style="color:#e6db74"> ports:
&lt;/span>&lt;span style="color:#e6db74"> - containerPort: 8080
&lt;/span>&lt;span style="color:#e6db74"> env:
&lt;/span>&lt;span style="color:#e6db74"> - name: TARGET
&lt;/span>&lt;span style="color:#e6db74"> value: &amp;#34;Knative V3&amp;#34;
&lt;/span>&lt;span style="color:#e6db74">EOF&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这时用hey压测就会得到以下结果&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ hey -z 30s -c &lt;span style="color:#ae81ff">50&lt;/span> http://hello.default.10.104.46.103.nip.io
Summary:
Total: 30.0150 secs
Slowest: 2.1715 secs
Fastest: 0.0024 secs
Average: 0.0353 secs
Requests/sec: 1412.4594
Total data: &lt;span style="color:#ae81ff">763110&lt;/span> bytes
Size/request: &lt;span style="color:#ae81ff">18&lt;/span> bytes
Response time histogram:
0.002 &lt;span style="color:#f92672">[&lt;/span>1&lt;span style="color:#f92672">]&lt;/span> |
0.219 &lt;span style="color:#f92672">[&lt;/span>42314&lt;span style="color:#f92672">]&lt;/span> |■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
0.436 &lt;span style="color:#f92672">[&lt;/span>30&lt;span style="color:#f92672">]&lt;/span> |
0.653 &lt;span style="color:#f92672">[&lt;/span>0&lt;span style="color:#f92672">]&lt;/span> |
0.870 &lt;span style="color:#f92672">[&lt;/span>0&lt;span style="color:#f92672">]&lt;/span> |
1.087 &lt;span style="color:#f92672">[&lt;/span>0&lt;span style="color:#f92672">]&lt;/span> |
1.304 &lt;span style="color:#f92672">[&lt;/span>0&lt;span style="color:#f92672">]&lt;/span> |
1.521 &lt;span style="color:#f92672">[&lt;/span>0&lt;span style="color:#f92672">]&lt;/span> |
1.738 &lt;span style="color:#f92672">[&lt;/span>0&lt;span style="color:#f92672">]&lt;/span> |
1.955 &lt;span style="color:#f92672">[&lt;/span>0&lt;span style="color:#f92672">]&lt;/span> |
2.171 &lt;span style="color:#f92672">[&lt;/span>50&lt;span style="color:#f92672">]&lt;/span> |
Latency distribution:
10% in 0.0151 secs
25% in 0.0204 secs
50% in 0.0285 secs
75% in 0.0399 secs
90% in 0.0546 secs
95% in 0.0671 secs
99% in 0.1100 secs
Details &lt;span style="color:#f92672">(&lt;/span>average, fastest, slowest&lt;span style="color:#f92672">)&lt;/span>:
DNS+dialup: 0.0024 secs, 0.0024 secs, 2.1715 secs
DNS-lookup: 0.0024 secs, 0.0000 secs, 2.0054 secs
req write: 0.0000 secs, 0.0000 secs, 0.0108 secs
resp wait: 0.0329 secs, 0.0023 secs, 0.2963 secs
resp read: 0.0001 secs, 0.0000 secs, 0.0073 secs
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这个时候我们查看pod状态，就可以看到其中有一个预启动的比其他存活时间更久&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ k get pods
NAME READY STATUS RESTARTS AGE
hello-knative-v3-deployment-fdf969d79-b8zts 2/2 Running &lt;span style="color:#ae81ff">0&lt;/span> 81s
hello-knative-v3-deployment-fdf969d79-gr9t2 2/2 Running &lt;span style="color:#ae81ff">0&lt;/span> 3m17s
hello-knative-v3-deployment-fdf969d79-qhd2s 2/2 Running &lt;span style="color:#ae81ff">0&lt;/span> 81s
hello-knative-v3-deployment-fdf969d79-sfb8g 2/2 Running &lt;span style="color:#ae81ff">0&lt;/span> 81s
hello-knative-v3-deployment-fdf969d79-sz4hl 2/2 Running &lt;span style="color:#ae81ff">0&lt;/span> 81s
&lt;/code>&lt;/pre>&lt;/div>&lt;p>注意：如果你设置&lt;code>minScale &amp;gt; 0&lt;/code>将导致每个&lt;code>Revision&lt;/code>Pod 始终至少运行指定数量的 Pod，尽管它们没有获得任何流量。在这种情况下，不要忘记清理旧版本。&lt;/p>
&lt;h3 id="后记">后记&lt;/h3>
&lt;p>通过本篇文章，你可以在自己的minikube中运行knative并且观察其对于服务的实际缩放的现象。并且能够看到服务的冷热启动的请求延迟。&lt;/p>
&lt;p>接下来计划陆续会进行远程调试k8s中的knative组件、对knative组件分析、knative与kong结合案例的分析、knative关键源码分析。&lt;/p></description></item></channel></rss>